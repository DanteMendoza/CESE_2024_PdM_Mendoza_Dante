
Practica_2A_retardos_no_bloqueantes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008ec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aa0  08000aa0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa0  08000aa0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa0  08000aa0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa0  08000aa0  00010aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aa4  08000aa4  00010aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000020  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000359e  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000ccb  00000000  00000000  00023629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003d8  00000000  00000000  000242f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002bb  00000000  00000000  000246d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002464d  00000000  00000000  0002498b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006068  00000000  00000000  00048fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0733  00000000  00000000  0004f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d38  00000000  00000000  0012f774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  001304ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a80 	.word	0x08000a80

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08000a80 	.word	0x08000a80

080001ec <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b08a      	sub	sp, #40	; 0x28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d10e      	bne.n	800021a <BSP_LED_Init+0x2e>
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	4b1f      	ldr	r3, [pc, #124]	; (8000280 <BSP_LED_Init+0x94>)
 8000202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000204:	4a1e      	ldr	r2, [pc, #120]	; (8000280 <BSP_LED_Init+0x94>)
 8000206:	f043 0302 	orr.w	r3, r3, #2
 800020a:	6313      	str	r3, [r2, #48]	; 0x30
 800020c:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <BSP_LED_Init+0x94>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	f003 0302 	and.w	r3, r3, #2
 8000214:	613b      	str	r3, [r7, #16]
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	e00d      	b.n	8000236 <BSP_LED_Init+0x4a>
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	4b18      	ldr	r3, [pc, #96]	; (8000280 <BSP_LED_Init+0x94>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a17      	ldr	r2, [pc, #92]	; (8000280 <BSP_LED_Init+0x94>)
 8000224:	f043 0302 	orr.w	r3, r3, #2
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <BSP_LED_Init+0x94>)
 800022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022e:	f003 0302 	and.w	r3, r3, #2
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4a12      	ldr	r2, [pc, #72]	; (8000284 <BSP_LED_Init+0x98>)
 800023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800023e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000240:	2301      	movs	r3, #1
 8000242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000244:	2300      	movs	r3, #0
 8000246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000248:	2302      	movs	r3, #2
 800024a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <BSP_LED_Init+0x9c>)
 8000250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000254:	f107 0214 	add.w	r2, r7, #20
 8000258:	4611      	mov	r1, r2
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f9da 	bl	8000614 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	4a09      	ldr	r2, [pc, #36]	; (8000288 <BSP_LED_Init+0x9c>)
 8000264:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <BSP_LED_Init+0x98>)
 800026c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000270:	2200      	movs	r2, #0
 8000272:	4619      	mov	r1, r3
 8000274:	f000 fb7a 	bl	800096c <HAL_GPIO_WritePin>
}
 8000278:	bf00      	nop
 800027a:	3728      	adds	r7, #40	; 0x28
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40023800 	.word	0x40023800
 8000284:	08000a98 	.word	0x08000a98
 8000288:	20000000 	.word	0x20000000

0800028c <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <BSP_LED_Off+0x2c>)
 800029a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a06      	ldr	r2, [pc, #24]	; (80002bc <BSP_LED_Off+0x30>)
 80002a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a6:	2200      	movs	r2, #0
 80002a8:	4619      	mov	r1, r3
 80002aa:	f000 fb5f 	bl	800096c <HAL_GPIO_WritePin>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000000 	.word	0x20000000
 80002bc:	08000a98 	.word	0x08000a98

080002c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <SystemInit+0x60>)
 80002c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ca:	4a15      	ldr	r2, [pc, #84]	; (8000320 <SystemInit+0x60>)
 80002cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <SystemInit+0x64>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a12      	ldr	r2, [pc, #72]	; (8000324 <SystemInit+0x64>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002e0:	4b10      	ldr	r3, [pc, #64]	; (8000324 <SystemInit+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <SystemInit+0x64>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <SystemInit+0x64>)
 80002ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <SystemInit+0x64>)
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <SystemInit+0x68>)
 80002fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <SystemInit+0x64>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a08      	ldr	r2, [pc, #32]	; (8000324 <SystemInit+0x64>)
 8000302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000306:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <SystemInit+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800030e:	4b04      	ldr	r3, [pc, #16]	; (8000320 <SystemInit+0x60>)
 8000310:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000314:	609a      	str	r2, [r3, #8]
#endif
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	40023800 	.word	0x40023800
 8000328:	24003010 	.word	0x24003010

0800032c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr

0800033a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800033e:	e7fe      	b.n	800033e <HardFault_Handler+0x4>

08000340 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000344:	e7fe      	b.n	8000344 <MemManage_Handler+0x4>

08000346 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800034a:	e7fe      	b.n	800034a <BusFault_Handler+0x4>

0800034c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000350:	e7fe      	b.n	8000350 <UsageFault_Handler+0x4>

08000352 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000380:	f000 f84e 	bl	8000420 <HAL_IncTick>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}

08000388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <HAL_Init+0x34>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <HAL_Init+0x34>)
 8000392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000396:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <HAL_Init+0x34>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a07      	ldr	r2, [pc, #28]	; (80003bc <HAL_Init+0x34>)
 800039e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003a4:	2003      	movs	r0, #3
 80003a6:	f000 f901 	bl	80005ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003aa:	200f      	movs	r0, #15
 80003ac:	f000 f808 	bl	80003c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003b0:	f000 faf5 	bl	800099e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40023c00 	.word	0x40023c00

080003c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <HAL_InitTick+0x54>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_InitTick+0x58>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80003da:	fbb2 f3f3 	udiv	r3, r2, r3
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f90b 	bl	80005fa <HAL_SYSTICK_Config>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003ea:	2301      	movs	r3, #1
 80003ec:	e00e      	b.n	800040c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b0f      	cmp	r3, #15
 80003f2:	d80a      	bhi.n	800040a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003f4:	2200      	movs	r2, #0
 80003f6:	6879      	ldr	r1, [r7, #4]
 80003f8:	f04f 30ff 	mov.w	r0, #4294967295
 80003fc:	f000 f8e1 	bl	80005c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_InitTick+0x5c>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000406:	2300      	movs	r3, #0
 8000408:	e000      	b.n	800040c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800040a:	2301      	movs	r3, #1
}
 800040c:	4618      	mov	r0, r3
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000000c 	.word	0x2000000c
 8000418:	20000014 	.word	0x20000014
 800041c:	20000010 	.word	0x20000010

08000420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_IncTick+0x20>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	461a      	mov	r2, r3
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <HAL_IncTick+0x24>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4413      	add	r3, r2
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <HAL_IncTick+0x24>)
 8000432:	6013      	str	r3, [r2, #0]
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000014 	.word	0x20000014
 8000444:	20000034 	.word	0x20000034

08000448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f003 0307 	and.w	r3, r3, #7
 8000456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <__NVIC_SetPriorityGrouping+0x44>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000464:	4013      	ands	r3, r2
 8000466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800047a:	4a04      	ldr	r2, [pc, #16]	; (800048c <__NVIC_SetPriorityGrouping+0x44>)
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	60d3      	str	r3, [r2, #12]
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00

08000490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000494:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	0a1b      	lsrs	r3, r3, #8
 800049a:	f003 0307 	and.w	r3, r3, #7
}
 800049e:	4618      	mov	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	db0a      	blt.n	80004d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	490c      	ldr	r1, [pc, #48]	; (80004f8 <__NVIC_SetPriority+0x4c>)
 80004c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ca:	0112      	lsls	r2, r2, #4
 80004cc:	b2d2      	uxtb	r2, r2
 80004ce:	440b      	add	r3, r1
 80004d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004d4:	e00a      	b.n	80004ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4908      	ldr	r1, [pc, #32]	; (80004fc <__NVIC_SetPriority+0x50>)
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	f003 030f 	and.w	r3, r3, #15
 80004e2:	3b04      	subs	r3, #4
 80004e4:	0112      	lsls	r2, r2, #4
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	440b      	add	r3, r1
 80004ea:	761a      	strb	r2, [r3, #24]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000e100 	.word	0xe000e100
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000500:	b480      	push	{r7}
 8000502:	b089      	sub	sp, #36	; 0x24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	f1c3 0307 	rsb	r3, r3, #7
 800051a:	2b04      	cmp	r3, #4
 800051c:	bf28      	it	cs
 800051e:	2304      	movcs	r3, #4
 8000520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	3304      	adds	r3, #4
 8000526:	2b06      	cmp	r3, #6
 8000528:	d902      	bls.n	8000530 <NVIC_EncodePriority+0x30>
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3b03      	subs	r3, #3
 800052e:	e000      	b.n	8000532 <NVIC_EncodePriority+0x32>
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000534:	f04f 32ff 	mov.w	r2, #4294967295
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	43da      	mvns	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000548:	f04f 31ff 	mov.w	r1, #4294967295
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43d9      	mvns	r1, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000558:	4313      	orrs	r3, r2
         );
}
 800055a:	4618      	mov	r0, r3
 800055c:	3724      	adds	r7, #36	; 0x24
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3b01      	subs	r3, #1
 8000574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000578:	d301      	bcc.n	800057e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800057a:	2301      	movs	r3, #1
 800057c:	e00f      	b.n	800059e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <SysTick_Config+0x40>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3b01      	subs	r3, #1
 8000584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000586:	210f      	movs	r1, #15
 8000588:	f04f 30ff 	mov.w	r0, #4294967295
 800058c:	f7ff ff8e 	bl	80004ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <SysTick_Config+0x40>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <SysTick_Config+0x40>)
 8000598:	2207      	movs	r2, #7
 800059a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	e000e010 	.word	0xe000e010

080005ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ff47 	bl	8000448 <__NVIC_SetPriorityGrouping>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	4603      	mov	r3, r0
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005d4:	f7ff ff5c 	bl	8000490 <__NVIC_GetPriorityGrouping>
 80005d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	6978      	ldr	r0, [r7, #20]
 80005e0:	f7ff ff8e 	bl	8000500 <NVIC_EncodePriority>
 80005e4:	4602      	mov	r2, r0
 80005e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff5d 	bl	80004ac <__NVIC_SetPriority>
}
 80005f2:	bf00      	nop
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f7ff ffb0 	bl	8000568 <SysTick_Config>
 8000608:	4603      	mov	r3, r0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000614:	b480      	push	{r7}
 8000616:	b089      	sub	sp, #36	; 0x24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
 800062e:	e177      	b.n	8000920 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000630:	2201      	movs	r2, #1
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	fa02 f303 	lsl.w	r3, r2, r3
 8000638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	4013      	ands	r3, r2
 8000642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	429a      	cmp	r2, r3
 800064a:	f040 8166 	bne.w	800091a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	2b01      	cmp	r3, #1
 8000658:	d005      	beq.n	8000666 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000662:	2b02      	cmp	r3, #2
 8000664:	d130      	bne.n	80006c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	2203      	movs	r2, #3
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	69ba      	ldr	r2, [r7, #24]
 800067a:	4013      	ands	r3, r2
 800067c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	69ba      	ldr	r2, [r7, #24]
 800068c:	4313      	orrs	r3, r2
 800068e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	69ba      	ldr	r2, [r7, #24]
 8000694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800069c:	2201      	movs	r2, #1
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	43db      	mvns	r3, r3
 80006a6:	69ba      	ldr	r2, [r7, #24]
 80006a8:	4013      	ands	r3, r2
 80006aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	091b      	lsrs	r3, r3, #4
 80006b2:	f003 0201 	and.w	r2, r3, #1
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	4313      	orrs	r3, r2
 80006c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	69ba      	ldr	r2, [r7, #24]
 80006c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 0303 	and.w	r3, r3, #3
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d017      	beq.n	8000704 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	2203      	movs	r2, #3
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	43db      	mvns	r3, r3
 80006e6:	69ba      	ldr	r2, [r7, #24]
 80006e8:	4013      	ands	r3, r2
 80006ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	69ba      	ldr	r2, [r7, #24]
 8000702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f003 0303 	and.w	r3, r3, #3
 800070c:	2b02      	cmp	r3, #2
 800070e:	d123      	bne.n	8000758 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	08da      	lsrs	r2, r3, #3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3208      	adds	r2, #8
 8000718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800071c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	f003 0307 	and.w	r3, r3, #7
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	220f      	movs	r2, #15
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	69ba      	ldr	r2, [r7, #24]
 8000730:	4013      	ands	r3, r2
 8000732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	691a      	ldr	r2, [r3, #16]
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	4313      	orrs	r3, r2
 8000748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	08da      	lsrs	r2, r3, #3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3208      	adds	r2, #8
 8000752:	69b9      	ldr	r1, [r7, #24]
 8000754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	2203      	movs	r2, #3
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	69ba      	ldr	r2, [r7, #24]
 800076c:	4013      	ands	r3, r2
 800076e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f003 0203 	and.w	r2, r3, #3
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	4313      	orrs	r3, r2
 8000784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000794:	2b00      	cmp	r3, #0
 8000796:	f000 80c0 	beq.w	800091a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b66      	ldr	r3, [pc, #408]	; (8000938 <HAL_GPIO_Init+0x324>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	4a65      	ldr	r2, [pc, #404]	; (8000938 <HAL_GPIO_Init+0x324>)
 80007a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a8:	6453      	str	r3, [r2, #68]	; 0x44
 80007aa:	4b63      	ldr	r3, [pc, #396]	; (8000938 <HAL_GPIO_Init+0x324>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80007b6:	4a61      	ldr	r2, [pc, #388]	; (800093c <HAL_GPIO_Init+0x328>)
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	089b      	lsrs	r3, r3, #2
 80007bc:	3302      	adds	r3, #2
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	220f      	movs	r2, #15
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	4013      	ands	r3, r2
 80007d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a58      	ldr	r2, [pc, #352]	; (8000940 <HAL_GPIO_Init+0x32c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d037      	beq.n	8000852 <HAL_GPIO_Init+0x23e>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a57      	ldr	r2, [pc, #348]	; (8000944 <HAL_GPIO_Init+0x330>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d031      	beq.n	800084e <HAL_GPIO_Init+0x23a>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a56      	ldr	r2, [pc, #344]	; (8000948 <HAL_GPIO_Init+0x334>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d02b      	beq.n	800084a <HAL_GPIO_Init+0x236>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a55      	ldr	r2, [pc, #340]	; (800094c <HAL_GPIO_Init+0x338>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d025      	beq.n	8000846 <HAL_GPIO_Init+0x232>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a54      	ldr	r2, [pc, #336]	; (8000950 <HAL_GPIO_Init+0x33c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d01f      	beq.n	8000842 <HAL_GPIO_Init+0x22e>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a53      	ldr	r2, [pc, #332]	; (8000954 <HAL_GPIO_Init+0x340>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d019      	beq.n	800083e <HAL_GPIO_Init+0x22a>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a52      	ldr	r2, [pc, #328]	; (8000958 <HAL_GPIO_Init+0x344>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d013      	beq.n	800083a <HAL_GPIO_Init+0x226>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a51      	ldr	r2, [pc, #324]	; (800095c <HAL_GPIO_Init+0x348>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d00d      	beq.n	8000836 <HAL_GPIO_Init+0x222>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a50      	ldr	r2, [pc, #320]	; (8000960 <HAL_GPIO_Init+0x34c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d007      	beq.n	8000832 <HAL_GPIO_Init+0x21e>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a4f      	ldr	r2, [pc, #316]	; (8000964 <HAL_GPIO_Init+0x350>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_GPIO_Init+0x21a>
 800082a:	2309      	movs	r3, #9
 800082c:	e012      	b.n	8000854 <HAL_GPIO_Init+0x240>
 800082e:	230a      	movs	r3, #10
 8000830:	e010      	b.n	8000854 <HAL_GPIO_Init+0x240>
 8000832:	2308      	movs	r3, #8
 8000834:	e00e      	b.n	8000854 <HAL_GPIO_Init+0x240>
 8000836:	2307      	movs	r3, #7
 8000838:	e00c      	b.n	8000854 <HAL_GPIO_Init+0x240>
 800083a:	2306      	movs	r3, #6
 800083c:	e00a      	b.n	8000854 <HAL_GPIO_Init+0x240>
 800083e:	2305      	movs	r3, #5
 8000840:	e008      	b.n	8000854 <HAL_GPIO_Init+0x240>
 8000842:	2304      	movs	r3, #4
 8000844:	e006      	b.n	8000854 <HAL_GPIO_Init+0x240>
 8000846:	2303      	movs	r3, #3
 8000848:	e004      	b.n	8000854 <HAL_GPIO_Init+0x240>
 800084a:	2302      	movs	r3, #2
 800084c:	e002      	b.n	8000854 <HAL_GPIO_Init+0x240>
 800084e:	2301      	movs	r3, #1
 8000850:	e000      	b.n	8000854 <HAL_GPIO_Init+0x240>
 8000852:	2300      	movs	r3, #0
 8000854:	69fa      	ldr	r2, [r7, #28]
 8000856:	f002 0203 	and.w	r2, r2, #3
 800085a:	0092      	lsls	r2, r2, #2
 800085c:	4093      	lsls	r3, r2
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	4313      	orrs	r3, r2
 8000862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000864:	4935      	ldr	r1, [pc, #212]	; (800093c <HAL_GPIO_Init+0x328>)
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	089b      	lsrs	r3, r3, #2
 800086a:	3302      	adds	r3, #2
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <HAL_GPIO_Init+0x354>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	4313      	orrs	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000896:	4a34      	ldr	r2, [pc, #208]	; (8000968 <HAL_GPIO_Init+0x354>)
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800089c:	4b32      	ldr	r3, [pc, #200]	; (8000968 <HAL_GPIO_Init+0x354>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d003      	beq.n	80008c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80008c0:	4a29      	ldr	r2, [pc, #164]	; (8000968 <HAL_GPIO_Init+0x354>)
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <HAL_GPIO_Init+0x354>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	43db      	mvns	r3, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4013      	ands	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d003      	beq.n	80008ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80008ea:	4a1f      	ldr	r2, [pc, #124]	; (8000968 <HAL_GPIO_Init+0x354>)
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <HAL_GPIO_Init+0x354>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000908:	2b00      	cmp	r3, #0
 800090a:	d003      	beq.n	8000914 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	4313      	orrs	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_GPIO_Init+0x354>)
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3301      	adds	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	2b0f      	cmp	r3, #15
 8000924:	f67f ae84 	bls.w	8000630 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3724      	adds	r7, #36	; 0x24
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40013800 	.word	0x40013800
 8000940:	40020000 	.word	0x40020000
 8000944:	40020400 	.word	0x40020400
 8000948:	40020800 	.word	0x40020800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40021000 	.word	0x40021000
 8000954:	40021400 	.word	0x40021400
 8000958:	40021800 	.word	0x40021800
 800095c:	40021c00 	.word	0x40021c00
 8000960:	40022000 	.word	0x40022000
 8000964:	40022400 	.word	0x40022400
 8000968:	40013c00 	.word	0x40013c00

0800096c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	807b      	strh	r3, [r7, #2]
 8000978:	4613      	mov	r3, r2
 800097a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800097c:	787b      	ldrb	r3, [r7, #1]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d003      	beq.n	800098a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000982:	887a      	ldrh	r2, [r7, #2]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000988:	e003      	b.n	8000992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	041a      	lsls	r2, r3, #16
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	619a      	str	r2, [r3, #24]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
int main(void)
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80009b8:	f7ff fce6 	bl	8000388 <HAL_Init>
  void delayWrite(delay_t *delay, tick_t duration) {
      delay->duration = duration;
  }

  /* Initialize BSP Led for LEDS */
  BSP_LED_Init(LED1); // Verde.
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fc15 	bl	80001ec <BSP_LED_Init>
  BSP_LED_Init(LED2); // Azul.
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff fc12 	bl	80001ec <BSP_LED_Init>
  BSP_LED_Init(LED3); // Rojo.
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fc0f 	bl	80001ec <BSP_LED_Init>

  // Apagamos todos los leds previamente.
  BSP_LED_Off(LED1);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff fc5c 	bl	800028c <BSP_LED_Off>
  BSP_LED_Off(LED2);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff fc59 	bl	800028c <BSP_LED_Off>
  BSP_LED_Off(LED3);
 80009da:	2002      	movs	r0, #2
 80009dc:	f7ff fc56 	bl	800028c <BSP_LED_Off>

  /* Infinite loop */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <main+0x34>
	...

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009ea:	e003      	b.n	80009f4 <LoopCopyDataInit>

080009ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009f2:	3104      	adds	r1, #4

080009f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009fc:	d3f6      	bcc.n	80009ec <CopyDataInit>
  ldr  r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a00:	e002      	b.n	8000a08 <LoopFillZerobss>

08000a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a04:	f842 3b04 	str.w	r3, [r2], #4

08000a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a0c:	d3f9      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff fc57 	bl	80002c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f000 f811 	bl	8000a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff ffc9 	bl	80009ac <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a1c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000a20:	08000aa8 	.word	0x08000aa8
  ldr  r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a28:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000a2c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000a30:	20000038 	.word	0x20000038

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>
	...

08000a38 <__libc_init_array>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	4d0d      	ldr	r5, [pc, #52]	; (8000a70 <__libc_init_array+0x38>)
 8000a3c:	4c0d      	ldr	r4, [pc, #52]	; (8000a74 <__libc_init_array+0x3c>)
 8000a3e:	1b64      	subs	r4, r4, r5
 8000a40:	10a4      	asrs	r4, r4, #2
 8000a42:	2600      	movs	r6, #0
 8000a44:	42a6      	cmp	r6, r4
 8000a46:	d109      	bne.n	8000a5c <__libc_init_array+0x24>
 8000a48:	4d0b      	ldr	r5, [pc, #44]	; (8000a78 <__libc_init_array+0x40>)
 8000a4a:	4c0c      	ldr	r4, [pc, #48]	; (8000a7c <__libc_init_array+0x44>)
 8000a4c:	f000 f818 	bl	8000a80 <_init>
 8000a50:	1b64      	subs	r4, r4, r5
 8000a52:	10a4      	asrs	r4, r4, #2
 8000a54:	2600      	movs	r6, #0
 8000a56:	42a6      	cmp	r6, r4
 8000a58:	d105      	bne.n	8000a66 <__libc_init_array+0x2e>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a60:	4798      	blx	r3
 8000a62:	3601      	adds	r6, #1
 8000a64:	e7ee      	b.n	8000a44 <__libc_init_array+0xc>
 8000a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6a:	4798      	blx	r3
 8000a6c:	3601      	adds	r6, #1
 8000a6e:	e7f2      	b.n	8000a56 <__libc_init_array+0x1e>
 8000a70:	08000aa0 	.word	0x08000aa0
 8000a74:	08000aa0 	.word	0x08000aa0
 8000a78:	08000aa0 	.word	0x08000aa0
 8000a7c:	08000aa4 	.word	0x08000aa4

08000a80 <_init>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr

08000a8c <_fini>:
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	bf00      	nop
 8000a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a92:	bc08      	pop	{r3}
 8000a94:	469e      	mov	lr, r3
 8000a96:	4770      	bx	lr
