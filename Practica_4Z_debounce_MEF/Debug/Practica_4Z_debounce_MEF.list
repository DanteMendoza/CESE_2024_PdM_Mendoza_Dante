
Practica_4Z_debounce_MEF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002bc8  08002bc8  00003bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c94  08002c94  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c9c  08002c9c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c9c  08002c9c  00003c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca0  08002ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002ca4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00000184  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004388  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013e2  00000000  00000000  00008420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000598  00000000  00000000  00009808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003f8  00000000  00000000  00009da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252b9  00000000  00000000  0000a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000085cb  00000000  00000000  0002f451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1e2d  00000000  00000000  00037a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119849  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c78  00000000  00000000  0011988c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0011b504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002bb0 	.word	0x08002bb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002bb0 	.word	0x08002bb0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <debounce_fsm_init>:
/**
  * @brief  Initialize button debounce FSM.
  * @retval None
  */
void debounce_fsm_init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    button_fsm_state = BUTTON_UP;
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <debounce_fsm_init+0x1c>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
    falling_edge_event = false;
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <debounce_fsm_init+0x20>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
    delay_init(&debounce_delay, DEBOUNCE_TIME_MS);
 8000590:	2128      	movs	r1, #40	@ 0x28
 8000592:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <debounce_fsm_init+0x24>)
 8000594:	f000 f888 	bl	80006a8 <delay_init>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000084 	.word	0x20000084
 80005a0:	20000094 	.word	0x20000094
 80005a4:	20000088 	.word	0x20000088

080005a8 <debounce_fsm_update>:

void debounce_fsm_update(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
    bool_t button_state = read_button();
 80005ae:	f000 f8ed 	bl	800078c <read_button>
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]

    switch (button_fsm_state)
 80005b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000674 <debounce_fsm_update+0xcc>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d84e      	bhi.n	800065c <debounce_fsm_update+0xb4>
 80005be:	a201      	add	r2, pc, #4	@ (adr r2, 80005c4 <debounce_fsm_update+0x1c>)
 80005c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c4:	080005d5 	.word	0x080005d5
 80005c8:	080005eb 	.word	0x080005eb
 80005cc:	08000617 	.word	0x08000617
 80005d0:	08000633 	.word	0x08000633
    {
    case BUTTON_UP:
        if (button_state)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d043      	beq.n	8000662 <debounce_fsm_update+0xba>
        {
            button_fsm_state = BUTTON_FALLING;
 80005da:	4b26      	ldr	r3, [pc, #152]	@ (8000674 <debounce_fsm_update+0xcc>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
            delay_init(&debounce_delay, DEBOUNCE_TIME_MS);
 80005e0:	2128      	movs	r1, #40	@ 0x28
 80005e2:	4825      	ldr	r0, [pc, #148]	@ (8000678 <debounce_fsm_update+0xd0>)
 80005e4:	f000 f860 	bl	80006a8 <delay_init>
        }
        break;
 80005e8:	e03b      	b.n	8000662 <debounce_fsm_update+0xba>
    case BUTTON_FALLING:
        if (delay_read(&debounce_delay))
 80005ea:	4823      	ldr	r0, [pc, #140]	@ (8000678 <debounce_fsm_update+0xd0>)
 80005ec:	f000 f87a 	bl	80006e4 <delay_read>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d037      	beq.n	8000666 <debounce_fsm_update+0xbe>
        {
            if (button_state) /* Button pressed event */
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d008      	beq.n	800060e <debounce_fsm_update+0x66>
            {
                button_pressed();
 80005fc:	f001 fae8 	bl	8001bd0 <button_pressed>
                falling_edge_event = true;
 8000600:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <debounce_fsm_update+0xd4>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
                button_fsm_state = BUTTON_DOWN;
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <debounce_fsm_update+0xcc>)
 8000608:	2202      	movs	r2, #2
 800060a:	701a      	strb	r2, [r3, #0]
            } else {
                button_fsm_state = BUTTON_UP;
            } 
        }
        break;
 800060c:	e02b      	b.n	8000666 <debounce_fsm_update+0xbe>
                button_fsm_state = BUTTON_UP;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <debounce_fsm_update+0xcc>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
        break;
 8000614:	e027      	b.n	8000666 <debounce_fsm_update+0xbe>
    case BUTTON_DOWN:
        if (!button_state)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f083 0301 	eor.w	r3, r3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d023      	beq.n	800066a <debounce_fsm_update+0xc2>
        {
            button_fsm_state = BUTTON_RISING;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <debounce_fsm_update+0xcc>)
 8000624:	2203      	movs	r2, #3
 8000626:	701a      	strb	r2, [r3, #0]
            delay_init(&debounce_delay, DEBOUNCE_TIME_MS);
 8000628:	2128      	movs	r1, #40	@ 0x28
 800062a:	4813      	ldr	r0, [pc, #76]	@ (8000678 <debounce_fsm_update+0xd0>)
 800062c:	f000 f83c 	bl	80006a8 <delay_init>
        }
        break;
 8000630:	e01b      	b.n	800066a <debounce_fsm_update+0xc2>
    case BUTTON_RISING:
        if (delay_read(&debounce_delay))
 8000632:	4811      	ldr	r0, [pc, #68]	@ (8000678 <debounce_fsm_update+0xd0>)
 8000634:	f000 f856 	bl	80006e4 <delay_read>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d00e      	beq.n	800065c <debounce_fsm_update+0xb4>
        {
            if (!button_state) /* Button released event */
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f083 0301 	eor.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <debounce_fsm_update+0xae>
            {
                button_released();
 800064a:	f001 facd 	bl	8001be8 <button_released>
                button_fsm_state = BUTTON_UP;
 800064e:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <debounce_fsm_update+0xcc>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e002      	b.n	800065c <debounce_fsm_update+0xb4>
            } else {
                button_fsm_state = BUTTON_DOWN;
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <debounce_fsm_update+0xcc>)
 8000658:	2202      	movs	r2, #2
 800065a:	701a      	strb	r2, [r3, #0]
            }
        }
    default:
        /* The program shouldn't reach this point */
        debounce_error_handler();
 800065c:	f001 fad0 	bl	8001c00 <debounce_error_handler>
        break;
 8000660:	e004      	b.n	800066c <debounce_fsm_update+0xc4>
        break;
 8000662:	bf00      	nop
 8000664:	e002      	b.n	800066c <debounce_fsm_update+0xc4>
        break;
 8000666:	bf00      	nop
 8000668:	e000      	b.n	800066c <debounce_fsm_update+0xc4>
        break;
 800066a:	bf00      	nop
    }
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000084 	.word	0x20000084
 8000678:	20000088 	.word	0x20000088
 800067c:	20000094 	.word	0x20000094

08000680 <read_key>:
/**
 * @brief Read and clear button falling edge event.
 * @retval bool_t
*/
bool_t read_key(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
    if (falling_edge_event)
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <read_key+0x24>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <read_key+0x16>
    {
        falling_edge_event = false;
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <read_key+0x24>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
        return true;
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <read_key+0x18>
    }
    return false;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000094 	.word	0x20000094

080006a8 <delay_init>:
  * @param delay: pointer to delay data structure
  * @param duration: delay duration in miliseconds
  * @retval None
  */
void delay_init(delay_t* delay, tick_t duration)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  assert(delay);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d105      	bne.n	80006c4 <delay_init+0x1c>
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <delay_init+0x30>)
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <delay_init+0x34>)
 80006bc:	210e      	movs	r1, #14
 80006be:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <delay_init+0x38>)
 80006c0:	f001 fade 	bl	8001c80 <__assert_func>

  delay->duration = duration;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	605a      	str	r2, [r3, #4]
  delay->running = false;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	721a      	strb	r2, [r3, #8]
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	08002bc8 	.word	0x08002bc8
 80006dc:	08002bf0 	.word	0x08002bf0
 80006e0:	08002bd0 	.word	0x08002bd0

080006e4 <delay_read>:
  * @brief  Check if delay reached duration (start it if not running).
  * @param delay: pointer to delay data structure
  * @retval bool
  */
bool_t delay_read(delay_t* delay)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  assert(delay);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d105      	bne.n	80006fe <delay_read+0x1a>
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <delay_read+0x64>)
 80006f4:	4a15      	ldr	r2, [pc, #84]	@ (800074c <delay_read+0x68>)
 80006f6:	211b      	movs	r1, #27
 80006f8:	4815      	ldr	r0, [pc, #84]	@ (8000750 <delay_read+0x6c>)
 80006fa:	f001 fac1 	bl	8001c80 <__assert_func>

  if (!delay->running)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7a1b      	ldrb	r3, [r3, #8]
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d009      	beq.n	8000720 <delay_read+0x3c>
  {
    delay->start_time = get_systick();
 800070c:	f000 f850 	bl	80007b0 <get_systick>
 8000710:	4602      	mov	r2, r0
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
    delay->running = true;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2201      	movs	r2, #1
 800071a:	721a      	strb	r2, [r3, #8]
    return false;
 800071c:	2300      	movs	r3, #0
 800071e:	e00f      	b.n	8000740 <delay_read+0x5c>
  }

  if (delay->duration <= (get_systick() - delay->start_time))
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	685c      	ldr	r4, [r3, #4]
 8000724:	f000 f844 	bl	80007b0 <get_systick>
 8000728:	4602      	mov	r2, r0
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	429c      	cmp	r4, r3
 8000732:	d804      	bhi.n	800073e <delay_read+0x5a>
  {
    delay->running = false;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	721a      	strb	r2, [r3, #8]
    return true;
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <delay_read+0x5c>
  }

  return false;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	08002bc8 	.word	0x08002bc8
 800074c:	08002bfc 	.word	0x08002bfc
 8000750:	08002bd0 	.word	0x08002bd0

08000754 <delay_write>:
  * @param delay: pointer to delay data structure
  * @param duration: duration in miliseconds to set
  * @retval None
  */
void delay_write(delay_t* delay, tick_t duration)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  assert(delay);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d105      	bne.n	8000770 <delay_write+0x1c>
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <delay_write+0x2c>)
 8000766:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <delay_write+0x30>)
 8000768:	2135      	movs	r1, #53	@ 0x35
 800076a:	4807      	ldr	r0, [pc, #28]	@ (8000788 <delay_write+0x34>)
 800076c:	f001 fa88 	bl	8001c80 <__assert_func>

  delay->duration = duration;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08002bc8 	.word	0x08002bc8
 8000784:	08002c08 	.word	0x08002c08
 8000788:	08002bd0 	.word	0x08002bd0

0800078c <read_button>:
/**
  * @brief  Catch falling edge event on button.
  * @retval bool_t
  */
bool_t read_button(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    return (bool_t)HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 8000790:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <read_button+0x20>)
 8000796:	f000 fc63 	bl	8001060 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40020000 	.word	0x40020000

080007b0 <get_systick>:
/**
  * @brief  Get systick.
  * @retval tick_t
  */
tick_t get_systick(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    return (tick_t)HAL_GetTick();
 80007b4:	f000 f992 	bl	8000adc <HAL_GetTick>
 80007b8:	4603      	mov	r3, r0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <SystemInit+0x60>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <SystemInit+0x60>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <SystemInit+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <SystemInit+0x64>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <SystemInit+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <SystemInit+0x64>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000824 <SystemInit+0x64>)
 80007ec:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80007f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80007f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <SystemInit+0x64>)
 80007f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000828 <SystemInit+0x68>)
 80007fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <SystemInit+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a08      	ldr	r2, [pc, #32]	@ (8000824 <SystemInit+0x64>)
 8000802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000806:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <SystemInit+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800080e:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <SystemInit+0x60>)
 8000810:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000814:	609a      	str	r2, [r3, #8]
#endif
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00
 8000824:	40023800 	.word	0x40023800
 8000828:	24003010 	.word	0x24003010

0800082c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800083e:	bf00      	nop
 8000840:	e7fd      	b.n	800083e <HardFault_Handler+0x4>

08000842 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000846:	bf00      	nop
 8000848:	e7fd      	b.n	8000846 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800084e:	bf00      	nop
 8000850:	e7fd      	b.n	800084e <BusFault_Handler+0x4>

08000852 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000856:	bf00      	nop
 8000858:	e7fd      	b.n	8000856 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000888:	f000 f914 	bl	8000ab4 <HAL_IncTick>
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	return 1;
 8000894:	2301      	movs	r3, #1
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_kill>:

int _kill(int pid, int sig)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008aa:	f001 fb6d 	bl	8001f88 <__errno>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2216      	movs	r2, #22
 80008b2:	601a      	str	r2, [r3, #0]
	return -1;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_exit>:

void _exit (int status)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ffe7 	bl	80008a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008d2:	bf00      	nop
 80008d4:	e7fd      	b.n	80008d2 <_exit+0x12>

080008d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e00a      	b.n	80008fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008e8:	f3af 8000 	nop.w
 80008ec:	4601      	mov	r1, r0
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	b2ca      	uxtb	r2, r1
 80008f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3301      	adds	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	429a      	cmp	r2, r3
 8000904:	dbf0      	blt.n	80008e8 <_read+0x12>
	}

return len;
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e009      	b.n	8000936 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	60ba      	str	r2, [r7, #8]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	dbf1      	blt.n	8000922 <_write+0x12>
	}
	return len;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <_close>:

int _close(int file)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	return -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000970:	605a      	str	r2, [r3, #4]
	return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_isatty>:

int _isatty(int file)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	return 1;
 8000988:	2301      	movs	r3, #1
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000996:	b480      	push	{r7}
 8000998:	b085      	sub	sp, #20
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
	return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f001 fad2 	bl	8001f88 <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20030000 	.word	0x20030000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	20000098 	.word	0x20000098
 8000a18:	200001f0 	.word	0x200001f0

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_Init+0x34>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_Init+0x34>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_Init+0x34>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_Init+0x34>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f931 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f000 fb57 	bl	80010f6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f93b 	bl	8000cee <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f911 	bl	8000cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	2000009c 	.word	0x2000009c

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2000009c 	.word	0x2000009c

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff47 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff5c 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffb0 	bl	8000c5c <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	e177      	b.n	8001014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 8166 	bne.w	800100e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d005      	beq.n	8000d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d130      	bne.n	8000dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	f003 0201 	and.w	r2, r3, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d017      	beq.n	8000df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d123      	bne.n	8000e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	08da      	lsrs	r2, r3, #3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3208      	adds	r2, #8
 8000e46:	69b9      	ldr	r1, [r7, #24]
 8000e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0203 	and.w	r2, r3, #3
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 80c0 	beq.w	800100e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b66      	ldr	r3, [pc, #408]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	4a65      	ldr	r2, [pc, #404]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9e:	4b63      	ldr	r3, [pc, #396]	@ (800102c <HAL_GPIO_Init+0x324>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eaa:	4a61      	ldr	r2, [pc, #388]	@ (8001030 <HAL_GPIO_Init+0x328>)
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a58      	ldr	r2, [pc, #352]	@ (8001034 <HAL_GPIO_Init+0x32c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d037      	beq.n	8000f46 <HAL_GPIO_Init+0x23e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a57      	ldr	r2, [pc, #348]	@ (8001038 <HAL_GPIO_Init+0x330>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d031      	beq.n	8000f42 <HAL_GPIO_Init+0x23a>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a56      	ldr	r2, [pc, #344]	@ (800103c <HAL_GPIO_Init+0x334>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d02b      	beq.n	8000f3e <HAL_GPIO_Init+0x236>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a55      	ldr	r2, [pc, #340]	@ (8001040 <HAL_GPIO_Init+0x338>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d025      	beq.n	8000f3a <HAL_GPIO_Init+0x232>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a54      	ldr	r2, [pc, #336]	@ (8001044 <HAL_GPIO_Init+0x33c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d01f      	beq.n	8000f36 <HAL_GPIO_Init+0x22e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a53      	ldr	r2, [pc, #332]	@ (8001048 <HAL_GPIO_Init+0x340>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x22a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a52      	ldr	r2, [pc, #328]	@ (800104c <HAL_GPIO_Init+0x344>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x226>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a51      	ldr	r2, [pc, #324]	@ (8001050 <HAL_GPIO_Init+0x348>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x222>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a50      	ldr	r2, [pc, #320]	@ (8001054 <HAL_GPIO_Init+0x34c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x21e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4f      	ldr	r2, [pc, #316]	@ (8001058 <HAL_GPIO_Init+0x350>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x21a>
 8000f1e:	2309      	movs	r3, #9
 8000f20:	e012      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f22:	230a      	movs	r3, #10
 8000f24:	e010      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f26:	2308      	movs	r3, #8
 8000f28:	e00e      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e00c      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f2e:	2306      	movs	r3, #6
 8000f30:	e00a      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f32:	2305      	movs	r3, #5
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x240>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4935      	ldr	r1, [pc, #212]	@ (8001030 <HAL_GPIO_Init+0x328>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f66:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8a:	4a34      	ldr	r2, [pc, #208]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f90:	4b32      	ldr	r3, [pc, #200]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb4:	4a29      	ldr	r2, [pc, #164]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b28      	ldr	r3, [pc, #160]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a1f      	ldr	r2, [pc, #124]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <HAL_GPIO_Init+0x354>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a14      	ldr	r2, [pc, #80]	@ (800105c <HAL_GPIO_Init+0x354>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f ae84 	bls.w	8000d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40021400 	.word	0x40021400
 800104c:	40021800 	.word	0x40021800
 8001050:	40021c00 	.word	0x40021c00
 8001054:	40022000 	.word	0x40022000
 8001058:	40022400 	.word	0x40022400
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	041a      	lsls	r2, r3, #16
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43d9      	mvns	r1, r3
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	400b      	ands	r3, r1
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e267      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d075      	beq.n	800120e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	4b88      	ldr	r3, [pc, #544]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d00c      	beq.n	8001148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112e:	4b85      	ldr	r3, [pc, #532]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001136:	2b08      	cmp	r3, #8
 8001138:	d112      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4b82      	ldr	r3, [pc, #520]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001146:	d10b      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	4b7e      	ldr	r3, [pc, #504]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d05b      	beq.n	800120c <HAL_RCC_OscConfig+0x108>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d157      	bne.n	800120c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e242      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x74>
 800116a:	4b76      	ldr	r3, [pc, #472]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a75      	ldr	r2, [pc, #468]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e01d      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0x98>
 8001182:	4b70      	ldr	r3, [pc, #448]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6f      	ldr	r2, [pc, #444]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b6d      	ldr	r3, [pc, #436]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6c      	ldr	r2, [pc, #432]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 800119c:	4b69      	ldr	r3, [pc, #420]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a68      	ldr	r2, [pc, #416]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b66      	ldr	r3, [pc, #408]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a65      	ldr	r2, [pc, #404]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc8e 	bl	8000adc <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fc8a 	bl	8000adc <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	@ 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e207      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xc0>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc7a 	bl	8000adc <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fc76 	bl	8000adc <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	@ 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1f3      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	4b51      	ldr	r3, [pc, #324]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0xe8>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d063      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	4b4a      	ldr	r3, [pc, #296]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001226:	4b47      	ldr	r3, [pc, #284]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122e:	2b08      	cmp	r3, #8
 8001230:	d11c      	bne.n	800126c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b44      	ldr	r3, [pc, #272]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	4b41      	ldr	r3, [pc, #260]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_OscConfig+0x152>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e1c7      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	4b3b      	ldr	r3, [pc, #236]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4937      	ldr	r1, [pc, #220]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	e03a      	b.n	80012e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d020      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b34      	ldr	r3, [pc, #208]	@ (8001348 <HAL_RCC_OscConfig+0x244>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fc2f 	bl	8000adc <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fc2b 	bl	8000adc <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e1a8      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4925      	ldr	r1, [pc, #148]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_RCC_OscConfig+0x244>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc0e 	bl	8000adc <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc0a 	bl	8000adc <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e187      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d036      	beq.n	800135c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d016      	beq.n	8001324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_RCC_OscConfig+0x248>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fbee 	bl	8000adc <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fbea 	bl	8000adc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e167      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_RCC_OscConfig+0x240>)
 8001318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x200>
 8001322:	e01b      	b.n	800135c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_RCC_OscConfig+0x248>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fbd7 	bl	8000adc <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	e00e      	b.n	8001350 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fbd3 	bl	8000adc <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d907      	bls.n	8001350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e150      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
 8001344:	40023800 	.word	0x40023800
 8001348:	42470000 	.word	0x42470000
 800134c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b88      	ldr	r3, [pc, #544]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ea      	bne.n	8001332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8097 	beq.w	8001498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b81      	ldr	r3, [pc, #516]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b7d      	ldr	r3, [pc, #500]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	4a7c      	ldr	r2, [pc, #496]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	@ 0x40
 800138a:	4b7a      	ldr	r3, [pc, #488]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b77      	ldr	r3, [pc, #476]	@ (8001578 <HAL_RCC_OscConfig+0x474>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b74      	ldr	r3, [pc, #464]	@ (8001578 <HAL_RCC_OscConfig+0x474>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a73      	ldr	r2, [pc, #460]	@ (8001578 <HAL_RCC_OscConfig+0x474>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb93 	bl	8000adc <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fb8f 	bl	8000adc <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e10c      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001578 <HAL_RCC_OscConfig+0x474>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x2ea>
 80013e0:	4b64      	ldr	r3, [pc, #400]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e4:	4a63      	ldr	r2, [pc, #396]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x324>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x30c>
 80013f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6713      	str	r3, [r2, #112]	@ 0x70
 8001402:	4b5c      	ldr	r3, [pc, #368]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001406:	4a5b      	ldr	r2, [pc, #364]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	@ 0x70
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x324>
 8001410:	4b58      	ldr	r3, [pc, #352]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001414:	4a57      	ldr	r2, [pc, #348]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	@ 0x70
 800141c:	4b55      	ldr	r3, [pc, #340]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001420:	4a54      	ldr	r2, [pc, #336]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001422:	f023 0304 	bic.w	r3, r3, #4
 8001426:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d015      	beq.n	800145c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fb54 	bl	8000adc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	e00a      	b.n	800144e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff fb50 	bl	8000adc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0cb      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144e:	4b49      	ldr	r3, [pc, #292]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0ee      	beq.n	8001438 <HAL_RCC_OscConfig+0x334>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fb3e 	bl	8000adc <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fb3a 	bl	8000adc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e0b5      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147a:	4b3e      	ldr	r3, [pc, #248]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ee      	bne.n	8001464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a38      	ldr	r2, [pc, #224]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a1 	beq.w	80015e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a2:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d05c      	beq.n	8001568 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d141      	bne.n	800153a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HAL_RCC_OscConfig+0x478>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb0e 	bl	8000adc <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fb0a 	bl	8000adc <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e087      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	4b27      	ldr	r3, [pc, #156]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	3b01      	subs	r3, #1
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	491b      	ldr	r1, [pc, #108]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_RCC_OscConfig+0x478>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fae3 	bl	8000adc <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fadf 	bl	8000adc <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e05c      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x416>
 8001538:	e054      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_RCC_OscConfig+0x478>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff facc 	bl	8000adc <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fac8 	bl	8000adc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e045      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_RCC_OscConfig+0x470>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x444>
 8001566:	e03d      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e038      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000
 800157c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_RCC_OscConfig+0x4ec>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d028      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d121      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d11a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015b0:	4013      	ands	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d111      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	3b01      	subs	r3, #1
 80015ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0cc      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b68      	ldr	r3, [pc, #416]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d90c      	bls.n	8001630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b65      	ldr	r3, [pc, #404]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b63      	ldr	r3, [pc, #396]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0b8      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001648:	4b59      	ldr	r3, [pc, #356]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a58      	ldr	r2, [pc, #352]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001660:	4b53      	ldr	r3, [pc, #332]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a52      	ldr	r2, [pc, #328]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800166a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b50      	ldr	r3, [pc, #320]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	494d      	ldr	r1, [pc, #308]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d044      	beq.n	8001714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b47      	ldr	r3, [pc, #284]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d119      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e07f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	4b3f      	ldr	r3, [pc, #252]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e06f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e067      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d2:	4b37      	ldr	r3, [pc, #220]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 0203 	bic.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4934      	ldr	r1, [pc, #208]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e4:	f7ff f9fa 	bl	8000adc <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ec:	f7ff f9f6 	bl	8000adc <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e04f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 020c 	and.w	r2, r3, #12
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	429a      	cmp	r2, r3
 8001712:	d1eb      	bne.n	80016ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001714:	4b25      	ldr	r3, [pc, #148]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d20c      	bcs.n	800173c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e032      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001748:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4916      	ldr	r1, [pc, #88]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001766:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	490e      	ldr	r1, [pc, #56]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800177a:	f000 f821 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 800177e:	4602      	mov	r2, r0
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	490a      	ldr	r1, [pc, #40]	@ (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	5ccb      	ldrb	r3, [r1, r3]
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_RCC_ClockConfig+0x1c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f95a 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08002c14 	.word	0x08002c14
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c4:	b094      	sub	sp, #80	@ 0x50
 80017c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80017cc:	2300      	movs	r3, #0
 80017ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017d0:	2300      	movs	r3, #0
 80017d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d8:	4b79      	ldr	r3, [pc, #484]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d00d      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x40>
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	f200 80e1 	bhi.w	80019ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x34>
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x3a>
 80017f2:	e0db      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b73      	ldr	r3, [pc, #460]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80017f6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017f8:	e0db      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017fa:	4b73      	ldr	r3, [pc, #460]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80017fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017fe:	e0d8      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001800:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001808:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800180a:	4b6d      	ldr	r3, [pc, #436]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d063      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001816:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	2200      	movs	r2, #0
 800181e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001820:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
 800182a:	2300      	movs	r3, #0
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
 800182e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001832:	4622      	mov	r2, r4
 8001834:	462b      	mov	r3, r5
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	0159      	lsls	r1, r3, #5
 8001840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001844:	0150      	lsls	r0, r2, #5
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4621      	mov	r1, r4
 800184c:	1a51      	subs	r1, r2, r1
 800184e:	6139      	str	r1, [r7, #16]
 8001850:	4629      	mov	r1, r5
 8001852:	eb63 0301 	sbc.w	r3, r3, r1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001864:	4659      	mov	r1, fp
 8001866:	018b      	lsls	r3, r1, #6
 8001868:	4651      	mov	r1, sl
 800186a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186e:	4651      	mov	r1, sl
 8001870:	018a      	lsls	r2, r1, #6
 8001872:	4651      	mov	r1, sl
 8001874:	ebb2 0801 	subs.w	r8, r2, r1
 8001878:	4659      	mov	r1, fp
 800187a:	eb63 0901 	sbc.w	r9, r3, r1
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800188a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800188e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001892:	4690      	mov	r8, r2
 8001894:	4699      	mov	r9, r3
 8001896:	4623      	mov	r3, r4
 8001898:	eb18 0303 	adds.w	r3, r8, r3
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	462b      	mov	r3, r5
 80018a0:	eb49 0303 	adc.w	r3, r9, r3
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018b2:	4629      	mov	r1, r5
 80018b4:	024b      	lsls	r3, r1, #9
 80018b6:	4621      	mov	r1, r4
 80018b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018bc:	4621      	mov	r1, r4
 80018be:	024a      	lsls	r2, r1, #9
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018c6:	2200      	movs	r2, #0
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018d0:	f7fe fcde 	bl	8000290 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018dc:	e058      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b38      	ldr	r3, [pc, #224]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	2200      	movs	r2, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	4611      	mov	r1, r2
 80018ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018ee:	623b      	str	r3, [r7, #32]
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018f8:	4642      	mov	r2, r8
 80018fa:	464b      	mov	r3, r9
 80018fc:	f04f 0000 	mov.w	r0, #0
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	0159      	lsls	r1, r3, #5
 8001906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190a:	0150      	lsls	r0, r2, #5
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4641      	mov	r1, r8
 8001912:	ebb2 0a01 	subs.w	sl, r2, r1
 8001916:	4649      	mov	r1, r9
 8001918:	eb63 0b01 	sbc.w	fp, r3, r1
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001928:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800192c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001930:	ebb2 040a 	subs.w	r4, r2, sl
 8001934:	eb63 050b 	sbc.w	r5, r3, fp
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	00eb      	lsls	r3, r5, #3
 8001942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001946:	00e2      	lsls	r2, r4, #3
 8001948:	4614      	mov	r4, r2
 800194a:	461d      	mov	r5, r3
 800194c:	4643      	mov	r3, r8
 800194e:	18e3      	adds	r3, r4, r3
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	464b      	mov	r3, r9
 8001954:	eb45 0303 	adc.w	r3, r5, r3
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001966:	4629      	mov	r1, r5
 8001968:	028b      	lsls	r3, r1, #10
 800196a:	4621      	mov	r1, r4
 800196c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001970:	4621      	mov	r1, r4
 8001972:	028a      	lsls	r2, r1, #10
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800197a:	2200      	movs	r2, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	61fa      	str	r2, [r7, #28]
 8001980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001984:	f7fe fc84 	bl	8000290 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001990:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	3301      	adds	r3, #1
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80019a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019aa:	e002      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3750      	adds	r7, #80	@ 0x50
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	007a1200 	.word	0x007a1200

080019cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
  tick_t period_led2 = BLINK_STEP_PERIOD;
 80019d2:	2364      	movs	r3, #100	@ 0x64
 80019d4:	60fb      	str	r3, [r7, #12]
  delay_t delay_led2;

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d6:	f7ff f821 	bl	8000a1c <HAL_Init>

  delay_init(&delay_led2, period_led2);
 80019da:	463b      	mov	r3, r7
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fe62 	bl	80006a8 <delay_init>
  debounce_fsm_init();
 80019e4:	f7fe fdcc 	bl	8000580 <debounce_fsm_init>

  /* Configure the system clock */
  SystemClock_Config();
 80019e8:	f000 f82c 	bl	8001a44 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ec:	f000 f86a 	bl	8001ac4 <MX_GPIO_Init>

  /* Infinite loop */
  while (1)
  {
    debounce_fsm_update();
 80019f0:	f7fe fdda 	bl	80005a8 <debounce_fsm_update>
    if (delay_read(&delay_led2)) HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80019f4:	463b      	mov	r3, r7
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fe74 	bl	80006e4 <delay_read>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <main+0x40>
 8001a02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a06:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <main+0x70>)
 8001a08:	f7ff fb5b 	bl	80010c2 <HAL_GPIO_TogglePin>
    if (read_key())
 8001a0c:	f7fe fe38 	bl	8000680 <read_key>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0ec      	beq.n	80019f0 <main+0x24>
    {
      period_led2 = (period_led2 + BLINK_STEP_PERIOD) % BLINK_MAX_PERIOD;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3364      	adds	r3, #100	@ 0x64
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <main+0x74>)
 8001a1c:	fba2 1203 	umull	r1, r2, r2, r3
 8001a20:	0952      	lsrs	r2, r2, #5
 8001a22:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a26:	fb01 f202 	mul.w	r2, r1, r2
 8001a2a:	1a9b      	subs	r3, r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
      delay_write(&delay_led2, period_led2);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fe8e 	bl	8000754 <delay_write>
    debounce_fsm_update();
 8001a38:	e7da      	b.n	80019f0 <main+0x24>
 8001a3a:	bf00      	nop
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b092      	sub	sp, #72	@ 0x48
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 0318 	add.w	r3, r7, #24
 8001a4e:	2230      	movs	r2, #48	@ 0x30
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fa49 	bl	8001eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a6e:	61fb      	str	r3, [r7, #28]
  //RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a74:	2302      	movs	r3, #2
 8001a76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  //RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7e:	f107 0318 	add.w	r3, r7, #24
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fb3e 	bl	8001104 <HAL_RCC_OscConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001a8e:	f000 f8c7 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a92:	230f      	movs	r3, #15
 8001a94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a96:	2302      	movs	r3, #2
 8001a98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2102      	movs	r1, #2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fda1 	bl	80015f4 <HAL_RCC_ClockConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001ab8:	f000 f8b2 	bl	8001c20 <Error_Handler>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3748      	adds	r7, #72	@ 0x48
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a37      	ldr	r2, [pc, #220]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b35      	ldr	r3, [pc, #212]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a30      	ldr	r2, [pc, #192]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a29      	ldr	r2, [pc, #164]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <MX_GPIO_Init+0xfc>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b50:	481c      	ldr	r0, [pc, #112]	@ (8001bc4 <MX_GPIO_Init+0x100>)
 8001b52:	f7ff fa9d 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001b5c:	481a      	ldr	r0, [pc, #104]	@ (8001bc8 <MX_GPIO_Init+0x104>)
 8001b5e:	f7ff fa97 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4812      	ldr	r0, [pc, #72]	@ (8001bc4 <MX_GPIO_Init+0x100>)
 8001b7c:	f7ff f8c4 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001b80:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	480b      	ldr	r0, [pc, #44]	@ (8001bc8 <MX_GPIO_Init+0x104>)
 8001b9a:	f7ff f8b5 	bl	8000d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001b9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <MX_GPIO_Init+0x108>)
 8001bb4:	f7ff f8a8 	bl	8000d08 <HAL_GPIO_Init>

}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	@ 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <button_pressed>:
/**
  * @brief  Button pressed callback.
  * @retval None
  */
void button_pressed(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001bd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <button_pressed+0x14>)
 8001bda:	f7ff fa72 	bl	80010c2 <HAL_GPIO_TogglePin>
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40020400 	.word	0x40020400

08001be8 <button_released>:
/**
  * @brief  Button released callback.
  * @retval None
  */
void button_released(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001bec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <button_released+0x14>)
 8001bf2:	f7ff fa66 	bl	80010c2 <HAL_GPIO_TogglePin>
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40020400 	.word	0x40020400

08001c00 <debounce_error_handler>:
/**
  * @brief  Debounce module error handling callback.
  * @retval None
  */
void debounce_error_handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  while (1)
  {
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001c04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c08:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <debounce_error_handler+0x1c>)
 8001c0a:	f7ff fa5a 	bl	80010c2 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8001c0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c12:	f7fe ff6f 	bl	8000af4 <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001c16:	bf00      	nop
 8001c18:	e7f4      	b.n	8001c04 <debounce_error_handler+0x4>
 8001c1a:	bf00      	nop
 8001c1c:	40020800 	.word	0x40020800

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <Error_Handler+0x8>

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c64 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c32:	e003      	b.n	8001c3c <LoopCopyDataInit>

08001c34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c3a:	3104      	adds	r1, #4

08001c3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c3c:	480b      	ldr	r0, [pc, #44]	@ (8001c6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c44:	d3f6      	bcc.n	8001c34 <CopyDataInit>
  ldr  r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	@ (8001c74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c48:	e002      	b.n	8001c50 <LoopFillZerobss>

08001c4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c4c:	f842 3b04 	str.w	r3, [r2], #4

08001c50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c54:	d3f9      	bcc.n	8001c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c56:	f7fe fdb3 	bl	80007c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f000 f99b 	bl	8001f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7ff feb5 	bl	80019cc <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c64:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c68:	08002ca4 	.word	0x08002ca4
  ldr  r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c70:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001c74:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001c78:	200001ec 	.word	0x200001ec

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <__assert_func>:
 8001c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c82:	4614      	mov	r4, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <__assert_func+0x2c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4605      	mov	r5, r0
 8001c8c:	68d8      	ldr	r0, [r3, #12]
 8001c8e:	b954      	cbnz	r4, 8001ca6 <__assert_func+0x26>
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <__assert_func+0x30>)
 8001c92:	461c      	mov	r4, r3
 8001c94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001c98:	9100      	str	r1, [sp, #0]
 8001c9a:	462b      	mov	r3, r5
 8001c9c:	4905      	ldr	r1, [pc, #20]	@ (8001cb4 <__assert_func+0x34>)
 8001c9e:	f000 f8b1 	bl	8001e04 <fiprintf>
 8001ca2:	f000 f99e 	bl	8001fe2 <abort>
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <__assert_func+0x38>)
 8001ca8:	e7f4      	b.n	8001c94 <__assert_func+0x14>
 8001caa:	bf00      	nop
 8001cac:	20000018 	.word	0x20000018
 8001cb0:	08002c5f 	.word	0x08002c5f
 8001cb4:	08002c31 	.word	0x08002c31
 8001cb8:	08002c24 	.word	0x08002c24

08001cbc <std>:
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	b510      	push	{r4, lr}
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8001cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cca:	6083      	str	r3, [r0, #8]
 8001ccc:	8181      	strh	r1, [r0, #12]
 8001cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8001cd0:	81c2      	strh	r2, [r0, #14]
 8001cd2:	6183      	str	r3, [r0, #24]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	305c      	adds	r0, #92	@ 0x5c
 8001cda:	f000 f906 	bl	8001eea <memset>
 8001cde:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <std+0x58>)
 8001ce0:	6263      	str	r3, [r4, #36]	@ 0x24
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <std+0x5c>)
 8001ce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <std+0x60>)
 8001ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <std+0x64>)
 8001cec:	6323      	str	r3, [r4, #48]	@ 0x30
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <std+0x68>)
 8001cf0:	6224      	str	r4, [r4, #32]
 8001cf2:	429c      	cmp	r4, r3
 8001cf4:	d006      	beq.n	8001d04 <std+0x48>
 8001cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001cfa:	4294      	cmp	r4, r2
 8001cfc:	d002      	beq.n	8001d04 <std+0x48>
 8001cfe:	33d0      	adds	r3, #208	@ 0xd0
 8001d00:	429c      	cmp	r4, r3
 8001d02:	d105      	bne.n	8001d10 <std+0x54>
 8001d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d0c:	f000 b966 	b.w	8001fdc <__retarget_lock_init_recursive>
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	bf00      	nop
 8001d14:	08001e65 	.word	0x08001e65
 8001d18:	08001e87 	.word	0x08001e87
 8001d1c:	08001ebf 	.word	0x08001ebf
 8001d20:	08001ee3 	.word	0x08001ee3
 8001d24:	200000a0 	.word	0x200000a0

08001d28 <stdio_exit_handler>:
 8001d28:	4a02      	ldr	r2, [pc, #8]	@ (8001d34 <stdio_exit_handler+0xc>)
 8001d2a:	4903      	ldr	r1, [pc, #12]	@ (8001d38 <stdio_exit_handler+0x10>)
 8001d2c:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <stdio_exit_handler+0x14>)
 8001d2e:	f000 b87b 	b.w	8001e28 <_fwalk_sglue>
 8001d32:	bf00      	nop
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	08002889 	.word	0x08002889
 8001d3c:	2000001c 	.word	0x2000001c

08001d40 <cleanup_stdio>:
 8001d40:	6841      	ldr	r1, [r0, #4]
 8001d42:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <cleanup_stdio+0x34>)
 8001d44:	4299      	cmp	r1, r3
 8001d46:	b510      	push	{r4, lr}
 8001d48:	4604      	mov	r4, r0
 8001d4a:	d001      	beq.n	8001d50 <cleanup_stdio+0x10>
 8001d4c:	f000 fd9c 	bl	8002888 <_fflush_r>
 8001d50:	68a1      	ldr	r1, [r4, #8]
 8001d52:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <cleanup_stdio+0x38>)
 8001d54:	4299      	cmp	r1, r3
 8001d56:	d002      	beq.n	8001d5e <cleanup_stdio+0x1e>
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f000 fd95 	bl	8002888 <_fflush_r>
 8001d5e:	68e1      	ldr	r1, [r4, #12]
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <cleanup_stdio+0x3c>)
 8001d62:	4299      	cmp	r1, r3
 8001d64:	d004      	beq.n	8001d70 <cleanup_stdio+0x30>
 8001d66:	4620      	mov	r0, r4
 8001d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d6c:	f000 bd8c 	b.w	8002888 <_fflush_r>
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	bf00      	nop
 8001d74:	200000a0 	.word	0x200000a0
 8001d78:	20000108 	.word	0x20000108
 8001d7c:	20000170 	.word	0x20000170

08001d80 <global_stdio_init.part.0>:
 8001d80:	b510      	push	{r4, lr}
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <global_stdio_init.part.0+0x30>)
 8001d84:	4c0b      	ldr	r4, [pc, #44]	@ (8001db4 <global_stdio_init.part.0+0x34>)
 8001d86:	4a0c      	ldr	r2, [pc, #48]	@ (8001db8 <global_stdio_init.part.0+0x38>)
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2104      	movs	r1, #4
 8001d90:	f7ff ff94 	bl	8001cbc <std>
 8001d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2109      	movs	r1, #9
 8001d9c:	f7ff ff8e 	bl	8001cbc <std>
 8001da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001da4:	2202      	movs	r2, #2
 8001da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001daa:	2112      	movs	r1, #18
 8001dac:	f7ff bf86 	b.w	8001cbc <std>
 8001db0:	200001d8 	.word	0x200001d8
 8001db4:	200000a0 	.word	0x200000a0
 8001db8:	08001d29 	.word	0x08001d29

08001dbc <__sfp_lock_acquire>:
 8001dbc:	4801      	ldr	r0, [pc, #4]	@ (8001dc4 <__sfp_lock_acquire+0x8>)
 8001dbe:	f000 b90e 	b.w	8001fde <__retarget_lock_acquire_recursive>
 8001dc2:	bf00      	nop
 8001dc4:	200001e1 	.word	0x200001e1

08001dc8 <__sfp_lock_release>:
 8001dc8:	4801      	ldr	r0, [pc, #4]	@ (8001dd0 <__sfp_lock_release+0x8>)
 8001dca:	f000 b909 	b.w	8001fe0 <__retarget_lock_release_recursive>
 8001dce:	bf00      	nop
 8001dd0:	200001e1 	.word	0x200001e1

08001dd4 <__sinit>:
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	f7ff fff0 	bl	8001dbc <__sfp_lock_acquire>
 8001ddc:	6a23      	ldr	r3, [r4, #32]
 8001dde:	b11b      	cbz	r3, 8001de8 <__sinit+0x14>
 8001de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001de4:	f7ff bff0 	b.w	8001dc8 <__sfp_lock_release>
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <__sinit+0x28>)
 8001dea:	6223      	str	r3, [r4, #32]
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__sinit+0x2c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f5      	bne.n	8001de0 <__sinit+0xc>
 8001df4:	f7ff ffc4 	bl	8001d80 <global_stdio_init.part.0>
 8001df8:	e7f2      	b.n	8001de0 <__sinit+0xc>
 8001dfa:	bf00      	nop
 8001dfc:	08001d41 	.word	0x08001d41
 8001e00:	200001d8 	.word	0x200001d8

08001e04 <fiprintf>:
 8001e04:	b40e      	push	{r1, r2, r3}
 8001e06:	b503      	push	{r0, r1, lr}
 8001e08:	4601      	mov	r1, r0
 8001e0a:	ab03      	add	r3, sp, #12
 8001e0c:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <fiprintf+0x20>)
 8001e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e12:	6800      	ldr	r0, [r0, #0]
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	f000 fa0d 	bl	8002234 <_vfiprintf_r>
 8001e1a:	b002      	add	sp, #8
 8001e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e20:	b003      	add	sp, #12
 8001e22:	4770      	bx	lr
 8001e24:	20000018 	.word	0x20000018

08001e28 <_fwalk_sglue>:
 8001e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e2c:	4607      	mov	r7, r0
 8001e2e:	4688      	mov	r8, r1
 8001e30:	4614      	mov	r4, r2
 8001e32:	2600      	movs	r6, #0
 8001e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e38:	f1b9 0901 	subs.w	r9, r9, #1
 8001e3c:	d505      	bpl.n	8001e4a <_fwalk_sglue+0x22>
 8001e3e:	6824      	ldr	r4, [r4, #0]
 8001e40:	2c00      	cmp	r4, #0
 8001e42:	d1f7      	bne.n	8001e34 <_fwalk_sglue+0xc>
 8001e44:	4630      	mov	r0, r6
 8001e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e4a:	89ab      	ldrh	r3, [r5, #12]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d907      	bls.n	8001e60 <_fwalk_sglue+0x38>
 8001e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e54:	3301      	adds	r3, #1
 8001e56:	d003      	beq.n	8001e60 <_fwalk_sglue+0x38>
 8001e58:	4629      	mov	r1, r5
 8001e5a:	4638      	mov	r0, r7
 8001e5c:	47c0      	blx	r8
 8001e5e:	4306      	orrs	r6, r0
 8001e60:	3568      	adds	r5, #104	@ 0x68
 8001e62:	e7e9      	b.n	8001e38 <_fwalk_sglue+0x10>

08001e64 <__sread>:
 8001e64:	b510      	push	{r4, lr}
 8001e66:	460c      	mov	r4, r1
 8001e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6c:	f000 f868 	bl	8001f40 <_read_r>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	bfab      	itete	ge
 8001e74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001e76:	89a3      	ldrhlt	r3, [r4, #12]
 8001e78:	181b      	addge	r3, r3, r0
 8001e7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001e7e:	bfac      	ite	ge
 8001e80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001e82:	81a3      	strhlt	r3, [r4, #12]
 8001e84:	bd10      	pop	{r4, pc}

08001e86 <__swrite>:
 8001e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8a:	461f      	mov	r7, r3
 8001e8c:	898b      	ldrh	r3, [r1, #12]
 8001e8e:	05db      	lsls	r3, r3, #23
 8001e90:	4605      	mov	r5, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	4616      	mov	r6, r2
 8001e96:	d505      	bpl.n	8001ea4 <__swrite+0x1e>
 8001e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f000 f83c 	bl	8001f1c <_lseek_r>
 8001ea4:	89a3      	ldrh	r3, [r4, #12]
 8001ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001eae:	81a3      	strh	r3, [r4, #12]
 8001eb0:	4632      	mov	r2, r6
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001eba:	f000 b853 	b.w	8001f64 <_write_r>

08001ebe <__sseek>:
 8001ebe:	b510      	push	{r4, lr}
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec6:	f000 f829 	bl	8001f1c <_lseek_r>
 8001eca:	1c43      	adds	r3, r0, #1
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	bf15      	itete	ne
 8001ed0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001ed2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001ed6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001eda:	81a3      	strheq	r3, [r4, #12]
 8001edc:	bf18      	it	ne
 8001ede:	81a3      	strhne	r3, [r4, #12]
 8001ee0:	bd10      	pop	{r4, pc}

08001ee2 <__sclose>:
 8001ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee6:	f000 b809 	b.w	8001efc <_close_r>

08001eea <memset>:
 8001eea:	4402      	add	r2, r0
 8001eec:	4603      	mov	r3, r0
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d100      	bne.n	8001ef4 <memset+0xa>
 8001ef2:	4770      	bx	lr
 8001ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8001ef8:	e7f9      	b.n	8001eee <memset+0x4>
	...

08001efc <_close_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	4d06      	ldr	r5, [pc, #24]	@ (8001f18 <_close_r+0x1c>)
 8001f00:	2300      	movs	r3, #0
 8001f02:	4604      	mov	r4, r0
 8001f04:	4608      	mov	r0, r1
 8001f06:	602b      	str	r3, [r5, #0]
 8001f08:	f7fe fd1e 	bl	8000948 <_close>
 8001f0c:	1c43      	adds	r3, r0, #1
 8001f0e:	d102      	bne.n	8001f16 <_close_r+0x1a>
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	b103      	cbz	r3, 8001f16 <_close_r+0x1a>
 8001f14:	6023      	str	r3, [r4, #0]
 8001f16:	bd38      	pop	{r3, r4, r5, pc}
 8001f18:	200001dc 	.word	0x200001dc

08001f1c <_lseek_r>:
 8001f1c:	b538      	push	{r3, r4, r5, lr}
 8001f1e:	4d07      	ldr	r5, [pc, #28]	@ (8001f3c <_lseek_r+0x20>)
 8001f20:	4604      	mov	r4, r0
 8001f22:	4608      	mov	r0, r1
 8001f24:	4611      	mov	r1, r2
 8001f26:	2200      	movs	r2, #0
 8001f28:	602a      	str	r2, [r5, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f7fe fd33 	bl	8000996 <_lseek>
 8001f30:	1c43      	adds	r3, r0, #1
 8001f32:	d102      	bne.n	8001f3a <_lseek_r+0x1e>
 8001f34:	682b      	ldr	r3, [r5, #0]
 8001f36:	b103      	cbz	r3, 8001f3a <_lseek_r+0x1e>
 8001f38:	6023      	str	r3, [r4, #0]
 8001f3a:	bd38      	pop	{r3, r4, r5, pc}
 8001f3c:	200001dc 	.word	0x200001dc

08001f40 <_read_r>:
 8001f40:	b538      	push	{r3, r4, r5, lr}
 8001f42:	4d07      	ldr	r5, [pc, #28]	@ (8001f60 <_read_r+0x20>)
 8001f44:	4604      	mov	r4, r0
 8001f46:	4608      	mov	r0, r1
 8001f48:	4611      	mov	r1, r2
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	602a      	str	r2, [r5, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7fe fcc1 	bl	80008d6 <_read>
 8001f54:	1c43      	adds	r3, r0, #1
 8001f56:	d102      	bne.n	8001f5e <_read_r+0x1e>
 8001f58:	682b      	ldr	r3, [r5, #0]
 8001f5a:	b103      	cbz	r3, 8001f5e <_read_r+0x1e>
 8001f5c:	6023      	str	r3, [r4, #0]
 8001f5e:	bd38      	pop	{r3, r4, r5, pc}
 8001f60:	200001dc 	.word	0x200001dc

08001f64 <_write_r>:
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4d07      	ldr	r5, [pc, #28]	@ (8001f84 <_write_r+0x20>)
 8001f68:	4604      	mov	r4, r0
 8001f6a:	4608      	mov	r0, r1
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	2200      	movs	r2, #0
 8001f70:	602a      	str	r2, [r5, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f7fe fccc 	bl	8000910 <_write>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d102      	bne.n	8001f82 <_write_r+0x1e>
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	b103      	cbz	r3, 8001f82 <_write_r+0x1e>
 8001f80:	6023      	str	r3, [r4, #0]
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	200001dc 	.word	0x200001dc

08001f88 <__errno>:
 8001f88:	4b01      	ldr	r3, [pc, #4]	@ (8001f90 <__errno+0x8>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000018 	.word	0x20000018

08001f94 <__libc_init_array>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	4d0d      	ldr	r5, [pc, #52]	@ (8001fcc <__libc_init_array+0x38>)
 8001f98:	4c0d      	ldr	r4, [pc, #52]	@ (8001fd0 <__libc_init_array+0x3c>)
 8001f9a:	1b64      	subs	r4, r4, r5
 8001f9c:	10a4      	asrs	r4, r4, #2
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	42a6      	cmp	r6, r4
 8001fa2:	d109      	bne.n	8001fb8 <__libc_init_array+0x24>
 8001fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8001fd4 <__libc_init_array+0x40>)
 8001fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8001fd8 <__libc_init_array+0x44>)
 8001fa8:	f000 fe02 	bl	8002bb0 <_init>
 8001fac:	1b64      	subs	r4, r4, r5
 8001fae:	10a4      	asrs	r4, r4, #2
 8001fb0:	2600      	movs	r6, #0
 8001fb2:	42a6      	cmp	r6, r4
 8001fb4:	d105      	bne.n	8001fc2 <__libc_init_array+0x2e>
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
 8001fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fbc:	4798      	blx	r3
 8001fbe:	3601      	adds	r6, #1
 8001fc0:	e7ee      	b.n	8001fa0 <__libc_init_array+0xc>
 8001fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc6:	4798      	blx	r3
 8001fc8:	3601      	adds	r6, #1
 8001fca:	e7f2      	b.n	8001fb2 <__libc_init_array+0x1e>
 8001fcc:	08002c9c 	.word	0x08002c9c
 8001fd0:	08002c9c 	.word	0x08002c9c
 8001fd4:	08002c9c 	.word	0x08002c9c
 8001fd8:	08002ca0 	.word	0x08002ca0

08001fdc <__retarget_lock_init_recursive>:
 8001fdc:	4770      	bx	lr

08001fde <__retarget_lock_acquire_recursive>:
 8001fde:	4770      	bx	lr

08001fe0 <__retarget_lock_release_recursive>:
 8001fe0:	4770      	bx	lr

08001fe2 <abort>:
 8001fe2:	b508      	push	{r3, lr}
 8001fe4:	2006      	movs	r0, #6
 8001fe6:	f000 fd33 	bl	8002a50 <raise>
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7fe fc68 	bl	80008c0 <_exit>

08001ff0 <_free_r>:
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	4605      	mov	r5, r0
 8001ff4:	2900      	cmp	r1, #0
 8001ff6:	d041      	beq.n	800207c <_free_r+0x8c>
 8001ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ffc:	1f0c      	subs	r4, r1, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bfb8      	it	lt
 8002002:	18e4      	addlt	r4, r4, r3
 8002004:	f000 f8e0 	bl	80021c8 <__malloc_lock>
 8002008:	4a1d      	ldr	r2, [pc, #116]	@ (8002080 <_free_r+0x90>)
 800200a:	6813      	ldr	r3, [r2, #0]
 800200c:	b933      	cbnz	r3, 800201c <_free_r+0x2c>
 800200e:	6063      	str	r3, [r4, #4]
 8002010:	6014      	str	r4, [r2, #0]
 8002012:	4628      	mov	r0, r5
 8002014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002018:	f000 b8dc 	b.w	80021d4 <__malloc_unlock>
 800201c:	42a3      	cmp	r3, r4
 800201e:	d908      	bls.n	8002032 <_free_r+0x42>
 8002020:	6820      	ldr	r0, [r4, #0]
 8002022:	1821      	adds	r1, r4, r0
 8002024:	428b      	cmp	r3, r1
 8002026:	bf01      	itttt	eq
 8002028:	6819      	ldreq	r1, [r3, #0]
 800202a:	685b      	ldreq	r3, [r3, #4]
 800202c:	1809      	addeq	r1, r1, r0
 800202e:	6021      	streq	r1, [r4, #0]
 8002030:	e7ed      	b.n	800200e <_free_r+0x1e>
 8002032:	461a      	mov	r2, r3
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	b10b      	cbz	r3, 800203c <_free_r+0x4c>
 8002038:	42a3      	cmp	r3, r4
 800203a:	d9fa      	bls.n	8002032 <_free_r+0x42>
 800203c:	6811      	ldr	r1, [r2, #0]
 800203e:	1850      	adds	r0, r2, r1
 8002040:	42a0      	cmp	r0, r4
 8002042:	d10b      	bne.n	800205c <_free_r+0x6c>
 8002044:	6820      	ldr	r0, [r4, #0]
 8002046:	4401      	add	r1, r0
 8002048:	1850      	adds	r0, r2, r1
 800204a:	4283      	cmp	r3, r0
 800204c:	6011      	str	r1, [r2, #0]
 800204e:	d1e0      	bne.n	8002012 <_free_r+0x22>
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	6053      	str	r3, [r2, #4]
 8002056:	4408      	add	r0, r1
 8002058:	6010      	str	r0, [r2, #0]
 800205a:	e7da      	b.n	8002012 <_free_r+0x22>
 800205c:	d902      	bls.n	8002064 <_free_r+0x74>
 800205e:	230c      	movs	r3, #12
 8002060:	602b      	str	r3, [r5, #0]
 8002062:	e7d6      	b.n	8002012 <_free_r+0x22>
 8002064:	6820      	ldr	r0, [r4, #0]
 8002066:	1821      	adds	r1, r4, r0
 8002068:	428b      	cmp	r3, r1
 800206a:	bf04      	itt	eq
 800206c:	6819      	ldreq	r1, [r3, #0]
 800206e:	685b      	ldreq	r3, [r3, #4]
 8002070:	6063      	str	r3, [r4, #4]
 8002072:	bf04      	itt	eq
 8002074:	1809      	addeq	r1, r1, r0
 8002076:	6021      	streq	r1, [r4, #0]
 8002078:	6054      	str	r4, [r2, #4]
 800207a:	e7ca      	b.n	8002012 <_free_r+0x22>
 800207c:	bd38      	pop	{r3, r4, r5, pc}
 800207e:	bf00      	nop
 8002080:	200001e8 	.word	0x200001e8

08002084 <sbrk_aligned>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	4e0f      	ldr	r6, [pc, #60]	@ (80020c4 <sbrk_aligned+0x40>)
 8002088:	460c      	mov	r4, r1
 800208a:	6831      	ldr	r1, [r6, #0]
 800208c:	4605      	mov	r5, r0
 800208e:	b911      	cbnz	r1, 8002096 <sbrk_aligned+0x12>
 8002090:	f000 fcfa 	bl	8002a88 <_sbrk_r>
 8002094:	6030      	str	r0, [r6, #0]
 8002096:	4621      	mov	r1, r4
 8002098:	4628      	mov	r0, r5
 800209a:	f000 fcf5 	bl	8002a88 <_sbrk_r>
 800209e:	1c43      	adds	r3, r0, #1
 80020a0:	d103      	bne.n	80020aa <sbrk_aligned+0x26>
 80020a2:	f04f 34ff 	mov.w	r4, #4294967295
 80020a6:	4620      	mov	r0, r4
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
 80020aa:	1cc4      	adds	r4, r0, #3
 80020ac:	f024 0403 	bic.w	r4, r4, #3
 80020b0:	42a0      	cmp	r0, r4
 80020b2:	d0f8      	beq.n	80020a6 <sbrk_aligned+0x22>
 80020b4:	1a21      	subs	r1, r4, r0
 80020b6:	4628      	mov	r0, r5
 80020b8:	f000 fce6 	bl	8002a88 <_sbrk_r>
 80020bc:	3001      	adds	r0, #1
 80020be:	d1f2      	bne.n	80020a6 <sbrk_aligned+0x22>
 80020c0:	e7ef      	b.n	80020a2 <sbrk_aligned+0x1e>
 80020c2:	bf00      	nop
 80020c4:	200001e4 	.word	0x200001e4

080020c8 <_malloc_r>:
 80020c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020cc:	1ccd      	adds	r5, r1, #3
 80020ce:	f025 0503 	bic.w	r5, r5, #3
 80020d2:	3508      	adds	r5, #8
 80020d4:	2d0c      	cmp	r5, #12
 80020d6:	bf38      	it	cc
 80020d8:	250c      	movcc	r5, #12
 80020da:	2d00      	cmp	r5, #0
 80020dc:	4606      	mov	r6, r0
 80020de:	db01      	blt.n	80020e4 <_malloc_r+0x1c>
 80020e0:	42a9      	cmp	r1, r5
 80020e2:	d904      	bls.n	80020ee <_malloc_r+0x26>
 80020e4:	230c      	movs	r3, #12
 80020e6:	6033      	str	r3, [r6, #0]
 80020e8:	2000      	movs	r0, #0
 80020ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80021c4 <_malloc_r+0xfc>
 80020f2:	f000 f869 	bl	80021c8 <__malloc_lock>
 80020f6:	f8d8 3000 	ldr.w	r3, [r8]
 80020fa:	461c      	mov	r4, r3
 80020fc:	bb44      	cbnz	r4, 8002150 <_malloc_r+0x88>
 80020fe:	4629      	mov	r1, r5
 8002100:	4630      	mov	r0, r6
 8002102:	f7ff ffbf 	bl	8002084 <sbrk_aligned>
 8002106:	1c43      	adds	r3, r0, #1
 8002108:	4604      	mov	r4, r0
 800210a:	d158      	bne.n	80021be <_malloc_r+0xf6>
 800210c:	f8d8 4000 	ldr.w	r4, [r8]
 8002110:	4627      	mov	r7, r4
 8002112:	2f00      	cmp	r7, #0
 8002114:	d143      	bne.n	800219e <_malloc_r+0xd6>
 8002116:	2c00      	cmp	r4, #0
 8002118:	d04b      	beq.n	80021b2 <_malloc_r+0xea>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	4639      	mov	r1, r7
 800211e:	4630      	mov	r0, r6
 8002120:	eb04 0903 	add.w	r9, r4, r3
 8002124:	f000 fcb0 	bl	8002a88 <_sbrk_r>
 8002128:	4581      	cmp	r9, r0
 800212a:	d142      	bne.n	80021b2 <_malloc_r+0xea>
 800212c:	6821      	ldr	r1, [r4, #0]
 800212e:	1a6d      	subs	r5, r5, r1
 8002130:	4629      	mov	r1, r5
 8002132:	4630      	mov	r0, r6
 8002134:	f7ff ffa6 	bl	8002084 <sbrk_aligned>
 8002138:	3001      	adds	r0, #1
 800213a:	d03a      	beq.n	80021b2 <_malloc_r+0xea>
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	442b      	add	r3, r5
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	f8d8 3000 	ldr.w	r3, [r8]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	bb62      	cbnz	r2, 80021a4 <_malloc_r+0xdc>
 800214a:	f8c8 7000 	str.w	r7, [r8]
 800214e:	e00f      	b.n	8002170 <_malloc_r+0xa8>
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	1b52      	subs	r2, r2, r5
 8002154:	d420      	bmi.n	8002198 <_malloc_r+0xd0>
 8002156:	2a0b      	cmp	r2, #11
 8002158:	d917      	bls.n	800218a <_malloc_r+0xc2>
 800215a:	1961      	adds	r1, r4, r5
 800215c:	42a3      	cmp	r3, r4
 800215e:	6025      	str	r5, [r4, #0]
 8002160:	bf18      	it	ne
 8002162:	6059      	strne	r1, [r3, #4]
 8002164:	6863      	ldr	r3, [r4, #4]
 8002166:	bf08      	it	eq
 8002168:	f8c8 1000 	streq.w	r1, [r8]
 800216c:	5162      	str	r2, [r4, r5]
 800216e:	604b      	str	r3, [r1, #4]
 8002170:	4630      	mov	r0, r6
 8002172:	f000 f82f 	bl	80021d4 <__malloc_unlock>
 8002176:	f104 000b 	add.w	r0, r4, #11
 800217a:	1d23      	adds	r3, r4, #4
 800217c:	f020 0007 	bic.w	r0, r0, #7
 8002180:	1ac2      	subs	r2, r0, r3
 8002182:	bf1c      	itt	ne
 8002184:	1a1b      	subne	r3, r3, r0
 8002186:	50a3      	strne	r3, [r4, r2]
 8002188:	e7af      	b.n	80020ea <_malloc_r+0x22>
 800218a:	6862      	ldr	r2, [r4, #4]
 800218c:	42a3      	cmp	r3, r4
 800218e:	bf0c      	ite	eq
 8002190:	f8c8 2000 	streq.w	r2, [r8]
 8002194:	605a      	strne	r2, [r3, #4]
 8002196:	e7eb      	b.n	8002170 <_malloc_r+0xa8>
 8002198:	4623      	mov	r3, r4
 800219a:	6864      	ldr	r4, [r4, #4]
 800219c:	e7ae      	b.n	80020fc <_malloc_r+0x34>
 800219e:	463c      	mov	r4, r7
 80021a0:	687f      	ldr	r7, [r7, #4]
 80021a2:	e7b6      	b.n	8002112 <_malloc_r+0x4a>
 80021a4:	461a      	mov	r2, r3
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	42a3      	cmp	r3, r4
 80021aa:	d1fb      	bne.n	80021a4 <_malloc_r+0xdc>
 80021ac:	2300      	movs	r3, #0
 80021ae:	6053      	str	r3, [r2, #4]
 80021b0:	e7de      	b.n	8002170 <_malloc_r+0xa8>
 80021b2:	230c      	movs	r3, #12
 80021b4:	6033      	str	r3, [r6, #0]
 80021b6:	4630      	mov	r0, r6
 80021b8:	f000 f80c 	bl	80021d4 <__malloc_unlock>
 80021bc:	e794      	b.n	80020e8 <_malloc_r+0x20>
 80021be:	6005      	str	r5, [r0, #0]
 80021c0:	e7d6      	b.n	8002170 <_malloc_r+0xa8>
 80021c2:	bf00      	nop
 80021c4:	200001e8 	.word	0x200001e8

080021c8 <__malloc_lock>:
 80021c8:	4801      	ldr	r0, [pc, #4]	@ (80021d0 <__malloc_lock+0x8>)
 80021ca:	f7ff bf08 	b.w	8001fde <__retarget_lock_acquire_recursive>
 80021ce:	bf00      	nop
 80021d0:	200001e0 	.word	0x200001e0

080021d4 <__malloc_unlock>:
 80021d4:	4801      	ldr	r0, [pc, #4]	@ (80021dc <__malloc_unlock+0x8>)
 80021d6:	f7ff bf03 	b.w	8001fe0 <__retarget_lock_release_recursive>
 80021da:	bf00      	nop
 80021dc:	200001e0 	.word	0x200001e0

080021e0 <__sfputc_r>:
 80021e0:	6893      	ldr	r3, [r2, #8]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	b410      	push	{r4}
 80021e8:	6093      	str	r3, [r2, #8]
 80021ea:	da08      	bge.n	80021fe <__sfputc_r+0x1e>
 80021ec:	6994      	ldr	r4, [r2, #24]
 80021ee:	42a3      	cmp	r3, r4
 80021f0:	db01      	blt.n	80021f6 <__sfputc_r+0x16>
 80021f2:	290a      	cmp	r1, #10
 80021f4:	d103      	bne.n	80021fe <__sfputc_r+0x1e>
 80021f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021fa:	f000 bb6d 	b.w	80028d8 <__swbuf_r>
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	1c58      	adds	r0, r3, #1
 8002202:	6010      	str	r0, [r2, #0]
 8002204:	7019      	strb	r1, [r3, #0]
 8002206:	4608      	mov	r0, r1
 8002208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800220c:	4770      	bx	lr

0800220e <__sfputs_r>:
 800220e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002210:	4606      	mov	r6, r0
 8002212:	460f      	mov	r7, r1
 8002214:	4614      	mov	r4, r2
 8002216:	18d5      	adds	r5, r2, r3
 8002218:	42ac      	cmp	r4, r5
 800221a:	d101      	bne.n	8002220 <__sfputs_r+0x12>
 800221c:	2000      	movs	r0, #0
 800221e:	e007      	b.n	8002230 <__sfputs_r+0x22>
 8002220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002224:	463a      	mov	r2, r7
 8002226:	4630      	mov	r0, r6
 8002228:	f7ff ffda 	bl	80021e0 <__sfputc_r>
 800222c:	1c43      	adds	r3, r0, #1
 800222e:	d1f3      	bne.n	8002218 <__sfputs_r+0xa>
 8002230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002234 <_vfiprintf_r>:
 8002234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002238:	460d      	mov	r5, r1
 800223a:	b09d      	sub	sp, #116	@ 0x74
 800223c:	4614      	mov	r4, r2
 800223e:	4698      	mov	r8, r3
 8002240:	4606      	mov	r6, r0
 8002242:	b118      	cbz	r0, 800224c <_vfiprintf_r+0x18>
 8002244:	6a03      	ldr	r3, [r0, #32]
 8002246:	b90b      	cbnz	r3, 800224c <_vfiprintf_r+0x18>
 8002248:	f7ff fdc4 	bl	8001dd4 <__sinit>
 800224c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800224e:	07d9      	lsls	r1, r3, #31
 8002250:	d405      	bmi.n	800225e <_vfiprintf_r+0x2a>
 8002252:	89ab      	ldrh	r3, [r5, #12]
 8002254:	059a      	lsls	r2, r3, #22
 8002256:	d402      	bmi.n	800225e <_vfiprintf_r+0x2a>
 8002258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800225a:	f7ff fec0 	bl	8001fde <__retarget_lock_acquire_recursive>
 800225e:	89ab      	ldrh	r3, [r5, #12]
 8002260:	071b      	lsls	r3, r3, #28
 8002262:	d501      	bpl.n	8002268 <_vfiprintf_r+0x34>
 8002264:	692b      	ldr	r3, [r5, #16]
 8002266:	b99b      	cbnz	r3, 8002290 <_vfiprintf_r+0x5c>
 8002268:	4629      	mov	r1, r5
 800226a:	4630      	mov	r0, r6
 800226c:	f000 fb72 	bl	8002954 <__swsetup_r>
 8002270:	b170      	cbz	r0, 8002290 <_vfiprintf_r+0x5c>
 8002272:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002274:	07dc      	lsls	r4, r3, #31
 8002276:	d504      	bpl.n	8002282 <_vfiprintf_r+0x4e>
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	b01d      	add	sp, #116	@ 0x74
 800227e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002282:	89ab      	ldrh	r3, [r5, #12]
 8002284:	0598      	lsls	r0, r3, #22
 8002286:	d4f7      	bmi.n	8002278 <_vfiprintf_r+0x44>
 8002288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800228a:	f7ff fea9 	bl	8001fe0 <__retarget_lock_release_recursive>
 800228e:	e7f3      	b.n	8002278 <_vfiprintf_r+0x44>
 8002290:	2300      	movs	r3, #0
 8002292:	9309      	str	r3, [sp, #36]	@ 0x24
 8002294:	2320      	movs	r3, #32
 8002296:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800229a:	f8cd 800c 	str.w	r8, [sp, #12]
 800229e:	2330      	movs	r3, #48	@ 0x30
 80022a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002450 <_vfiprintf_r+0x21c>
 80022a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022a8:	f04f 0901 	mov.w	r9, #1
 80022ac:	4623      	mov	r3, r4
 80022ae:	469a      	mov	sl, r3
 80022b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022b4:	b10a      	cbz	r2, 80022ba <_vfiprintf_r+0x86>
 80022b6:	2a25      	cmp	r2, #37	@ 0x25
 80022b8:	d1f9      	bne.n	80022ae <_vfiprintf_r+0x7a>
 80022ba:	ebba 0b04 	subs.w	fp, sl, r4
 80022be:	d00b      	beq.n	80022d8 <_vfiprintf_r+0xa4>
 80022c0:	465b      	mov	r3, fp
 80022c2:	4622      	mov	r2, r4
 80022c4:	4629      	mov	r1, r5
 80022c6:	4630      	mov	r0, r6
 80022c8:	f7ff ffa1 	bl	800220e <__sfputs_r>
 80022cc:	3001      	adds	r0, #1
 80022ce:	f000 80a7 	beq.w	8002420 <_vfiprintf_r+0x1ec>
 80022d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80022d4:	445a      	add	r2, fp
 80022d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80022d8:	f89a 3000 	ldrb.w	r3, [sl]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 809f 	beq.w	8002420 <_vfiprintf_r+0x1ec>
 80022e2:	2300      	movs	r3, #0
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022ec:	f10a 0a01 	add.w	sl, sl, #1
 80022f0:	9304      	str	r3, [sp, #16]
 80022f2:	9307      	str	r3, [sp, #28]
 80022f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80022f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80022fa:	4654      	mov	r4, sl
 80022fc:	2205      	movs	r2, #5
 80022fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002302:	4853      	ldr	r0, [pc, #332]	@ (8002450 <_vfiprintf_r+0x21c>)
 8002304:	f7fd ff74 	bl	80001f0 <memchr>
 8002308:	9a04      	ldr	r2, [sp, #16]
 800230a:	b9d8      	cbnz	r0, 8002344 <_vfiprintf_r+0x110>
 800230c:	06d1      	lsls	r1, r2, #27
 800230e:	bf44      	itt	mi
 8002310:	2320      	movmi	r3, #32
 8002312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002316:	0713      	lsls	r3, r2, #28
 8002318:	bf44      	itt	mi
 800231a:	232b      	movmi	r3, #43	@ 0x2b
 800231c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002320:	f89a 3000 	ldrb.w	r3, [sl]
 8002324:	2b2a      	cmp	r3, #42	@ 0x2a
 8002326:	d015      	beq.n	8002354 <_vfiprintf_r+0x120>
 8002328:	9a07      	ldr	r2, [sp, #28]
 800232a:	4654      	mov	r4, sl
 800232c:	2000      	movs	r0, #0
 800232e:	f04f 0c0a 	mov.w	ip, #10
 8002332:	4621      	mov	r1, r4
 8002334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002338:	3b30      	subs	r3, #48	@ 0x30
 800233a:	2b09      	cmp	r3, #9
 800233c:	d94b      	bls.n	80023d6 <_vfiprintf_r+0x1a2>
 800233e:	b1b0      	cbz	r0, 800236e <_vfiprintf_r+0x13a>
 8002340:	9207      	str	r2, [sp, #28]
 8002342:	e014      	b.n	800236e <_vfiprintf_r+0x13a>
 8002344:	eba0 0308 	sub.w	r3, r0, r8
 8002348:	fa09 f303 	lsl.w	r3, r9, r3
 800234c:	4313      	orrs	r3, r2
 800234e:	9304      	str	r3, [sp, #16]
 8002350:	46a2      	mov	sl, r4
 8002352:	e7d2      	b.n	80022fa <_vfiprintf_r+0xc6>
 8002354:	9b03      	ldr	r3, [sp, #12]
 8002356:	1d19      	adds	r1, r3, #4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	9103      	str	r1, [sp, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	bfbb      	ittet	lt
 8002360:	425b      	neglt	r3, r3
 8002362:	f042 0202 	orrlt.w	r2, r2, #2
 8002366:	9307      	strge	r3, [sp, #28]
 8002368:	9307      	strlt	r3, [sp, #28]
 800236a:	bfb8      	it	lt
 800236c:	9204      	strlt	r2, [sp, #16]
 800236e:	7823      	ldrb	r3, [r4, #0]
 8002370:	2b2e      	cmp	r3, #46	@ 0x2e
 8002372:	d10a      	bne.n	800238a <_vfiprintf_r+0x156>
 8002374:	7863      	ldrb	r3, [r4, #1]
 8002376:	2b2a      	cmp	r3, #42	@ 0x2a
 8002378:	d132      	bne.n	80023e0 <_vfiprintf_r+0x1ac>
 800237a:	9b03      	ldr	r3, [sp, #12]
 800237c:	1d1a      	adds	r2, r3, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	9203      	str	r2, [sp, #12]
 8002382:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002386:	3402      	adds	r4, #2
 8002388:	9305      	str	r3, [sp, #20]
 800238a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002460 <_vfiprintf_r+0x22c>
 800238e:	7821      	ldrb	r1, [r4, #0]
 8002390:	2203      	movs	r2, #3
 8002392:	4650      	mov	r0, sl
 8002394:	f7fd ff2c 	bl	80001f0 <memchr>
 8002398:	b138      	cbz	r0, 80023aa <_vfiprintf_r+0x176>
 800239a:	9b04      	ldr	r3, [sp, #16]
 800239c:	eba0 000a 	sub.w	r0, r0, sl
 80023a0:	2240      	movs	r2, #64	@ 0x40
 80023a2:	4082      	lsls	r2, r0
 80023a4:	4313      	orrs	r3, r2
 80023a6:	3401      	adds	r4, #1
 80023a8:	9304      	str	r3, [sp, #16]
 80023aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ae:	4829      	ldr	r0, [pc, #164]	@ (8002454 <_vfiprintf_r+0x220>)
 80023b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80023b4:	2206      	movs	r2, #6
 80023b6:	f7fd ff1b 	bl	80001f0 <memchr>
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d03f      	beq.n	800243e <_vfiprintf_r+0x20a>
 80023be:	4b26      	ldr	r3, [pc, #152]	@ (8002458 <_vfiprintf_r+0x224>)
 80023c0:	bb1b      	cbnz	r3, 800240a <_vfiprintf_r+0x1d6>
 80023c2:	9b03      	ldr	r3, [sp, #12]
 80023c4:	3307      	adds	r3, #7
 80023c6:	f023 0307 	bic.w	r3, r3, #7
 80023ca:	3308      	adds	r3, #8
 80023cc:	9303      	str	r3, [sp, #12]
 80023ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023d0:	443b      	add	r3, r7
 80023d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80023d4:	e76a      	b.n	80022ac <_vfiprintf_r+0x78>
 80023d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80023da:	460c      	mov	r4, r1
 80023dc:	2001      	movs	r0, #1
 80023de:	e7a8      	b.n	8002332 <_vfiprintf_r+0xfe>
 80023e0:	2300      	movs	r3, #0
 80023e2:	3401      	adds	r4, #1
 80023e4:	9305      	str	r3, [sp, #20]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 0c0a 	mov.w	ip, #10
 80023ec:	4620      	mov	r0, r4
 80023ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023f2:	3a30      	subs	r2, #48	@ 0x30
 80023f4:	2a09      	cmp	r2, #9
 80023f6:	d903      	bls.n	8002400 <_vfiprintf_r+0x1cc>
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0c6      	beq.n	800238a <_vfiprintf_r+0x156>
 80023fc:	9105      	str	r1, [sp, #20]
 80023fe:	e7c4      	b.n	800238a <_vfiprintf_r+0x156>
 8002400:	fb0c 2101 	mla	r1, ip, r1, r2
 8002404:	4604      	mov	r4, r0
 8002406:	2301      	movs	r3, #1
 8002408:	e7f0      	b.n	80023ec <_vfiprintf_r+0x1b8>
 800240a:	ab03      	add	r3, sp, #12
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	462a      	mov	r2, r5
 8002410:	4b12      	ldr	r3, [pc, #72]	@ (800245c <_vfiprintf_r+0x228>)
 8002412:	a904      	add	r1, sp, #16
 8002414:	4630      	mov	r0, r6
 8002416:	f3af 8000 	nop.w
 800241a:	4607      	mov	r7, r0
 800241c:	1c78      	adds	r0, r7, #1
 800241e:	d1d6      	bne.n	80023ce <_vfiprintf_r+0x19a>
 8002420:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002422:	07d9      	lsls	r1, r3, #31
 8002424:	d405      	bmi.n	8002432 <_vfiprintf_r+0x1fe>
 8002426:	89ab      	ldrh	r3, [r5, #12]
 8002428:	059a      	lsls	r2, r3, #22
 800242a:	d402      	bmi.n	8002432 <_vfiprintf_r+0x1fe>
 800242c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800242e:	f7ff fdd7 	bl	8001fe0 <__retarget_lock_release_recursive>
 8002432:	89ab      	ldrh	r3, [r5, #12]
 8002434:	065b      	lsls	r3, r3, #25
 8002436:	f53f af1f 	bmi.w	8002278 <_vfiprintf_r+0x44>
 800243a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800243c:	e71e      	b.n	800227c <_vfiprintf_r+0x48>
 800243e:	ab03      	add	r3, sp, #12
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	462a      	mov	r2, r5
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <_vfiprintf_r+0x228>)
 8002446:	a904      	add	r1, sp, #16
 8002448:	4630      	mov	r0, r6
 800244a:	f000 f879 	bl	8002540 <_printf_i>
 800244e:	e7e4      	b.n	800241a <_vfiprintf_r+0x1e6>
 8002450:	08002c60 	.word	0x08002c60
 8002454:	08002c6a 	.word	0x08002c6a
 8002458:	00000000 	.word	0x00000000
 800245c:	0800220f 	.word	0x0800220f
 8002460:	08002c66 	.word	0x08002c66

08002464 <_printf_common>:
 8002464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002468:	4616      	mov	r6, r2
 800246a:	4698      	mov	r8, r3
 800246c:	688a      	ldr	r2, [r1, #8]
 800246e:	690b      	ldr	r3, [r1, #16]
 8002470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002474:	4293      	cmp	r3, r2
 8002476:	bfb8      	it	lt
 8002478:	4613      	movlt	r3, r2
 800247a:	6033      	str	r3, [r6, #0]
 800247c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002480:	4607      	mov	r7, r0
 8002482:	460c      	mov	r4, r1
 8002484:	b10a      	cbz	r2, 800248a <_printf_common+0x26>
 8002486:	3301      	adds	r3, #1
 8002488:	6033      	str	r3, [r6, #0]
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	0699      	lsls	r1, r3, #26
 800248e:	bf42      	ittt	mi
 8002490:	6833      	ldrmi	r3, [r6, #0]
 8002492:	3302      	addmi	r3, #2
 8002494:	6033      	strmi	r3, [r6, #0]
 8002496:	6825      	ldr	r5, [r4, #0]
 8002498:	f015 0506 	ands.w	r5, r5, #6
 800249c:	d106      	bne.n	80024ac <_printf_common+0x48>
 800249e:	f104 0a19 	add.w	sl, r4, #25
 80024a2:	68e3      	ldr	r3, [r4, #12]
 80024a4:	6832      	ldr	r2, [r6, #0]
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	42ab      	cmp	r3, r5
 80024aa:	dc26      	bgt.n	80024fa <_printf_common+0x96>
 80024ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80024b0:	6822      	ldr	r2, [r4, #0]
 80024b2:	3b00      	subs	r3, #0
 80024b4:	bf18      	it	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	0692      	lsls	r2, r2, #26
 80024ba:	d42b      	bmi.n	8002514 <_printf_common+0xb0>
 80024bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80024c0:	4641      	mov	r1, r8
 80024c2:	4638      	mov	r0, r7
 80024c4:	47c8      	blx	r9
 80024c6:	3001      	adds	r0, #1
 80024c8:	d01e      	beq.n	8002508 <_printf_common+0xa4>
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	6922      	ldr	r2, [r4, #16]
 80024ce:	f003 0306 	and.w	r3, r3, #6
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf02      	ittt	eq
 80024d6:	68e5      	ldreq	r5, [r4, #12]
 80024d8:	6833      	ldreq	r3, [r6, #0]
 80024da:	1aed      	subeq	r5, r5, r3
 80024dc:	68a3      	ldr	r3, [r4, #8]
 80024de:	bf0c      	ite	eq
 80024e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024e4:	2500      	movne	r5, #0
 80024e6:	4293      	cmp	r3, r2
 80024e8:	bfc4      	itt	gt
 80024ea:	1a9b      	subgt	r3, r3, r2
 80024ec:	18ed      	addgt	r5, r5, r3
 80024ee:	2600      	movs	r6, #0
 80024f0:	341a      	adds	r4, #26
 80024f2:	42b5      	cmp	r5, r6
 80024f4:	d11a      	bne.n	800252c <_printf_common+0xc8>
 80024f6:	2000      	movs	r0, #0
 80024f8:	e008      	b.n	800250c <_printf_common+0xa8>
 80024fa:	2301      	movs	r3, #1
 80024fc:	4652      	mov	r2, sl
 80024fe:	4641      	mov	r1, r8
 8002500:	4638      	mov	r0, r7
 8002502:	47c8      	blx	r9
 8002504:	3001      	adds	r0, #1
 8002506:	d103      	bne.n	8002510 <_printf_common+0xac>
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002510:	3501      	adds	r5, #1
 8002512:	e7c6      	b.n	80024a2 <_printf_common+0x3e>
 8002514:	18e1      	adds	r1, r4, r3
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	2030      	movs	r0, #48	@ 0x30
 800251a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800251e:	4422      	add	r2, r4
 8002520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002524:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002528:	3302      	adds	r3, #2
 800252a:	e7c7      	b.n	80024bc <_printf_common+0x58>
 800252c:	2301      	movs	r3, #1
 800252e:	4622      	mov	r2, r4
 8002530:	4641      	mov	r1, r8
 8002532:	4638      	mov	r0, r7
 8002534:	47c8      	blx	r9
 8002536:	3001      	adds	r0, #1
 8002538:	d0e6      	beq.n	8002508 <_printf_common+0xa4>
 800253a:	3601      	adds	r6, #1
 800253c:	e7d9      	b.n	80024f2 <_printf_common+0x8e>
	...

08002540 <_printf_i>:
 8002540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002544:	7e0f      	ldrb	r7, [r1, #24]
 8002546:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002548:	2f78      	cmp	r7, #120	@ 0x78
 800254a:	4691      	mov	r9, r2
 800254c:	4680      	mov	r8, r0
 800254e:	460c      	mov	r4, r1
 8002550:	469a      	mov	sl, r3
 8002552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002556:	d807      	bhi.n	8002568 <_printf_i+0x28>
 8002558:	2f62      	cmp	r7, #98	@ 0x62
 800255a:	d80a      	bhi.n	8002572 <_printf_i+0x32>
 800255c:	2f00      	cmp	r7, #0
 800255e:	f000 80d2 	beq.w	8002706 <_printf_i+0x1c6>
 8002562:	2f58      	cmp	r7, #88	@ 0x58
 8002564:	f000 80b9 	beq.w	80026da <_printf_i+0x19a>
 8002568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800256c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002570:	e03a      	b.n	80025e8 <_printf_i+0xa8>
 8002572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002576:	2b15      	cmp	r3, #21
 8002578:	d8f6      	bhi.n	8002568 <_printf_i+0x28>
 800257a:	a101      	add	r1, pc, #4	@ (adr r1, 8002580 <_printf_i+0x40>)
 800257c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002580:	080025d9 	.word	0x080025d9
 8002584:	080025ed 	.word	0x080025ed
 8002588:	08002569 	.word	0x08002569
 800258c:	08002569 	.word	0x08002569
 8002590:	08002569 	.word	0x08002569
 8002594:	08002569 	.word	0x08002569
 8002598:	080025ed 	.word	0x080025ed
 800259c:	08002569 	.word	0x08002569
 80025a0:	08002569 	.word	0x08002569
 80025a4:	08002569 	.word	0x08002569
 80025a8:	08002569 	.word	0x08002569
 80025ac:	080026ed 	.word	0x080026ed
 80025b0:	08002617 	.word	0x08002617
 80025b4:	080026a7 	.word	0x080026a7
 80025b8:	08002569 	.word	0x08002569
 80025bc:	08002569 	.word	0x08002569
 80025c0:	0800270f 	.word	0x0800270f
 80025c4:	08002569 	.word	0x08002569
 80025c8:	08002617 	.word	0x08002617
 80025cc:	08002569 	.word	0x08002569
 80025d0:	08002569 	.word	0x08002569
 80025d4:	080026af 	.word	0x080026af
 80025d8:	6833      	ldr	r3, [r6, #0]
 80025da:	1d1a      	adds	r2, r3, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6032      	str	r2, [r6, #0]
 80025e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80025e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80025e8:	2301      	movs	r3, #1
 80025ea:	e09d      	b.n	8002728 <_printf_i+0x1e8>
 80025ec:	6833      	ldr	r3, [r6, #0]
 80025ee:	6820      	ldr	r0, [r4, #0]
 80025f0:	1d19      	adds	r1, r3, #4
 80025f2:	6031      	str	r1, [r6, #0]
 80025f4:	0606      	lsls	r6, r0, #24
 80025f6:	d501      	bpl.n	80025fc <_printf_i+0xbc>
 80025f8:	681d      	ldr	r5, [r3, #0]
 80025fa:	e003      	b.n	8002604 <_printf_i+0xc4>
 80025fc:	0645      	lsls	r5, r0, #25
 80025fe:	d5fb      	bpl.n	80025f8 <_printf_i+0xb8>
 8002600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002604:	2d00      	cmp	r5, #0
 8002606:	da03      	bge.n	8002610 <_printf_i+0xd0>
 8002608:	232d      	movs	r3, #45	@ 0x2d
 800260a:	426d      	negs	r5, r5
 800260c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002610:	4859      	ldr	r0, [pc, #356]	@ (8002778 <_printf_i+0x238>)
 8002612:	230a      	movs	r3, #10
 8002614:	e011      	b.n	800263a <_printf_i+0xfa>
 8002616:	6821      	ldr	r1, [r4, #0]
 8002618:	6833      	ldr	r3, [r6, #0]
 800261a:	0608      	lsls	r0, r1, #24
 800261c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002620:	d402      	bmi.n	8002628 <_printf_i+0xe8>
 8002622:	0649      	lsls	r1, r1, #25
 8002624:	bf48      	it	mi
 8002626:	b2ad      	uxthmi	r5, r5
 8002628:	2f6f      	cmp	r7, #111	@ 0x6f
 800262a:	4853      	ldr	r0, [pc, #332]	@ (8002778 <_printf_i+0x238>)
 800262c:	6033      	str	r3, [r6, #0]
 800262e:	bf14      	ite	ne
 8002630:	230a      	movne	r3, #10
 8002632:	2308      	moveq	r3, #8
 8002634:	2100      	movs	r1, #0
 8002636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800263a:	6866      	ldr	r6, [r4, #4]
 800263c:	60a6      	str	r6, [r4, #8]
 800263e:	2e00      	cmp	r6, #0
 8002640:	bfa2      	ittt	ge
 8002642:	6821      	ldrge	r1, [r4, #0]
 8002644:	f021 0104 	bicge.w	r1, r1, #4
 8002648:	6021      	strge	r1, [r4, #0]
 800264a:	b90d      	cbnz	r5, 8002650 <_printf_i+0x110>
 800264c:	2e00      	cmp	r6, #0
 800264e:	d04b      	beq.n	80026e8 <_printf_i+0x1a8>
 8002650:	4616      	mov	r6, r2
 8002652:	fbb5 f1f3 	udiv	r1, r5, r3
 8002656:	fb03 5711 	mls	r7, r3, r1, r5
 800265a:	5dc7      	ldrb	r7, [r0, r7]
 800265c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002660:	462f      	mov	r7, r5
 8002662:	42bb      	cmp	r3, r7
 8002664:	460d      	mov	r5, r1
 8002666:	d9f4      	bls.n	8002652 <_printf_i+0x112>
 8002668:	2b08      	cmp	r3, #8
 800266a:	d10b      	bne.n	8002684 <_printf_i+0x144>
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	07df      	lsls	r7, r3, #31
 8002670:	d508      	bpl.n	8002684 <_printf_i+0x144>
 8002672:	6923      	ldr	r3, [r4, #16]
 8002674:	6861      	ldr	r1, [r4, #4]
 8002676:	4299      	cmp	r1, r3
 8002678:	bfde      	ittt	le
 800267a:	2330      	movle	r3, #48	@ 0x30
 800267c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002684:	1b92      	subs	r2, r2, r6
 8002686:	6122      	str	r2, [r4, #16]
 8002688:	f8cd a000 	str.w	sl, [sp]
 800268c:	464b      	mov	r3, r9
 800268e:	aa03      	add	r2, sp, #12
 8002690:	4621      	mov	r1, r4
 8002692:	4640      	mov	r0, r8
 8002694:	f7ff fee6 	bl	8002464 <_printf_common>
 8002698:	3001      	adds	r0, #1
 800269a:	d14a      	bne.n	8002732 <_printf_i+0x1f2>
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	b004      	add	sp, #16
 80026a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	f043 0320 	orr.w	r3, r3, #32
 80026ac:	6023      	str	r3, [r4, #0]
 80026ae:	4833      	ldr	r0, [pc, #204]	@ (800277c <_printf_i+0x23c>)
 80026b0:	2778      	movs	r7, #120	@ 0x78
 80026b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	6831      	ldr	r1, [r6, #0]
 80026ba:	061f      	lsls	r7, r3, #24
 80026bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80026c0:	d402      	bmi.n	80026c8 <_printf_i+0x188>
 80026c2:	065f      	lsls	r7, r3, #25
 80026c4:	bf48      	it	mi
 80026c6:	b2ad      	uxthmi	r5, r5
 80026c8:	6031      	str	r1, [r6, #0]
 80026ca:	07d9      	lsls	r1, r3, #31
 80026cc:	bf44      	itt	mi
 80026ce:	f043 0320 	orrmi.w	r3, r3, #32
 80026d2:	6023      	strmi	r3, [r4, #0]
 80026d4:	b11d      	cbz	r5, 80026de <_printf_i+0x19e>
 80026d6:	2310      	movs	r3, #16
 80026d8:	e7ac      	b.n	8002634 <_printf_i+0xf4>
 80026da:	4827      	ldr	r0, [pc, #156]	@ (8002778 <_printf_i+0x238>)
 80026dc:	e7e9      	b.n	80026b2 <_printf_i+0x172>
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	f023 0320 	bic.w	r3, r3, #32
 80026e4:	6023      	str	r3, [r4, #0]
 80026e6:	e7f6      	b.n	80026d6 <_printf_i+0x196>
 80026e8:	4616      	mov	r6, r2
 80026ea:	e7bd      	b.n	8002668 <_printf_i+0x128>
 80026ec:	6833      	ldr	r3, [r6, #0]
 80026ee:	6825      	ldr	r5, [r4, #0]
 80026f0:	6961      	ldr	r1, [r4, #20]
 80026f2:	1d18      	adds	r0, r3, #4
 80026f4:	6030      	str	r0, [r6, #0]
 80026f6:	062e      	lsls	r6, r5, #24
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	d501      	bpl.n	8002700 <_printf_i+0x1c0>
 80026fc:	6019      	str	r1, [r3, #0]
 80026fe:	e002      	b.n	8002706 <_printf_i+0x1c6>
 8002700:	0668      	lsls	r0, r5, #25
 8002702:	d5fb      	bpl.n	80026fc <_printf_i+0x1bc>
 8002704:	8019      	strh	r1, [r3, #0]
 8002706:	2300      	movs	r3, #0
 8002708:	6123      	str	r3, [r4, #16]
 800270a:	4616      	mov	r6, r2
 800270c:	e7bc      	b.n	8002688 <_printf_i+0x148>
 800270e:	6833      	ldr	r3, [r6, #0]
 8002710:	1d1a      	adds	r2, r3, #4
 8002712:	6032      	str	r2, [r6, #0]
 8002714:	681e      	ldr	r6, [r3, #0]
 8002716:	6862      	ldr	r2, [r4, #4]
 8002718:	2100      	movs	r1, #0
 800271a:	4630      	mov	r0, r6
 800271c:	f7fd fd68 	bl	80001f0 <memchr>
 8002720:	b108      	cbz	r0, 8002726 <_printf_i+0x1e6>
 8002722:	1b80      	subs	r0, r0, r6
 8002724:	6060      	str	r0, [r4, #4]
 8002726:	6863      	ldr	r3, [r4, #4]
 8002728:	6123      	str	r3, [r4, #16]
 800272a:	2300      	movs	r3, #0
 800272c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002730:	e7aa      	b.n	8002688 <_printf_i+0x148>
 8002732:	6923      	ldr	r3, [r4, #16]
 8002734:	4632      	mov	r2, r6
 8002736:	4649      	mov	r1, r9
 8002738:	4640      	mov	r0, r8
 800273a:	47d0      	blx	sl
 800273c:	3001      	adds	r0, #1
 800273e:	d0ad      	beq.n	800269c <_printf_i+0x15c>
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	079b      	lsls	r3, r3, #30
 8002744:	d413      	bmi.n	800276e <_printf_i+0x22e>
 8002746:	68e0      	ldr	r0, [r4, #12]
 8002748:	9b03      	ldr	r3, [sp, #12]
 800274a:	4298      	cmp	r0, r3
 800274c:	bfb8      	it	lt
 800274e:	4618      	movlt	r0, r3
 8002750:	e7a6      	b.n	80026a0 <_printf_i+0x160>
 8002752:	2301      	movs	r3, #1
 8002754:	4632      	mov	r2, r6
 8002756:	4649      	mov	r1, r9
 8002758:	4640      	mov	r0, r8
 800275a:	47d0      	blx	sl
 800275c:	3001      	adds	r0, #1
 800275e:	d09d      	beq.n	800269c <_printf_i+0x15c>
 8002760:	3501      	adds	r5, #1
 8002762:	68e3      	ldr	r3, [r4, #12]
 8002764:	9903      	ldr	r1, [sp, #12]
 8002766:	1a5b      	subs	r3, r3, r1
 8002768:	42ab      	cmp	r3, r5
 800276a:	dcf2      	bgt.n	8002752 <_printf_i+0x212>
 800276c:	e7eb      	b.n	8002746 <_printf_i+0x206>
 800276e:	2500      	movs	r5, #0
 8002770:	f104 0619 	add.w	r6, r4, #25
 8002774:	e7f5      	b.n	8002762 <_printf_i+0x222>
 8002776:	bf00      	nop
 8002778:	08002c71 	.word	0x08002c71
 800277c:	08002c82 	.word	0x08002c82

08002780 <__sflush_r>:
 8002780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002788:	0716      	lsls	r6, r2, #28
 800278a:	4605      	mov	r5, r0
 800278c:	460c      	mov	r4, r1
 800278e:	d454      	bmi.n	800283a <__sflush_r+0xba>
 8002790:	684b      	ldr	r3, [r1, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	dc02      	bgt.n	800279c <__sflush_r+0x1c>
 8002796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	dd48      	ble.n	800282e <__sflush_r+0xae>
 800279c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800279e:	2e00      	cmp	r6, #0
 80027a0:	d045      	beq.n	800282e <__sflush_r+0xae>
 80027a2:	2300      	movs	r3, #0
 80027a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80027a8:	682f      	ldr	r7, [r5, #0]
 80027aa:	6a21      	ldr	r1, [r4, #32]
 80027ac:	602b      	str	r3, [r5, #0]
 80027ae:	d030      	beq.n	8002812 <__sflush_r+0x92>
 80027b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80027b2:	89a3      	ldrh	r3, [r4, #12]
 80027b4:	0759      	lsls	r1, r3, #29
 80027b6:	d505      	bpl.n	80027c4 <__sflush_r+0x44>
 80027b8:	6863      	ldr	r3, [r4, #4]
 80027ba:	1ad2      	subs	r2, r2, r3
 80027bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80027be:	b10b      	cbz	r3, 80027c4 <__sflush_r+0x44>
 80027c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027c2:	1ad2      	subs	r2, r2, r3
 80027c4:	2300      	movs	r3, #0
 80027c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80027c8:	6a21      	ldr	r1, [r4, #32]
 80027ca:	4628      	mov	r0, r5
 80027cc:	47b0      	blx	r6
 80027ce:	1c43      	adds	r3, r0, #1
 80027d0:	89a3      	ldrh	r3, [r4, #12]
 80027d2:	d106      	bne.n	80027e2 <__sflush_r+0x62>
 80027d4:	6829      	ldr	r1, [r5, #0]
 80027d6:	291d      	cmp	r1, #29
 80027d8:	d82b      	bhi.n	8002832 <__sflush_r+0xb2>
 80027da:	4a2a      	ldr	r2, [pc, #168]	@ (8002884 <__sflush_r+0x104>)
 80027dc:	410a      	asrs	r2, r1
 80027de:	07d6      	lsls	r6, r2, #31
 80027e0:	d427      	bmi.n	8002832 <__sflush_r+0xb2>
 80027e2:	2200      	movs	r2, #0
 80027e4:	6062      	str	r2, [r4, #4]
 80027e6:	04d9      	lsls	r1, r3, #19
 80027e8:	6922      	ldr	r2, [r4, #16]
 80027ea:	6022      	str	r2, [r4, #0]
 80027ec:	d504      	bpl.n	80027f8 <__sflush_r+0x78>
 80027ee:	1c42      	adds	r2, r0, #1
 80027f0:	d101      	bne.n	80027f6 <__sflush_r+0x76>
 80027f2:	682b      	ldr	r3, [r5, #0]
 80027f4:	b903      	cbnz	r3, 80027f8 <__sflush_r+0x78>
 80027f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80027f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80027fa:	602f      	str	r7, [r5, #0]
 80027fc:	b1b9      	cbz	r1, 800282e <__sflush_r+0xae>
 80027fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002802:	4299      	cmp	r1, r3
 8002804:	d002      	beq.n	800280c <__sflush_r+0x8c>
 8002806:	4628      	mov	r0, r5
 8002808:	f7ff fbf2 	bl	8001ff0 <_free_r>
 800280c:	2300      	movs	r3, #0
 800280e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002810:	e00d      	b.n	800282e <__sflush_r+0xae>
 8002812:	2301      	movs	r3, #1
 8002814:	4628      	mov	r0, r5
 8002816:	47b0      	blx	r6
 8002818:	4602      	mov	r2, r0
 800281a:	1c50      	adds	r0, r2, #1
 800281c:	d1c9      	bne.n	80027b2 <__sflush_r+0x32>
 800281e:	682b      	ldr	r3, [r5, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0c6      	beq.n	80027b2 <__sflush_r+0x32>
 8002824:	2b1d      	cmp	r3, #29
 8002826:	d001      	beq.n	800282c <__sflush_r+0xac>
 8002828:	2b16      	cmp	r3, #22
 800282a:	d11e      	bne.n	800286a <__sflush_r+0xea>
 800282c:	602f      	str	r7, [r5, #0]
 800282e:	2000      	movs	r0, #0
 8002830:	e022      	b.n	8002878 <__sflush_r+0xf8>
 8002832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002836:	b21b      	sxth	r3, r3
 8002838:	e01b      	b.n	8002872 <__sflush_r+0xf2>
 800283a:	690f      	ldr	r7, [r1, #16]
 800283c:	2f00      	cmp	r7, #0
 800283e:	d0f6      	beq.n	800282e <__sflush_r+0xae>
 8002840:	0793      	lsls	r3, r2, #30
 8002842:	680e      	ldr	r6, [r1, #0]
 8002844:	bf08      	it	eq
 8002846:	694b      	ldreq	r3, [r1, #20]
 8002848:	600f      	str	r7, [r1, #0]
 800284a:	bf18      	it	ne
 800284c:	2300      	movne	r3, #0
 800284e:	eba6 0807 	sub.w	r8, r6, r7
 8002852:	608b      	str	r3, [r1, #8]
 8002854:	f1b8 0f00 	cmp.w	r8, #0
 8002858:	dde9      	ble.n	800282e <__sflush_r+0xae>
 800285a:	6a21      	ldr	r1, [r4, #32]
 800285c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800285e:	4643      	mov	r3, r8
 8002860:	463a      	mov	r2, r7
 8002862:	4628      	mov	r0, r5
 8002864:	47b0      	blx	r6
 8002866:	2800      	cmp	r0, #0
 8002868:	dc08      	bgt.n	800287c <__sflush_r+0xfc>
 800286a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800286e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002872:	81a3      	strh	r3, [r4, #12]
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800287c:	4407      	add	r7, r0
 800287e:	eba8 0800 	sub.w	r8, r8, r0
 8002882:	e7e7      	b.n	8002854 <__sflush_r+0xd4>
 8002884:	dfbffffe 	.word	0xdfbffffe

08002888 <_fflush_r>:
 8002888:	b538      	push	{r3, r4, r5, lr}
 800288a:	690b      	ldr	r3, [r1, #16]
 800288c:	4605      	mov	r5, r0
 800288e:	460c      	mov	r4, r1
 8002890:	b913      	cbnz	r3, 8002898 <_fflush_r+0x10>
 8002892:	2500      	movs	r5, #0
 8002894:	4628      	mov	r0, r5
 8002896:	bd38      	pop	{r3, r4, r5, pc}
 8002898:	b118      	cbz	r0, 80028a2 <_fflush_r+0x1a>
 800289a:	6a03      	ldr	r3, [r0, #32]
 800289c:	b90b      	cbnz	r3, 80028a2 <_fflush_r+0x1a>
 800289e:	f7ff fa99 	bl	8001dd4 <__sinit>
 80028a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f3      	beq.n	8002892 <_fflush_r+0xa>
 80028aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80028ac:	07d0      	lsls	r0, r2, #31
 80028ae:	d404      	bmi.n	80028ba <_fflush_r+0x32>
 80028b0:	0599      	lsls	r1, r3, #22
 80028b2:	d402      	bmi.n	80028ba <_fflush_r+0x32>
 80028b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028b6:	f7ff fb92 	bl	8001fde <__retarget_lock_acquire_recursive>
 80028ba:	4628      	mov	r0, r5
 80028bc:	4621      	mov	r1, r4
 80028be:	f7ff ff5f 	bl	8002780 <__sflush_r>
 80028c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80028c4:	07da      	lsls	r2, r3, #31
 80028c6:	4605      	mov	r5, r0
 80028c8:	d4e4      	bmi.n	8002894 <_fflush_r+0xc>
 80028ca:	89a3      	ldrh	r3, [r4, #12]
 80028cc:	059b      	lsls	r3, r3, #22
 80028ce:	d4e1      	bmi.n	8002894 <_fflush_r+0xc>
 80028d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80028d2:	f7ff fb85 	bl	8001fe0 <__retarget_lock_release_recursive>
 80028d6:	e7dd      	b.n	8002894 <_fflush_r+0xc>

080028d8 <__swbuf_r>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	460e      	mov	r6, r1
 80028dc:	4614      	mov	r4, r2
 80028de:	4605      	mov	r5, r0
 80028e0:	b118      	cbz	r0, 80028ea <__swbuf_r+0x12>
 80028e2:	6a03      	ldr	r3, [r0, #32]
 80028e4:	b90b      	cbnz	r3, 80028ea <__swbuf_r+0x12>
 80028e6:	f7ff fa75 	bl	8001dd4 <__sinit>
 80028ea:	69a3      	ldr	r3, [r4, #24]
 80028ec:	60a3      	str	r3, [r4, #8]
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	071a      	lsls	r2, r3, #28
 80028f2:	d501      	bpl.n	80028f8 <__swbuf_r+0x20>
 80028f4:	6923      	ldr	r3, [r4, #16]
 80028f6:	b943      	cbnz	r3, 800290a <__swbuf_r+0x32>
 80028f8:	4621      	mov	r1, r4
 80028fa:	4628      	mov	r0, r5
 80028fc:	f000 f82a 	bl	8002954 <__swsetup_r>
 8002900:	b118      	cbz	r0, 800290a <__swbuf_r+0x32>
 8002902:	f04f 37ff 	mov.w	r7, #4294967295
 8002906:	4638      	mov	r0, r7
 8002908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	6922      	ldr	r2, [r4, #16]
 800290e:	1a98      	subs	r0, r3, r2
 8002910:	6963      	ldr	r3, [r4, #20]
 8002912:	b2f6      	uxtb	r6, r6
 8002914:	4283      	cmp	r3, r0
 8002916:	4637      	mov	r7, r6
 8002918:	dc05      	bgt.n	8002926 <__swbuf_r+0x4e>
 800291a:	4621      	mov	r1, r4
 800291c:	4628      	mov	r0, r5
 800291e:	f7ff ffb3 	bl	8002888 <_fflush_r>
 8002922:	2800      	cmp	r0, #0
 8002924:	d1ed      	bne.n	8002902 <__swbuf_r+0x2a>
 8002926:	68a3      	ldr	r3, [r4, #8]
 8002928:	3b01      	subs	r3, #1
 800292a:	60a3      	str	r3, [r4, #8]
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	6022      	str	r2, [r4, #0]
 8002932:	701e      	strb	r6, [r3, #0]
 8002934:	6962      	ldr	r2, [r4, #20]
 8002936:	1c43      	adds	r3, r0, #1
 8002938:	429a      	cmp	r2, r3
 800293a:	d004      	beq.n	8002946 <__swbuf_r+0x6e>
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	07db      	lsls	r3, r3, #31
 8002940:	d5e1      	bpl.n	8002906 <__swbuf_r+0x2e>
 8002942:	2e0a      	cmp	r6, #10
 8002944:	d1df      	bne.n	8002906 <__swbuf_r+0x2e>
 8002946:	4621      	mov	r1, r4
 8002948:	4628      	mov	r0, r5
 800294a:	f7ff ff9d 	bl	8002888 <_fflush_r>
 800294e:	2800      	cmp	r0, #0
 8002950:	d0d9      	beq.n	8002906 <__swbuf_r+0x2e>
 8002952:	e7d6      	b.n	8002902 <__swbuf_r+0x2a>

08002954 <__swsetup_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4b29      	ldr	r3, [pc, #164]	@ (80029fc <__swsetup_r+0xa8>)
 8002958:	4605      	mov	r5, r0
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	460c      	mov	r4, r1
 800295e:	b118      	cbz	r0, 8002968 <__swsetup_r+0x14>
 8002960:	6a03      	ldr	r3, [r0, #32]
 8002962:	b90b      	cbnz	r3, 8002968 <__swsetup_r+0x14>
 8002964:	f7ff fa36 	bl	8001dd4 <__sinit>
 8002968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800296c:	0719      	lsls	r1, r3, #28
 800296e:	d422      	bmi.n	80029b6 <__swsetup_r+0x62>
 8002970:	06da      	lsls	r2, r3, #27
 8002972:	d407      	bmi.n	8002984 <__swsetup_r+0x30>
 8002974:	2209      	movs	r2, #9
 8002976:	602a      	str	r2, [r5, #0]
 8002978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800297c:	81a3      	strh	r3, [r4, #12]
 800297e:	f04f 30ff 	mov.w	r0, #4294967295
 8002982:	e033      	b.n	80029ec <__swsetup_r+0x98>
 8002984:	0758      	lsls	r0, r3, #29
 8002986:	d512      	bpl.n	80029ae <__swsetup_r+0x5a>
 8002988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800298a:	b141      	cbz	r1, 800299e <__swsetup_r+0x4a>
 800298c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002990:	4299      	cmp	r1, r3
 8002992:	d002      	beq.n	800299a <__swsetup_r+0x46>
 8002994:	4628      	mov	r0, r5
 8002996:	f7ff fb2b 	bl	8001ff0 <_free_r>
 800299a:	2300      	movs	r3, #0
 800299c:	6363      	str	r3, [r4, #52]	@ 0x34
 800299e:	89a3      	ldrh	r3, [r4, #12]
 80029a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80029a4:	81a3      	strh	r3, [r4, #12]
 80029a6:	2300      	movs	r3, #0
 80029a8:	6063      	str	r3, [r4, #4]
 80029aa:	6923      	ldr	r3, [r4, #16]
 80029ac:	6023      	str	r3, [r4, #0]
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	f043 0308 	orr.w	r3, r3, #8
 80029b4:	81a3      	strh	r3, [r4, #12]
 80029b6:	6923      	ldr	r3, [r4, #16]
 80029b8:	b94b      	cbnz	r3, 80029ce <__swsetup_r+0x7a>
 80029ba:	89a3      	ldrh	r3, [r4, #12]
 80029bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80029c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029c4:	d003      	beq.n	80029ce <__swsetup_r+0x7a>
 80029c6:	4621      	mov	r1, r4
 80029c8:	4628      	mov	r0, r5
 80029ca:	f000 f893 	bl	8002af4 <__smakebuf_r>
 80029ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029d2:	f013 0201 	ands.w	r2, r3, #1
 80029d6:	d00a      	beq.n	80029ee <__swsetup_r+0x9a>
 80029d8:	2200      	movs	r2, #0
 80029da:	60a2      	str	r2, [r4, #8]
 80029dc:	6962      	ldr	r2, [r4, #20]
 80029de:	4252      	negs	r2, r2
 80029e0:	61a2      	str	r2, [r4, #24]
 80029e2:	6922      	ldr	r2, [r4, #16]
 80029e4:	b942      	cbnz	r2, 80029f8 <__swsetup_r+0xa4>
 80029e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80029ea:	d1c5      	bne.n	8002978 <__swsetup_r+0x24>
 80029ec:	bd38      	pop	{r3, r4, r5, pc}
 80029ee:	0799      	lsls	r1, r3, #30
 80029f0:	bf58      	it	pl
 80029f2:	6962      	ldrpl	r2, [r4, #20]
 80029f4:	60a2      	str	r2, [r4, #8]
 80029f6:	e7f4      	b.n	80029e2 <__swsetup_r+0x8e>
 80029f8:	2000      	movs	r0, #0
 80029fa:	e7f7      	b.n	80029ec <__swsetup_r+0x98>
 80029fc:	20000018 	.word	0x20000018

08002a00 <_raise_r>:
 8002a00:	291f      	cmp	r1, #31
 8002a02:	b538      	push	{r3, r4, r5, lr}
 8002a04:	4605      	mov	r5, r0
 8002a06:	460c      	mov	r4, r1
 8002a08:	d904      	bls.n	8002a14 <_raise_r+0x14>
 8002a0a:	2316      	movs	r3, #22
 8002a0c:	6003      	str	r3, [r0, #0]
 8002a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a12:	bd38      	pop	{r3, r4, r5, pc}
 8002a14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002a16:	b112      	cbz	r2, 8002a1e <_raise_r+0x1e>
 8002a18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a1c:	b94b      	cbnz	r3, 8002a32 <_raise_r+0x32>
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f000 f830 	bl	8002a84 <_getpid_r>
 8002a24:	4622      	mov	r2, r4
 8002a26:	4601      	mov	r1, r0
 8002a28:	4628      	mov	r0, r5
 8002a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a2e:	f000 b817 	b.w	8002a60 <_kill_r>
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d00a      	beq.n	8002a4c <_raise_r+0x4c>
 8002a36:	1c59      	adds	r1, r3, #1
 8002a38:	d103      	bne.n	8002a42 <_raise_r+0x42>
 8002a3a:	2316      	movs	r3, #22
 8002a3c:	6003      	str	r3, [r0, #0]
 8002a3e:	2001      	movs	r0, #1
 8002a40:	e7e7      	b.n	8002a12 <_raise_r+0x12>
 8002a42:	2100      	movs	r1, #0
 8002a44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4798      	blx	r3
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e7e0      	b.n	8002a12 <_raise_r+0x12>

08002a50 <raise>:
 8002a50:	4b02      	ldr	r3, [pc, #8]	@ (8002a5c <raise+0xc>)
 8002a52:	4601      	mov	r1, r0
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	f7ff bfd3 	b.w	8002a00 <_raise_r>
 8002a5a:	bf00      	nop
 8002a5c:	20000018 	.word	0x20000018

08002a60 <_kill_r>:
 8002a60:	b538      	push	{r3, r4, r5, lr}
 8002a62:	4d07      	ldr	r5, [pc, #28]	@ (8002a80 <_kill_r+0x20>)
 8002a64:	2300      	movs	r3, #0
 8002a66:	4604      	mov	r4, r0
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	602b      	str	r3, [r5, #0]
 8002a6e:	f7fd ff17 	bl	80008a0 <_kill>
 8002a72:	1c43      	adds	r3, r0, #1
 8002a74:	d102      	bne.n	8002a7c <_kill_r+0x1c>
 8002a76:	682b      	ldr	r3, [r5, #0]
 8002a78:	b103      	cbz	r3, 8002a7c <_kill_r+0x1c>
 8002a7a:	6023      	str	r3, [r4, #0]
 8002a7c:	bd38      	pop	{r3, r4, r5, pc}
 8002a7e:	bf00      	nop
 8002a80:	200001dc 	.word	0x200001dc

08002a84 <_getpid_r>:
 8002a84:	f7fd bf04 	b.w	8000890 <_getpid>

08002a88 <_sbrk_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4d06      	ldr	r5, [pc, #24]	@ (8002aa4 <_sbrk_r+0x1c>)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	4604      	mov	r4, r0
 8002a90:	4608      	mov	r0, r1
 8002a92:	602b      	str	r3, [r5, #0]
 8002a94:	f7fd ff8c 	bl	80009b0 <_sbrk>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d102      	bne.n	8002aa2 <_sbrk_r+0x1a>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	b103      	cbz	r3, 8002aa2 <_sbrk_r+0x1a>
 8002aa0:	6023      	str	r3, [r4, #0]
 8002aa2:	bd38      	pop	{r3, r4, r5, pc}
 8002aa4:	200001dc 	.word	0x200001dc

08002aa8 <__swhatbuf_r>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	460c      	mov	r4, r1
 8002aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ab0:	2900      	cmp	r1, #0
 8002ab2:	b096      	sub	sp, #88	@ 0x58
 8002ab4:	4615      	mov	r5, r2
 8002ab6:	461e      	mov	r6, r3
 8002ab8:	da0d      	bge.n	8002ad6 <__swhatbuf_r+0x2e>
 8002aba:	89a3      	ldrh	r3, [r4, #12]
 8002abc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	bf14      	ite	ne
 8002ac6:	2340      	movne	r3, #64	@ 0x40
 8002ac8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002acc:	2000      	movs	r0, #0
 8002ace:	6031      	str	r1, [r6, #0]
 8002ad0:	602b      	str	r3, [r5, #0]
 8002ad2:	b016      	add	sp, #88	@ 0x58
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
 8002ad6:	466a      	mov	r2, sp
 8002ad8:	f000 f848 	bl	8002b6c <_fstat_r>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	dbec      	blt.n	8002aba <__swhatbuf_r+0x12>
 8002ae0:	9901      	ldr	r1, [sp, #4]
 8002ae2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002ae6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002aea:	4259      	negs	r1, r3
 8002aec:	4159      	adcs	r1, r3
 8002aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002af2:	e7eb      	b.n	8002acc <__swhatbuf_r+0x24>

08002af4 <__smakebuf_r>:
 8002af4:	898b      	ldrh	r3, [r1, #12]
 8002af6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002af8:	079d      	lsls	r5, r3, #30
 8002afa:	4606      	mov	r6, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	d507      	bpl.n	8002b10 <__smakebuf_r+0x1c>
 8002b00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	6123      	str	r3, [r4, #16]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	6163      	str	r3, [r4, #20]
 8002b0c:	b003      	add	sp, #12
 8002b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b10:	ab01      	add	r3, sp, #4
 8002b12:	466a      	mov	r2, sp
 8002b14:	f7ff ffc8 	bl	8002aa8 <__swhatbuf_r>
 8002b18:	9f00      	ldr	r7, [sp, #0]
 8002b1a:	4605      	mov	r5, r0
 8002b1c:	4639      	mov	r1, r7
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f7ff fad2 	bl	80020c8 <_malloc_r>
 8002b24:	b948      	cbnz	r0, 8002b3a <__smakebuf_r+0x46>
 8002b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b2a:	059a      	lsls	r2, r3, #22
 8002b2c:	d4ee      	bmi.n	8002b0c <__smakebuf_r+0x18>
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	81a3      	strh	r3, [r4, #12]
 8002b38:	e7e2      	b.n	8002b00 <__smakebuf_r+0xc>
 8002b3a:	89a3      	ldrh	r3, [r4, #12]
 8002b3c:	6020      	str	r0, [r4, #0]
 8002b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b42:	81a3      	strh	r3, [r4, #12]
 8002b44:	9b01      	ldr	r3, [sp, #4]
 8002b46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002b4a:	b15b      	cbz	r3, 8002b64 <__smakebuf_r+0x70>
 8002b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b50:	4630      	mov	r0, r6
 8002b52:	f000 f81d 	bl	8002b90 <_isatty_r>
 8002b56:	b128      	cbz	r0, 8002b64 <__smakebuf_r+0x70>
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	81a3      	strh	r3, [r4, #12]
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	431d      	orrs	r5, r3
 8002b68:	81a5      	strh	r5, [r4, #12]
 8002b6a:	e7cf      	b.n	8002b0c <__smakebuf_r+0x18>

08002b6c <_fstat_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4d07      	ldr	r5, [pc, #28]	@ (8002b8c <_fstat_r+0x20>)
 8002b70:	2300      	movs	r3, #0
 8002b72:	4604      	mov	r4, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	f7fd fef1 	bl	8000960 <_fstat>
 8002b7e:	1c43      	adds	r3, r0, #1
 8002b80:	d102      	bne.n	8002b88 <_fstat_r+0x1c>
 8002b82:	682b      	ldr	r3, [r5, #0]
 8002b84:	b103      	cbz	r3, 8002b88 <_fstat_r+0x1c>
 8002b86:	6023      	str	r3, [r4, #0]
 8002b88:	bd38      	pop	{r3, r4, r5, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200001dc 	.word	0x200001dc

08002b90 <_isatty_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4d06      	ldr	r5, [pc, #24]	@ (8002bac <_isatty_r+0x1c>)
 8002b94:	2300      	movs	r3, #0
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	602b      	str	r3, [r5, #0]
 8002b9c:	f7fd fef0 	bl	8000980 <_isatty>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d102      	bne.n	8002baa <_isatty_r+0x1a>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	b103      	cbz	r3, 8002baa <_isatty_r+0x1a>
 8002ba8:	6023      	str	r3, [r4, #0]
 8002baa:	bd38      	pop	{r3, r4, r5, pc}
 8002bac:	200001dc 	.word	0x200001dc

08002bb0 <_init>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr

08002bbc <_fini>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	bf00      	nop
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr
