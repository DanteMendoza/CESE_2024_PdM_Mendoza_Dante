
Practica_5A_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080037a8  080037a8  000047a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  00005078  2**0
                  CONTENTS
  4 .ARM          00000008  08003950  08003950  00004950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003958  08003958  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00004958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0000495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003960  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005078  2**0
                  CONTENTS
 10 .bss          000001c8  20000078  20000078  00005078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  00005078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000091c8  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d46  00000000  00000000  0000e270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0000ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000649  00000000  00000000  00010828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bc3  00000000  00000000  00010e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e604  00000000  00000000  00037a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e36b0  00000000  00000000  00046038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001296e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002910  00000000  00000000  0012972c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0012c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003790 	.word	0x08003790

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08003790 	.word	0x08003790

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <buttonPressed>:
/* Initialize BSP PB for BUTTON_USER */
/* UART handler declaration */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

void buttonPressed() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	// Lógica para encender el LED
	isButtonPressed = true;
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <buttonPressed+0x24>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
	BSP_LED_On(ledUser);
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <buttonPressed+0x28>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fa08 	bl	80009a4 <BSP_LED_On>
	uartSendString((uint8_t*) "El boton ha sido presionado\r\n");
 8000594:	4805      	ldr	r0, [pc, #20]	@ (80005ac <buttonPressed+0x2c>)
 8000596:	f000 f969 	bl	800086c <uartSendString>
	printf("BOTON PRESIONADO \n\r");
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <buttonPressed+0x30>)
 800059c:	f002 fa32 	bl	8002a04 <iprintf>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000a4 	.word	0x200000a4
 80005a8:	200000a5 	.word	0x200000a5
 80005ac:	080037a8 	.word	0x080037a8
 80005b0:	080037c8 	.word	0x080037c8

080005b4 <buttonReleased>:

void buttonReleased() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	// Lógica para apagar el LED
	isButtonPressed = false;
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <buttonReleased+0x20>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	BSP_LED_Off(ledUser);
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <buttonReleased+0x24>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fa08 	bl	80009d8 <BSP_LED_Off>
	uartSendString((uint8_t*) "El boton ha sido soltado\r\n");
 80005c8:	4804      	ldr	r0, [pc, #16]	@ (80005dc <buttonReleased+0x28>)
 80005ca:	f000 f94f 	bl	800086c <uartSendString>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000a4 	.word	0x200000a4
 80005d8:	200000a5 	.word	0x200000a5
 80005dc:	080037dc 	.word	0x080037dc

080005e0 <readKey>:

/**
 * Lee el estado de la variable isButtonPressed,
 * y luego la pone como falso.
 */
bool_t readKey() {
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	if (isButtonPressed) {
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <readKey+0x24>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d004      	beq.n	80005f6 <readKey+0x16>
		isButtonPressed = false;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <readKey+0x24>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]

		return true;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <readKey+0x18>
	}

	return false;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200000a4 	.word	0x200000a4

08000608 <debounceConfig>:

// Funcion que recibe el LED y el boton de usuario.
void debounceConfig(Led_TypeDef led, Button_TypeDef button) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]
	ledUser = led; // LED azul por defecto de la placa.
 8000618:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <debounceConfig+0x28>)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	7013      	strb	r3, [r2, #0]
	buttonUser = button; // Boton azul de usuario de la placa.
 800061e:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <debounceConfig+0x2c>)
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	7013      	strb	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	200000a5 	.word	0x200000a5
 8000634:	200000a6 	.word	0x200000a6

08000638 <debounceFSM_init>:

void debounceFSM_init() {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	uartInit();
 800063c:	f000 f8d8 	bl	80007f0 <uartInit>
	debounceState = BUTTON_UP;
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <debounceFSM_init+0x1c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, DELAY_TIME);
 8000646:	2328      	movs	r3, #40	@ 0x28
 8000648:	4619      	mov	r1, r3
 800064a:	4803      	ldr	r0, [pc, #12]	@ (8000658 <debounceFSM_init+0x20>)
 800064c:	f000 f888 	bl	8000760 <delayInit>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000094 	.word	0x20000094
 8000658:	20000098 	.word	0x20000098

0800065c <debounceFSM_update>:
 * Lee la entrada y actualiza el estado
 * actuando en consecuencia.
 * Cuando se detecta que se ha presionado el botón
 * llama a la función buttonPressed.
 */
void debounceFSM_update() {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	isButtonPressed = (bool_t) BSP_PB_GetState(buttonUser);
 8000660:	4b3b      	ldr	r3, [pc, #236]	@ (8000750 <debounceFSM_update+0xf4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fa41 	bl	8000aec <BSP_PB_GetState>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	bf14      	ite	ne
 8000670:	2301      	movne	r3, #1
 8000672:	2300      	moveq	r3, #0
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b37      	ldr	r3, [pc, #220]	@ (8000754 <debounceFSM_update+0xf8>)
 8000678:	701a      	strb	r2, [r3, #0]

	// Leer las entradas y actualizar la MEF
	switch (debounceState) {
 800067a:	4b37      	ldr	r3, [pc, #220]	@ (8000758 <debounceFSM_update+0xfc>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d85a      	bhi.n	8000738 <debounceFSM_update+0xdc>
 8000682:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <debounceFSM_update+0x2c>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	08000699 	.word	0x08000699
 800068c:	080006b3 	.word	0x080006b3
 8000690:	080006e1 	.word	0x080006e1
 8000694:	08000701 	.word	0x08000701
	case BUTTON_UP:
		// Lógica para detectar flanco descendente
		if (isButtonPressed) {
 8000698:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <debounceFSM_update+0xf8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d04e      	beq.n	800073e <debounceFSM_update+0xe2>
			debounceState = BUTTON_FALLING;
 80006a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <debounceFSM_update+0xfc>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
			delayInit(&debounceDelay, DELAY_TIME);
 80006a6:	2328      	movs	r3, #40	@ 0x28
 80006a8:	4619      	mov	r1, r3
 80006aa:	482c      	ldr	r0, [pc, #176]	@ (800075c <debounceFSM_update+0x100>)
 80006ac:	f000 f858 	bl	8000760 <delayInit>
		}
		break;
 80006b0:	e045      	b.n	800073e <debounceFSM_update+0xe2>
	case BUTTON_FALLING:
		// Lógica para detectar transición a BUTTON_DOWN
		if (delayRead(&debounceDelay)) {
 80006b2:	482a      	ldr	r0, [pc, #168]	@ (800075c <debounceFSM_update+0x100>)
 80006b4:	f000 f865 	bl	8000782 <delayRead>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d041      	beq.n	8000742 <debounceFSM_update+0xe6>
			if (isButtonPressed) {
 80006be:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <debounceFSM_update+0xf8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d008      	beq.n	80006d8 <debounceFSM_update+0x7c>
				buttonPressed();
 80006c6:	f7ff ff5b 	bl	8000580 <buttonPressed>
				isButtonPressed = true;
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <debounceFSM_update+0xf8>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
				debounceState = BUTTON_DOWN;
 80006d0:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <debounceFSM_update+0xfc>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	701a      	strb	r2, [r3, #0]
			} else {
				// Lógica para volver a BUTTON_UP si no se detecta la transición
				debounceState = BUTTON_UP;
			}
		}
		break;
 80006d6:	e034      	b.n	8000742 <debounceFSM_update+0xe6>
				debounceState = BUTTON_UP;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <debounceFSM_update+0xfc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
		break;
 80006de:	e030      	b.n	8000742 <debounceFSM_update+0xe6>
	case BUTTON_DOWN:
		// Lógica para detectar flanco ascendente
		if (!isButtonPressed) {
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <debounceFSM_update+0xf8>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f083 0301 	eor.w	r3, r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d02b      	beq.n	8000746 <debounceFSM_update+0xea>
			debounceState = BUTTON_RAISING;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <debounceFSM_update+0xfc>)
 80006f0:	2203      	movs	r2, #3
 80006f2:	701a      	strb	r2, [r3, #0]
			delayInit(&debounceDelay, DELAY_TIME);
 80006f4:	2328      	movs	r3, #40	@ 0x28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4818      	ldr	r0, [pc, #96]	@ (800075c <debounceFSM_update+0x100>)
 80006fa:	f000 f831 	bl	8000760 <delayInit>
		}
		break;
 80006fe:	e022      	b.n	8000746 <debounceFSM_update+0xea>
	case BUTTON_RAISING:
		// Lógica para detectar transición a BUTTON_UP
		if (delayRead(&debounceDelay)) {
 8000700:	4816      	ldr	r0, [pc, #88]	@ (800075c <debounceFSM_update+0x100>)
 8000702:	f000 f83e 	bl	8000782 <delayRead>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d01e      	beq.n	800074a <debounceFSM_update+0xee>
			debounceState = BUTTON_UP;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <debounceFSM_update+0xfc>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
			buttonReleased(); // Evento de Button Released
 8000712:	f7ff ff4f 	bl	80005b4 <buttonReleased>

			if (!isButtonPressed) /* Button released event */
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <debounceFSM_update+0xf8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	f083 0301 	eor.w	r3, r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d005      	beq.n	8000730 <debounceFSM_update+0xd4>
			{
				buttonReleased();
 8000724:	f7ff ff46 	bl	80005b4 <buttonReleased>
				debounceState = BUTTON_UP;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <debounceFSM_update+0xfc>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
			} else {
				debounceState = BUTTON_DOWN;
			}
		}
		break;
 800072e:	e00c      	b.n	800074a <debounceFSM_update+0xee>
				debounceState = BUTTON_DOWN;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <debounceFSM_update+0xfc>)
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
		break;
 8000736:	e008      	b.n	800074a <debounceFSM_update+0xee>
	default:
		// Manejar cualquier otro estado no definido
		debounceFSM_init();
 8000738:	f7ff ff7e 	bl	8000638 <debounceFSM_init>
		break;
 800073c:	e006      	b.n	800074c <debounceFSM_update+0xf0>
		break;
 800073e:	bf00      	nop
 8000740:	e004      	b.n	800074c <debounceFSM_update+0xf0>
		break;
 8000742:	bf00      	nop
 8000744:	e002      	b.n	800074c <debounceFSM_update+0xf0>
		break;
 8000746:	bf00      	nop
 8000748:	e000      	b.n	800074c <debounceFSM_update+0xf0>
		break;
 800074a:	bf00      	nop
	}
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200000a6 	.word	0x200000a6
 8000754:	200000a4 	.word	0x200000a4
 8000758:	20000094 	.word	0x20000094
 800075c:	20000098 	.word	0x20000098

08000760 <delayInit>:

/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
// Esta función sirve para inicializar la estructura que maneja	el delay no bloqueante.
void delayInit(delay_t *delay, tick_t duration) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	721a      	strb	r2, [r3, #8]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <delayRead>:
 *	ha completado la duración requerida. En caso afirmativo,
 *	devuelve Verdadero, caso contrario devuelve Falso.
 *	Si es la primera vez que se llama a la función,
 *  se pone delay->running = Verdadero.
 */
bool_t delayRead(delay_t *delay) {
 8000782:	b590      	push	{r4, r7, lr}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	if (!delay->running) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7a1b      	ldrb	r3, [r3, #8]
 800078e:	f083 0301 	eor.w	r3, r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d009      	beq.n	80007ac <delayRead+0x2a>
		// Tomar marca de tiempo
		delay->startTime = HAL_GetTick();
 8000798:	f000 fb4c 	bl	8000e34 <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]
		// Cambiar el flag a 'true'
		delay->running = true;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	721a      	strb	r2, [r3, #8]
		return false;
 80007a8:	2300      	movs	r3, #0
 80007aa:	e00f      	b.n	80007cc <delayRead+0x4a>
	}

	if (delay->duration <= (HAL_GetTick() - delay->startTime)) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685c      	ldr	r4, [r3, #4]
 80007b0:	f000 fb40 	bl	8000e34 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	429c      	cmp	r4, r3
 80007be:	d804      	bhi.n	80007ca <delayRead+0x48>
		delay->running = false;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	721a      	strb	r2, [r3, #8]
		return true;  // El tiempo se cumplió.
 80007c6:	2301      	movs	r3, #1
 80007c8:	e000      	b.n	80007cc <delayRead+0x4a>
	}

	return false;  // El tiempo no se ha cumplido.
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <delayWrite>:

// Esta función se utiliza para cambiar la duración de un delay ya inicializado.
void delayWrite(delay_t *delay, tick_t duration) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	605a      	str	r2, [r3, #4]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <uartInit>:
#include <assert.h>
#include "main.h"

UART_HandleTypeDef huart;

bool_t uartInit() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09a      	sub	sp, #104	@ 0x68
 80007f4:	af00      	add	r7, sp, #0
    // Configurar los parámetros de la UART (baudrate, etc.)
    huart.Instance = USARTx; // Definido en main.h
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <uartInit+0x70>)
 80007f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000864 <uartInit+0x74>)
 80007fa:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = 115200;
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <uartInit+0x70>)
 80007fe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000802:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <uartInit+0x70>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <uartInit+0x70>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <uartInit+0x70>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <uartInit+0x70>)
 8000818:	220c      	movs	r2, #12
 800081a:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE; // "handshaking"
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <uartInit+0x70>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <uartInit+0x70>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart) != HAL_OK) {
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <uartInit+0x70>)
 800082a:	f001 fb5b 	bl	8001ee4 <HAL_UART_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <uartInit+0x48>
        // Manejar error de inicialización
        return false;
 8000834:	2300      	movs	r3, #0
 8000836:	e00e      	b.n	8000856 <uartInit+0x66>
    }

    // Imprimir mensaje con los parámetros de configuración
    char config_msg[] =
 8000838:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <uartInit+0x78>)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4611      	mov	r1, r2
 800083e:	2261      	movs	r2, #97	@ 0x61
 8000840:	4618      	mov	r0, r3
 8000842:	f002 f9b0 	bl	8002ba6 <memcpy>
            "Parity: None\r\n"
            "Bits: 8\r\n"
            "Stopbits: 1\r\n"
            "Flow control: None\r\n"; // "handshaking"
    //printf("UART initialized with baudrate: %lu\r\n", huart.Init.BaudRate);
    HAL_UART_Transmit(&huart, (uint8_t*)config_msg, sizeof(config_msg), HAL_MAX_DELAY);
 8000846:	1d39      	adds	r1, r7, #4
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	2261      	movs	r2, #97	@ 0x61
 800084e:	4804      	ldr	r0, [pc, #16]	@ (8000860 <uartInit+0x70>)
 8000850:	f001 fb95 	bl	8001f7e <HAL_UART_Transmit>

    return true;
 8000854:	2301      	movs	r3, #1
}
 8000856:	4618      	mov	r0, r3
 8000858:	3768      	adds	r7, #104	@ 0x68
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000a8 	.word	0x200000a8
 8000864:	40004800 	.word	0x40004800
 8000868:	080037f8 	.word	0x080037f8

0800086c <uartSendString>:

void uartSendString(uint8_t *pstring) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    // Implementación de la función para enviar el string completo
	assert(pstring);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d105      	bne.n	8000886 <uartSendString+0x1a>
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <uartSendString+0x48>)
 800087c:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <uartSendString+0x4c>)
 800087e:	2130      	movs	r1, #48	@ 0x30
 8000880:	480e      	ldr	r0, [pc, #56]	@ (80008bc <uartSendString+0x50>)
 8000882:	f001 ffcd 	bl	8002820 <__assert_func>
	uint8_t i = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
	while (pstring[i] != '\0') i++;
 800088a:	e002      	b.n	8000892 <uartSendString+0x26>
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	3301      	adds	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1f6      	bne.n	800088c <uartSendString+0x20>
	uartSendStringSize(pstring, i);
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f80b 	bl	80008c0 <uartSendStringSize>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	0800385c 	.word	0x0800385c
 80008b8:	0800389c 	.word	0x0800389c
 80008bc:	08003864 	.word	0x08003864

080008c0 <uartSendStringSize>:

void uartSendStringSize(uint8_t *pstring, uint16_t size) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	807b      	strh	r3, [r7, #2]
    // Implementación de la función para enviar el string con tamaño específico
	assert(pstring);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d105      	bne.n	80008de <uartSendStringSize+0x1e>
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <uartSendStringSize+0x34>)
 80008d4:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <uartSendStringSize+0x38>)
 80008d6:	2138      	movs	r1, #56	@ 0x38
 80008d8:	4808      	ldr	r0, [pc, #32]	@ (80008fc <uartSendStringSize+0x3c>)
 80008da:	f001 ffa1 	bl	8002820 <__assert_func>
	HAL_UART_Transmit(&huart, pstring, size, HAL_MAX_DELAY);
 80008de:	887a      	ldrh	r2, [r7, #2]
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	4806      	ldr	r0, [pc, #24]	@ (8000900 <uartSendStringSize+0x40>)
 80008e8:	f001 fb49 	bl	8001f7e <HAL_UART_Transmit>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	0800385c 	.word	0x0800385c
 80008f8:	080038ac 	.word	0x080038ac
 80008fc:	08003864 	.word	0x08003864
 8000900:	200000a8 	.word	0x200000a8

08000904 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10e      	bne.n	8000932 <BSP_LED_Init+0x2e>
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <BSP_LED_Init+0x94>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	4a1e      	ldr	r2, [pc, #120]	@ (8000998 <BSP_LED_Init+0x94>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	6313      	str	r3, [r2, #48]	@ 0x30
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <BSP_LED_Init+0x94>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	e00d      	b.n	800094e <BSP_LED_Init+0x4a>
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <BSP_LED_Init+0x94>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <BSP_LED_Init+0x94>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <BSP_LED_Init+0x94>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4a12      	ldr	r2, [pc, #72]	@ (800099c <BSP_LED_Init+0x98>)
 8000952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a0e      	ldr	r2, [pc, #56]	@ (80009a0 <BSP_LED_Init+0x9c>)
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	f107 0214 	add.w	r2, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fb7c 	bl	8001070 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4a09      	ldr	r2, [pc, #36]	@ (80009a0 <BSP_LED_Init+0x9c>)
 800097c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4a06      	ldr	r2, [pc, #24]	@ (800099c <BSP_LED_Init+0x98>)
 8000984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000988:	2200      	movs	r2, #0
 800098a:	4619      	mov	r1, r3
 800098c:	f000 fd34 	bl	80013f8 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	080038c0 	.word	0x080038c0
 80009a0:	20000000 	.word	0x20000000

080009a4 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <BSP_LED_On+0x2c>)
 80009b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <BSP_LED_On+0x30>)
 80009ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f000 fd19 	bl	80013f8 <HAL_GPIO_WritePin>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	080038c0 	.word	0x080038c0

080009d8 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <BSP_LED_Off+0x2c>)
 80009e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a06      	ldr	r2, [pc, #24]	@ (8000a08 <BSP_LED_Off+0x30>)
 80009ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	f000 fcff 	bl	80013f8 <HAL_GPIO_WritePin>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000
 8000a08:	080038c0 	.word	0x080038c0

08000a0c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4a07      	ldr	r2, [pc, #28]	@ (8000a38 <BSP_LED_Toggle+0x2c>)
 8000a1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4906      	ldr	r1, [pc, #24]	@ (8000a3c <BSP_LED_Toggle+0x30>)
 8000a22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4610      	mov	r0, r2
 8000a2a:	f000 fcfe 	bl	800142a <HAL_GPIO_TogglePin>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	080038c0 	.word	0x080038c0

08000a40 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <BSP_PB_Init+0xa4>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	4a22      	ldr	r2, [pc, #136]	@ (8000ae4 <BSP_PB_Init+0xa4>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a60:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <BSP_PB_Init+0xa4>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d112      	bne.n	8000a98 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	4a18      	ldr	r2, [pc, #96]	@ (8000ae8 <BSP_PB_Init+0xa8>)
 8000a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8c:	f107 020c 	add.w	r2, r7, #12
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 faec 	bl	8001070 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d11d      	bne.n	8000ada <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000aa8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000aac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <BSP_PB_Init+0xa8>)
 8000ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab6:	f107 020c 	add.w	r2, r7, #12
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fad7 	bl	8001070 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000ac2:	2328      	movs	r3, #40	@ 0x28
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fa99 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000ad0:	2328      	movs	r3, #40	@ 0x28
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fab0 	bl	800103a <HAL_NVIC_EnableIRQ>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	2000000c 	.word	0x2000000c

08000aec <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4a06      	ldr	r2, [pc, #24]	@ (8000b14 <BSP_PB_GetState+0x28>)
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fc5f 	bl	80013c8 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000000c 	.word	0x2000000c

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <SystemInit+0x60>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a15      	ldr	r2, [pc, #84]	@ (8000b78 <SystemInit+0x60>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <SystemInit+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <SystemInit+0x64>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b38:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <SystemInit+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <SystemInit+0x64>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <SystemInit+0x64>)
 8000b44:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <SystemInit+0x64>)
 8000b50:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <SystemInit+0x68>)
 8000b52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <SystemInit+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <SystemInit+0x64>)
 8000b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <SystemInit+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SystemInit+0x60>)
 8000b68:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b6c:	609a      	str	r2, [r3, #8]
#endif
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	24003010 	.word	0x24003010

08000b84 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b96:	bf00      	nop
 8000b98:	e7fd      	b.n	8000b96 <HardFault_Handler+0x4>

08000b9a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b9e:	bf00      	nop
 8000ba0:	e7fd      	b.n	8000b9e <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ba6:	bf00      	nop
 8000ba8:	e7fd      	b.n	8000ba6 <BusFault_Handler+0x4>

08000baa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000bae:	bf00      	nop
 8000bb0:	e7fd      	b.n	8000bae <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000be0:	f000 f914 	bl	8000e0c <HAL_IncTick>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	return 1;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_kill>:

int _kill(int pid, int sig)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c02:	f001 ffa3 	bl	8002b4c <__errno>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2216      	movs	r2, #22
 8000c0a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_exit>:

void _exit (int status)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ffe7 	bl	8000bf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c2a:	bf00      	nop
 8000c2c:	e7fd      	b.n	8000c2a <_exit+0x12>

08000c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e00a      	b.n	8000c56 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c40:	f3af 8000 	nop.w
 8000c44:	4601      	mov	r1, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	60ba      	str	r2, [r7, #8]
 8000c4c:	b2ca      	uxtb	r2, r1
 8000c4e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	dbf0      	blt.n	8000c40 <_read+0x12>
	}

return len;
 8000c5e:	687b      	ldr	r3, [r7, #4]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e009      	b.n	8000c8e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	60ba      	str	r2, [r7, #8]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	dbf1      	blt.n	8000c7a <_write+0x12>
	}
	return len;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <_close>:

int _close(int file)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	return -1;
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc8:	605a      	str	r2, [r3, #4]
	return 0;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_isatty>:

int _isatty(int file)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	return 1;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
	return 0;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f001 ff08 	bl	8002b4c <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20030000 	.word	0x20030000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	200000ec 	.word	0x200000ec
 8000d70:	20000240 	.word	0x20000240

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_Init+0x34>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_Init+0x34>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_Init+0x34>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	@ (8000da8 <HAL_Init+0x34>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f92b 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	200f      	movs	r0, #15
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f000 fbb2 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f943 	bl	8001056 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f90b 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000010 	.word	0x20000010
 8000e04:	20000018 	.word	0x20000018
 8000e08:	20000014 	.word	0x20000014

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000018 	.word	0x20000018
 8000e30:	200000f0 	.word	0x200000f0

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200000f0 	.word	0x200000f0

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	@ (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	@ (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	@ 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	@ 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff29 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff3e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff31 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e177      	b.n	800137c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 8166 	bne.w	8001376 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d005      	beq.n	80010c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d130      	bne.n	8001124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f003 0201 	and.w	r2, r3, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b03      	cmp	r3, #3
 800112e:	d017      	beq.n	8001160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	69b9      	ldr	r1, [r7, #24]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80c0 	beq.w	8001376 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b66      	ldr	r3, [pc, #408]	@ (8001394 <HAL_GPIO_Init+0x324>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a65      	ldr	r2, [pc, #404]	@ (8001394 <HAL_GPIO_Init+0x324>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b63      	ldr	r3, [pc, #396]	@ (8001394 <HAL_GPIO_Init+0x324>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001212:	4a61      	ldr	r2, [pc, #388]	@ (8001398 <HAL_GPIO_Init+0x328>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a58      	ldr	r2, [pc, #352]	@ (800139c <HAL_GPIO_Init+0x32c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d037      	beq.n	80012ae <HAL_GPIO_Init+0x23e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a57      	ldr	r2, [pc, #348]	@ (80013a0 <HAL_GPIO_Init+0x330>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d031      	beq.n	80012aa <HAL_GPIO_Init+0x23a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a56      	ldr	r2, [pc, #344]	@ (80013a4 <HAL_GPIO_Init+0x334>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d02b      	beq.n	80012a6 <HAL_GPIO_Init+0x236>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a55      	ldr	r2, [pc, #340]	@ (80013a8 <HAL_GPIO_Init+0x338>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x232>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a54      	ldr	r2, [pc, #336]	@ (80013ac <HAL_GPIO_Init+0x33c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x22e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a53      	ldr	r2, [pc, #332]	@ (80013b0 <HAL_GPIO_Init+0x340>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x22a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a52      	ldr	r2, [pc, #328]	@ (80013b4 <HAL_GPIO_Init+0x344>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x226>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a51      	ldr	r2, [pc, #324]	@ (80013b8 <HAL_GPIO_Init+0x348>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x222>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a50      	ldr	r2, [pc, #320]	@ (80013bc <HAL_GPIO_Init+0x34c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x21e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4f      	ldr	r2, [pc, #316]	@ (80013c0 <HAL_GPIO_Init+0x350>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x21a>
 8001286:	2309      	movs	r3, #9
 8001288:	e012      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 800128a:	230a      	movs	r3, #10
 800128c:	e010      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 800128e:	2308      	movs	r3, #8
 8001290:	e00e      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 8001292:	2307      	movs	r3, #7
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 8001296:	2306      	movs	r3, #6
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x240>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	@ (8001398 <HAL_GPIO_Init+0x328>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ce:	4b3d      	ldr	r3, [pc, #244]	@ (80013c4 <HAL_GPIO_Init+0x354>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f2:	4a34      	ldr	r2, [pc, #208]	@ (80013c4 <HAL_GPIO_Init+0x354>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f8:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <HAL_GPIO_Init+0x354>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131c:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <HAL_GPIO_Init+0x354>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001322:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <HAL_GPIO_Init+0x354>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001346:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <HAL_GPIO_Init+0x354>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <HAL_GPIO_Init+0x354>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001370:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <HAL_GPIO_Init+0x354>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae84 	bls.w	800108c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40022000 	.word	0x40022000
 80013c0:	40022400 	.word	0x40022400
 80013c4:	40013c00 	.word	0x40013c00

080013c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e001      	b.n	80013ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800142a:	b480      	push	{r7}
 800142c:	b085      	sub	sp, #20
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800143c:	887a      	ldrh	r2, [r7, #2]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	041a      	lsls	r2, r3, #16
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43d9      	mvns	r1, r3
 8001448:	887b      	ldrh	r3, [r7, #2]
 800144a:	400b      	ands	r3, r1
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6313      	str	r3, [r2, #48]	@ 0x30
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6313      	str	r3, [r2, #48]	@ 0x30
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	4a14      	ldr	r2, [pc, #80]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 80014aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_UART_MspInit+0x9c>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80014bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80014ce:	2307      	movs	r3, #7
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4809      	ldr	r0, [pc, #36]	@ (8001500 <HAL_UART_MspInit+0xa0>)
 80014da:	f7ff fdc9 	bl	8001070 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80014de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80014e4:	2307      	movs	r3, #7
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4804      	ldr	r0, [pc, #16]	@ (8001500 <HAL_UART_MspInit+0xa0>)
 80014f0:	f7ff fdbe 	bl	8001070 <HAL_GPIO_Init>
}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	@ 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020c00 	.word	0x40020c00

08001504 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001540:	f7ff fc78 	bl	8000e34 <HAL_GetTick>
 8001544:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001546:	e009      	b.n	800155c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001548:	f7ff fc74 	bl	8000e34 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001556:	d901      	bls.n	800155c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e01f      	b.n	800159c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800155c:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <HAL_PWREx_EnableOverDrive+0x98>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001568:	d1ee      	bne.n	8001548 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001570:	f7ff fc60 	bl	8000e34 <HAL_GetTick>
 8001574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001576:	e009      	b.n	800158c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001578:	f7ff fc5c 	bl	8000e34 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001586:	d901      	bls.n	800158c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e007      	b.n	800159c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <HAL_PWREx_EnableOverDrive+0x98>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001594:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001598:	d1ee      	bne.n	8001578 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	420e0040 	.word	0x420e0040
 80015ac:	40007000 	.word	0x40007000
 80015b0:	420e0044 	.word	0x420e0044

080015b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e267      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d075      	beq.n	80016be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d2:	4b88      	ldr	r3, [pc, #544]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d00c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b85      	ldr	r3, [pc, #532]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ea:	4b82      	ldr	r3, [pc, #520]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015f6:	d10b      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	4b7e      	ldr	r3, [pc, #504]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05b      	beq.n	80016bc <HAL_RCC_OscConfig+0x108>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d157      	bne.n	80016bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e242      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001618:	d106      	bne.n	8001628 <HAL_RCC_OscConfig+0x74>
 800161a:	4b76      	ldr	r3, [pc, #472]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a75      	ldr	r2, [pc, #468]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e01d      	b.n	8001664 <HAL_RCC_OscConfig+0xb0>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x98>
 8001632:	4b70      	ldr	r3, [pc, #448]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6f      	ldr	r2, [pc, #444]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b6d      	ldr	r3, [pc, #436]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6c      	ldr	r2, [pc, #432]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0xb0>
 800164c:	4b69      	ldr	r3, [pc, #420]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a68      	ldr	r2, [pc, #416]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b66      	ldr	r3, [pc, #408]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a65      	ldr	r2, [pc, #404]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 800165e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fbe2 	bl	8000e34 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff fbde 	bl	8000e34 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	@ 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e207      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0xc0>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fbce 	bl	8000e34 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fbca 	bl	8000e34 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	@ 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1f3      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	4b51      	ldr	r3, [pc, #324]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0xe8>
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d063      	beq.n	8001792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ca:	4b4a      	ldr	r3, [pc, #296]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d11c      	bne.n	800171c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	4b44      	ldr	r3, [pc, #272]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4b41      	ldr	r3, [pc, #260]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <HAL_RCC_OscConfig+0x152>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e1c7      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001706:	4b3b      	ldr	r3, [pc, #236]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4937      	ldr	r1, [pc, #220]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	e03a      	b.n	8001792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <HAL_RCC_OscConfig+0x244>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fb83 	bl	8000e34 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fb7f 	bl	8000e34 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e1a8      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4925      	ldr	r1, [pc, #148]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001766:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_RCC_OscConfig+0x244>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff fb62 	bl	8000e34 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001774:	f7ff fb5e 	bl	8000e34 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e187      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d036      	beq.n	800180c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d016      	beq.n	80017d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_RCC_OscConfig+0x248>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ac:	f7ff fb42 	bl	8000e34 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fb3e 	bl	8000e34 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e167      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_RCC_OscConfig+0x240>)
 80017c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x200>
 80017d2:	e01b      	b.n	800180c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <HAL_RCC_OscConfig+0x248>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff fb2b 	bl	8000e34 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	e00e      	b.n	8001800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fb27 	bl	8000e34 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d907      	bls.n	8001800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e150      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
 80017f4:	40023800 	.word	0x40023800
 80017f8:	42470000 	.word	0x42470000
 80017fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	4b88      	ldr	r3, [pc, #544]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ea      	bne.n	80017e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 8097 	beq.w	8001948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181e:	4b81      	ldr	r3, [pc, #516]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	4a7c      	ldr	r2, [pc, #496]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	@ 0x40
 800183a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	4b77      	ldr	r3, [pc, #476]	@ (8001a28 <HAL_RCC_OscConfig+0x474>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001856:	4b74      	ldr	r3, [pc, #464]	@ (8001a28 <HAL_RCC_OscConfig+0x474>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a73      	ldr	r2, [pc, #460]	@ (8001a28 <HAL_RCC_OscConfig+0x474>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff fae7 	bl	8000e34 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff fae3 	bl	8000e34 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e10c      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a28 <HAL_RCC_OscConfig+0x474>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x2ea>
 8001890:	4b64      	ldr	r3, [pc, #400]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001894:	4a63      	ldr	r2, [pc, #396]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	@ 0x70
 800189c:	e01c      	b.n	80018d8 <HAL_RCC_OscConfig+0x324>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x30c>
 80018a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0x324>
 80018c0:	4b58      	ldr	r3, [pc, #352]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c4:	4a57      	ldr	r2, [pc, #348]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80018cc:	4b55      	ldr	r3, [pc, #340]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d0:	4a54      	ldr	r2, [pc, #336]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d015      	beq.n	800190c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff faa8 	bl	8000e34 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7ff faa4 	bl	8000e34 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e0cb      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	4b49      	ldr	r3, [pc, #292]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0ee      	beq.n	80018e8 <HAL_RCC_OscConfig+0x334>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fa92 	bl	8000e34 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001912:	e00a      	b.n	800192a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fa8e 	bl	8000e34 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0b5      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ee      	bne.n	8001914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193c:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	4a38      	ldr	r2, [pc, #224]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80a1 	beq.w	8001a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001952:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b08      	cmp	r3, #8
 800195c:	d05c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d141      	bne.n	80019ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <HAL_RCC_OscConfig+0x478>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fa62 	bl	8000e34 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff fa5e 	bl	8000e34 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e087      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	041b      	lsls	r3, r3, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	061b      	lsls	r3, r3, #24
 80019b6:	491b      	ldr	r1, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <HAL_RCC_OscConfig+0x478>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fa37 	bl	8000e34 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff fa33 	bl	8000e34 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e05c      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x416>
 80019e8:	e054      	b.n	8001a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_RCC_OscConfig+0x478>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fa20 	bl	8000e34 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff fa1c 	bl	8000e34 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e045      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x444>
 8001a16:	e03d      	b.n	8001a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e038      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_RCC_OscConfig+0x4ec>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d028      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d121      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d11a      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a60:	4013      	ands	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d111      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0cc      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b68      	ldr	r3, [pc, #416]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b65      	ldr	r3, [pc, #404]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a52      	ldr	r2, [pc, #328]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d044      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d119      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b3f      	ldr	r3, [pc, #252]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e067      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b37      	ldr	r3, [pc, #220]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4934      	ldr	r1, [pc, #208]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff f94e 	bl	8000e34 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff f94a 	bl	8000e34 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e04f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d20c      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b22      	ldr	r3, [pc, #136]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	@ (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f8ae 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	080038c8 	.word	0x080038c8
 8001c68:	20000010 	.word	0x20000010
 8001c6c:	20000014 	.word	0x20000014

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c74:	b094      	sub	sp, #80	@ 0x50
 8001c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c80:	2300      	movs	r3, #0
 8001c82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c88:	4b79      	ldr	r3, [pc, #484]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d00d      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	f200 80e1 	bhi.w	8001e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca2:	e0db      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b73      	ldr	r3, [pc, #460]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001ca8:	e0db      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001caa:	4b73      	ldr	r3, [pc, #460]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cae:	e0d8      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cba:	4b6d      	ldr	r3, [pc, #436]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	2200      	movs	r2, #0
 8001cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	462b      	mov	r3, r5
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	0159      	lsls	r1, r3, #5
 8001cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf4:	0150      	lsls	r0, r2, #5
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	1a51      	subs	r1, r2, r1
 8001cfe:	6139      	str	r1, [r7, #16]
 8001d00:	4629      	mov	r1, r5
 8001d02:	eb63 0301 	sbc.w	r3, r3, r1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d14:	4659      	mov	r1, fp
 8001d16:	018b      	lsls	r3, r1, #6
 8001d18:	4651      	mov	r1, sl
 8001d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d1e:	4651      	mov	r1, sl
 8001d20:	018a      	lsls	r2, r1, #6
 8001d22:	4651      	mov	r1, sl
 8001d24:	ebb2 0801 	subs.w	r8, r2, r1
 8001d28:	4659      	mov	r1, fp
 8001d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d42:	4690      	mov	r8, r2
 8001d44:	4699      	mov	r9, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	eb18 0303 	adds.w	r3, r8, r3
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	462b      	mov	r3, r5
 8001d50:	eb49 0303 	adc.w	r3, r9, r3
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d62:	4629      	mov	r1, r5
 8001d64:	024b      	lsls	r3, r1, #9
 8001d66:	4621      	mov	r1, r4
 8001d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	024a      	lsls	r2, r1, #9
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d76:	2200      	movs	r2, #0
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d80:	f7fe fa86 	bl	8000290 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d8c:	e058      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8e:	4b38      	ldr	r3, [pc, #224]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	2200      	movs	r2, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	4611      	mov	r1, r2
 8001d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da8:	4642      	mov	r2, r8
 8001daa:	464b      	mov	r3, r9
 8001dac:	f04f 0000 	mov.w	r0, #0
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	0159      	lsls	r1, r3, #5
 8001db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dba:	0150      	lsls	r0, r2, #5
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001de0:	ebb2 040a 	subs.w	r4, r2, sl
 8001de4:	eb63 050b 	sbc.w	r5, r3, fp
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	00eb      	lsls	r3, r5, #3
 8001df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df6:	00e2      	lsls	r2, r4, #3
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	18e3      	adds	r3, r4, r3
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	464b      	mov	r3, r9
 8001e04:	eb45 0303 	adc.w	r3, r5, r3
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e16:	4629      	mov	r1, r5
 8001e18:	028b      	lsls	r3, r1, #10
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e20:	4621      	mov	r1, r4
 8001e22:	028a      	lsls	r2, r1, #10
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	61fa      	str	r2, [r7, #28]
 8001e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e34:	f7fe fa2c 	bl	8000290 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3750      	adds	r7, #80	@ 0x50
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000010 	.word	0x20000010

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a9b      	lsrs	r3, r3, #10
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	@ (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	080038d8 	.word	0x080038d8

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ec0:	f7ff ffdc 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0b5b      	lsrs	r3, r3, #13
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	@ (8001ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	080038d8 	.word	0x080038d8

08001ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e03f      	b.n	8001f76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff faa8 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2224      	movs	r2, #36	@ 0x24
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f929 	bl	8002180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b08a      	sub	sp, #40	@ 0x28
 8001f82:	af02      	add	r7, sp, #8
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d17c      	bne.n	8002098 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <HAL_UART_Transmit+0x2c>
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e075      	b.n	800209a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_UART_Transmit+0x3e>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e06e      	b.n	800209a <HAL_UART_Transmit+0x11c>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2221      	movs	r2, #33	@ 0x21
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fd2:	f7fe ff2f 	bl	8000e34 <HAL_GetTick>
 8001fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	88fa      	ldrh	r2, [r7, #6]
 8001fdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	88fa      	ldrh	r2, [r7, #6]
 8001fe2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fec:	d108      	bne.n	8002000 <HAL_UART_Transmit+0x82>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	e003      	b.n	8002008 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8002010:	e02a      	b.n	8002068 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 f840 	bl	80020a2 <UART_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e036      	b.n	800209a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10b      	bne.n	800204a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002040:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	3302      	adds	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	e007      	b.n	800205a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1cf      	bne.n	8002012 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2200      	movs	r2, #0
 800207a:	2140      	movs	r1, #64	@ 0x40
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f810 	bl	80020a2 <UART_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e006      	b.n	800209a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e000      	b.n	800209a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002098:	2302      	movs	r3, #2
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	3720      	adds	r7, #32
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b090      	sub	sp, #64	@ 0x40
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020b2:	e050      	b.n	8002156 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ba:	d04c      	beq.n	8002156 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80020c2:	f7fe feb7 	bl	8000e34 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d241      	bcs.n	8002156 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020dc:	e853 3f00 	ldrex	r3, [r3]
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80020e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	330c      	adds	r3, #12
 80020f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80020f4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020fa:	e841 2300 	strex	r3, r2, [r1]
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e5      	bne.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3314      	adds	r3, #20
 800210c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	e853 3f00 	ldrex	r3, [r3]
 8002114:	613b      	str	r3, [r7, #16]
   return(result);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3314      	adds	r3, #20
 8002124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002126:	623a      	str	r2, [r7, #32]
 8002128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212a:	69f9      	ldr	r1, [r7, #28]
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	61bb      	str	r3, [r7, #24]
   return(result);
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e5      	bne.n	8002106 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e00f      	b.n	8002176 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4013      	ands	r3, r2
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	429a      	cmp	r2, r3
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	429a      	cmp	r2, r3
 8002172:	d09f      	beq.n	80020b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3740      	adds	r7, #64	@ 0x40
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002184:	b0c0      	sub	sp, #256	@ 0x100
 8002186:	af00      	add	r7, sp, #0
 8002188:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219c:	68d9      	ldr	r1, [r3, #12]
 800219e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	ea40 0301 	orr.w	r3, r0, r1
 80021a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	431a      	orrs	r2, r3
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80021d8:	f021 010c 	bic.w	r1, r1, #12
 80021dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80021e6:	430b      	orrs	r3, r1
 80021e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80021f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021fa:	6999      	ldr	r1, [r3, #24]
 80021fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	ea40 0301 	orr.w	r3, r0, r1
 8002206:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b8f      	ldr	r3, [pc, #572]	@ (800244c <UART_SetConfig+0x2cc>)
 8002210:	429a      	cmp	r2, r3
 8002212:	d005      	beq.n	8002220 <UART_SetConfig+0xa0>
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b8d      	ldr	r3, [pc, #564]	@ (8002450 <UART_SetConfig+0x2d0>)
 800221c:	429a      	cmp	r2, r3
 800221e:	d104      	bne.n	800222a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002220:	f7ff fe4c 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002224:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002228:	e003      	b.n	8002232 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800222a:	f7ff fe33 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 800222e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800223c:	f040 810c 	bne.w	8002458 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002244:	2200      	movs	r2, #0
 8002246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800224a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800224e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002252:	4622      	mov	r2, r4
 8002254:	462b      	mov	r3, r5
 8002256:	1891      	adds	r1, r2, r2
 8002258:	65b9      	str	r1, [r7, #88]	@ 0x58
 800225a:	415b      	adcs	r3, r3
 800225c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800225e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002262:	4621      	mov	r1, r4
 8002264:	eb12 0801 	adds.w	r8, r2, r1
 8002268:	4629      	mov	r1, r5
 800226a:	eb43 0901 	adc.w	r9, r3, r1
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800227a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800227e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002282:	4690      	mov	r8, r2
 8002284:	4699      	mov	r9, r3
 8002286:	4623      	mov	r3, r4
 8002288:	eb18 0303 	adds.w	r3, r8, r3
 800228c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002290:	462b      	mov	r3, r5
 8002292:	eb49 0303 	adc.w	r3, r9, r3
 8002296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800229a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80022a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80022aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80022ae:	460b      	mov	r3, r1
 80022b0:	18db      	adds	r3, r3, r3
 80022b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80022b4:	4613      	mov	r3, r2
 80022b6:	eb42 0303 	adc.w	r3, r2, r3
 80022ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80022bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80022c4:	f7fd ffe4 	bl	8000290 <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4b61      	ldr	r3, [pc, #388]	@ (8002454 <UART_SetConfig+0x2d4>)
 80022ce:	fba3 2302 	umull	r2, r3, r3, r2
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	011c      	lsls	r4, r3, #4
 80022d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022da:	2200      	movs	r2, #0
 80022dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80022e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80022e8:	4642      	mov	r2, r8
 80022ea:	464b      	mov	r3, r9
 80022ec:	1891      	adds	r1, r2, r2
 80022ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80022f0:	415b      	adcs	r3, r3
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022f8:	4641      	mov	r1, r8
 80022fa:	eb12 0a01 	adds.w	sl, r2, r1
 80022fe:	4649      	mov	r1, r9
 8002300:	eb43 0b01 	adc.w	fp, r3, r1
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002310:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002318:	4692      	mov	sl, r2
 800231a:	469b      	mov	fp, r3
 800231c:	4643      	mov	r3, r8
 800231e:	eb1a 0303 	adds.w	r3, sl, r3
 8002322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002326:	464b      	mov	r3, r9
 8002328:	eb4b 0303 	adc.w	r3, fp, r3
 800232c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800233c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002340:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002344:	460b      	mov	r3, r1
 8002346:	18db      	adds	r3, r3, r3
 8002348:	643b      	str	r3, [r7, #64]	@ 0x40
 800234a:	4613      	mov	r3, r2
 800234c:	eb42 0303 	adc.w	r3, r2, r3
 8002350:	647b      	str	r3, [r7, #68]	@ 0x44
 8002352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002356:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800235a:	f7fd ff99 	bl	8000290 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4611      	mov	r1, r2
 8002364:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <UART_SetConfig+0x2d4>)
 8002366:	fba3 2301 	umull	r2, r3, r3, r1
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2264      	movs	r2, #100	@ 0x64
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	1acb      	subs	r3, r1, r3
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800237a:	4b36      	ldr	r3, [pc, #216]	@ (8002454 <UART_SetConfig+0x2d4>)
 800237c:	fba3 2302 	umull	r2, r3, r3, r2
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002388:	441c      	add	r4, r3
 800238a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800238e:	2200      	movs	r2, #0
 8002390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002394:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002398:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800239c:	4642      	mov	r2, r8
 800239e:	464b      	mov	r3, r9
 80023a0:	1891      	adds	r1, r2, r2
 80023a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023a4:	415b      	adcs	r3, r3
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80023ac:	4641      	mov	r1, r8
 80023ae:	1851      	adds	r1, r2, r1
 80023b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80023b2:	4649      	mov	r1, r9
 80023b4:	414b      	adcs	r3, r1
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80023c4:	4659      	mov	r1, fp
 80023c6:	00cb      	lsls	r3, r1, #3
 80023c8:	4651      	mov	r1, sl
 80023ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ce:	4651      	mov	r1, sl
 80023d0:	00ca      	lsls	r2, r1, #3
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	4603      	mov	r3, r0
 80023d8:	4642      	mov	r2, r8
 80023da:	189b      	adds	r3, r3, r2
 80023dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023e0:	464b      	mov	r3, r9
 80023e2:	460a      	mov	r2, r1
 80023e4:	eb42 0303 	adc.w	r3, r2, r3
 80023e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80023f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80023fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002400:	460b      	mov	r3, r1
 8002402:	18db      	adds	r3, r3, r3
 8002404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002406:	4613      	mov	r3, r2
 8002408:	eb42 0303 	adc.w	r3, r2, r3
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002412:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002416:	f7fd ff3b 	bl	8000290 <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <UART_SetConfig+0x2d4>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2164      	movs	r1, #100	@ 0x64
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3332      	adds	r3, #50	@ 0x32
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <UART_SetConfig+0x2d4>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	f003 0207 	and.w	r2, r3, #7
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4422      	add	r2, r4
 8002446:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002448:	e106      	b.n	8002658 <UART_SetConfig+0x4d8>
 800244a:	bf00      	nop
 800244c:	40011000 	.word	0x40011000
 8002450:	40011400 	.word	0x40011400
 8002454:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800245c:	2200      	movs	r2, #0
 800245e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002462:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002466:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800246a:	4642      	mov	r2, r8
 800246c:	464b      	mov	r3, r9
 800246e:	1891      	adds	r1, r2, r2
 8002470:	6239      	str	r1, [r7, #32]
 8002472:	415b      	adcs	r3, r3
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
 8002476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800247a:	4641      	mov	r1, r8
 800247c:	1854      	adds	r4, r2, r1
 800247e:	4649      	mov	r1, r9
 8002480:	eb43 0501 	adc.w	r5, r3, r1
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	00eb      	lsls	r3, r5, #3
 800248e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002492:	00e2      	lsls	r2, r4, #3
 8002494:	4614      	mov	r4, r2
 8002496:	461d      	mov	r5, r3
 8002498:	4643      	mov	r3, r8
 800249a:	18e3      	adds	r3, r4, r3
 800249c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80024a0:	464b      	mov	r3, r9
 80024a2:	eb45 0303 	adc.w	r3, r5, r3
 80024a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80024aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024c6:	4629      	mov	r1, r5
 80024c8:	008b      	lsls	r3, r1, #2
 80024ca:	4621      	mov	r1, r4
 80024cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024d0:	4621      	mov	r1, r4
 80024d2:	008a      	lsls	r2, r1, #2
 80024d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80024d8:	f7fd feda 	bl	8000290 <__aeabi_uldivmod>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4b60      	ldr	r3, [pc, #384]	@ (8002664 <UART_SetConfig+0x4e4>)
 80024e2:	fba3 2302 	umull	r2, r3, r3, r2
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	011c      	lsls	r4, r3, #4
 80024ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024ee:	2200      	movs	r2, #0
 80024f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80024fc:	4642      	mov	r2, r8
 80024fe:	464b      	mov	r3, r9
 8002500:	1891      	adds	r1, r2, r2
 8002502:	61b9      	str	r1, [r7, #24]
 8002504:	415b      	adcs	r3, r3
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250c:	4641      	mov	r1, r8
 800250e:	1851      	adds	r1, r2, r1
 8002510:	6139      	str	r1, [r7, #16]
 8002512:	4649      	mov	r1, r9
 8002514:	414b      	adcs	r3, r1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002524:	4659      	mov	r1, fp
 8002526:	00cb      	lsls	r3, r1, #3
 8002528:	4651      	mov	r1, sl
 800252a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800252e:	4651      	mov	r1, sl
 8002530:	00ca      	lsls	r2, r1, #3
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	4603      	mov	r3, r0
 8002538:	4642      	mov	r2, r8
 800253a:	189b      	adds	r3, r3, r2
 800253c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002540:	464b      	mov	r3, r9
 8002542:	460a      	mov	r2, r1
 8002544:	eb42 0303 	adc.w	r3, r2, r3
 8002548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002556:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002564:	4649      	mov	r1, r9
 8002566:	008b      	lsls	r3, r1, #2
 8002568:	4641      	mov	r1, r8
 800256a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800256e:	4641      	mov	r1, r8
 8002570:	008a      	lsls	r2, r1, #2
 8002572:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002576:	f7fd fe8b 	bl	8000290 <__aeabi_uldivmod>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4611      	mov	r1, r2
 8002580:	4b38      	ldr	r3, [pc, #224]	@ (8002664 <UART_SetConfig+0x4e4>)
 8002582:	fba3 2301 	umull	r2, r3, r3, r1
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2264      	movs	r2, #100	@ 0x64
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	1acb      	subs	r3, r1, r3
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	3332      	adds	r3, #50	@ 0x32
 8002594:	4a33      	ldr	r2, [pc, #204]	@ (8002664 <UART_SetConfig+0x4e4>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025a0:	441c      	add	r4, r3
 80025a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025a6:	2200      	movs	r2, #0
 80025a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80025aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80025ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80025b0:	4642      	mov	r2, r8
 80025b2:	464b      	mov	r3, r9
 80025b4:	1891      	adds	r1, r2, r2
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	415b      	adcs	r3, r3
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c0:	4641      	mov	r1, r8
 80025c2:	1851      	adds	r1, r2, r1
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	4649      	mov	r1, r9
 80025c8:	414b      	adcs	r3, r1
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025d8:	4659      	mov	r1, fp
 80025da:	00cb      	lsls	r3, r1, #3
 80025dc:	4651      	mov	r1, sl
 80025de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e2:	4651      	mov	r1, sl
 80025e4:	00ca      	lsls	r2, r1, #3
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	4642      	mov	r2, r8
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025f2:	464b      	mov	r3, r9
 80025f4:	460a      	mov	r2, r1
 80025f6:	eb42 0303 	adc.w	r3, r2, r3
 80025fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	663b      	str	r3, [r7, #96]	@ 0x60
 8002606:	667a      	str	r2, [r7, #100]	@ 0x64
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002614:	4649      	mov	r1, r9
 8002616:	008b      	lsls	r3, r1, #2
 8002618:	4641      	mov	r1, r8
 800261a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800261e:	4641      	mov	r1, r8
 8002620:	008a      	lsls	r2, r1, #2
 8002622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002626:	f7fd fe33 	bl	8000290 <__aeabi_uldivmod>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <UART_SetConfig+0x4e4>)
 8002630:	fba3 1302 	umull	r1, r3, r3, r2
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	2164      	movs	r1, #100	@ 0x64
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	3332      	adds	r3, #50	@ 0x32
 8002642:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <UART_SetConfig+0x4e4>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4422      	add	r2, r4
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800265e:	46bd      	mov	sp, r7
 8002660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002664:	51eb851f 	.word	0x51eb851f

08002668 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800266e:	f000 f843 	bl	80026f8 <SystemClock_Config>
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002672:	f7fe fb7f 	bl	8000d74 <HAL_Init>

	debounceFSM_init();
 8002676:	f7fd ffdf 	bl	8000638 <debounceFSM_init>

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800267a:	2100      	movs	r1, #0
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe f9df 	bl	8000a40 <BSP_PB_Init>

	// Inicializar LEDs usando BSP
	BSP_LED_Init(LED2); // Azul.
 8002682:	2001      	movs	r0, #1
 8002684:	f7fe f93e 	bl	8000904 <BSP_LED_Init>

	// Apagamos todos los leds previamente.
	BSP_LED_Off(LED2);
 8002688:	2001      	movs	r0, #1
 800268a:	f7fe f9a5 	bl	80009d8 <BSP_LED_Off>

	debounceConfig(LED2, BUTTON_USER);
 800268e:	2100      	movs	r1, #0
 8002690:	2001      	movs	r0, #1
 8002692:	f7fd ffb9 	bl	8000608 <debounceConfig>

	tick_t period_led2 = BLINK_STEP_PERIOD;
 8002696:	2364      	movs	r3, #100	@ 0x64
 8002698:	60fb      	str	r3, [r7, #12]
	delay_t delay_led2;
	delayInit(&delay_led2, period_led2);
 800269a:	463b      	mov	r3, r7
 800269c:	68f9      	ldr	r1, [r7, #12]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe f85e 	bl	8000760 <delayInit>

	/* Infinite loop */
	while (1) {

		debounceFSM_update();
 80026a4:	f7fd ffda 	bl	800065c <debounceFSM_update>
		printf("ESTOY EN EL WHILE \n\r");
 80026a8:	4811      	ldr	r0, [pc, #68]	@ (80026f0 <main+0x88>)
 80026aa:	f000 f9ab 	bl	8002a04 <iprintf>

		if (delayRead(&delay_led2))
 80026ae:	463b      	mov	r3, r7
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe f866 	bl	8000782 <delayRead>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <main+0x5a>
			BSP_LED_Toggle(LED2);
 80026bc:	2001      	movs	r0, #1
 80026be:	f7fe f9a5 	bl	8000a0c <BSP_LED_Toggle>
		if (readKey()) {
 80026c2:	f7fd ff8d 	bl	80005e0 <readKey>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0eb      	beq.n	80026a4 <main+0x3c>
			period_led2 = (period_led2 + BLINK_STEP_PERIOD) % BLINK_MAX_PERIOD;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3364      	adds	r3, #100	@ 0x64
 80026d0:	4a08      	ldr	r2, [pc, #32]	@ (80026f4 <main+0x8c>)
 80026d2:	fba2 1203 	umull	r1, r2, r2, r3
 80026d6:	0952      	lsrs	r2, r2, #5
 80026d8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80026dc:	fb01 f202 	mul.w	r2, r1, r2
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
			delayWrite(&delay_led2, period_led2);
 80026e4:	463b      	mov	r3, r7
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe f873 	bl	80007d4 <delayWrite>
		debounceFSM_update();
 80026ee:	e7d9      	b.n	80026a4 <main+0x3c>
 80026f0:	08003884 	.word	0x08003884
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <SystemClock_Config>:
 *            Main regulator output voltage  = Scale1 mode
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b094      	sub	sp, #80	@ 0x50
 80026fc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b2c      	ldr	r3, [pc, #176]	@ (80027b4 <SystemClock_Config+0xbc>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	4a2b      	ldr	r2, [pc, #172]	@ (80027b4 <SystemClock_Config+0xbc>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	@ 0x40
 800270e:	4b29      	ldr	r3, [pc, #164]	@ (80027b4 <SystemClock_Config+0xbc>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	4b26      	ldr	r3, [pc, #152]	@ (80027b8 <SystemClock_Config+0xc0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a25      	ldr	r2, [pc, #148]	@ (80027b8 <SystemClock_Config+0xc0>)
 8002724:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b23      	ldr	r3, [pc, #140]	@ (80027b8 <SystemClock_Config+0xc0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002736:	2301      	movs	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800273a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800273e:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002740:	2302      	movs	r3, #2
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002744:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 800274a:	2308      	movs	r3, #8
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800274e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002752:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002754:	2302      	movs	r3, #2
 8002756:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002758:	2307      	movs	r3, #7
 800275a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe ff27 	bl	80015b4 <HAL_RCC_OscConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0x78>
		/* Initialization Error */
		Error_Handler();
 800276c:	f000 f826 	bl	80027bc <Error_Handler>
	}

	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002770:	f7fe fed0 	bl	8001514 <HAL_PWREx_EnableOverDrive>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <SystemClock_Config+0x86>
		/* Initialization Error */
		Error_Handler();
 800277a:	f000 f81f 	bl	80027bc <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800277e:	230f      	movs	r3, #15
 8002780:	63fb      	str	r3, [r7, #60]	@ 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002782:	2302      	movs	r3, #2
 8002784:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002786:	2300      	movs	r3, #0
 8002788:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800278a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800278e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002794:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002796:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800279a:	2105      	movs	r1, #5
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f981 	bl	8001aa4 <HAL_RCC_ClockConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <SystemClock_Config+0xb4>
		/* Initialization Error */
		Error_Handler();
 80027a8:	f000 f808 	bl	80027bc <Error_Handler>
	}
}
 80027ac:	bf00      	nop
 80027ae:	3750      	adds	r7, #80	@ 0x50
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000

080027bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7fe f8ef 	bl	80009a4 <BSP_LED_On>
	while (1) {
 80027c6:	bf00      	nop
 80027c8:	e7fd      	b.n	80027c6 <Error_Handler+0xa>
	...

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002804 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027d2:	e003      	b.n	80027dc <LoopCopyDataInit>

080027d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027da:	3104      	adds	r1, #4

080027dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027dc:	480b      	ldr	r0, [pc, #44]	@ (800280c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027e4:	d3f6      	bcc.n	80027d4 <CopyDataInit>
  ldr  r2, =_sbss
 80027e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027e8:	e002      	b.n	80027f0 <LoopFillZerobss>

080027ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027ec:	f842 3b04 	str.w	r3, [r2], #4

080027f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027f0:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027f4:	d3f9      	bcc.n	80027ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027f6:	f7fe f98f 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fa:	f000 f9ad 	bl	8002b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7ff ff33 	bl	8002668 <main>
  bx  lr    
 8002802:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002804:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002808:	08003960 	.word	0x08003960
  ldr  r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002810:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002814:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002818:	20000240 	.word	0x20000240

0800281c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC_IRQHandler>
	...

08002820 <__assert_func>:
 8002820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002822:	4614      	mov	r4, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <__assert_func+0x2c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4605      	mov	r5, r0
 800282c:	68d8      	ldr	r0, [r3, #12]
 800282e:	b954      	cbnz	r4, 8002846 <__assert_func+0x26>
 8002830:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <__assert_func+0x30>)
 8002832:	461c      	mov	r4, r3
 8002834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002838:	9100      	str	r1, [sp, #0]
 800283a:	462b      	mov	r3, r5
 800283c:	4905      	ldr	r1, [pc, #20]	@ (8002854 <__assert_func+0x34>)
 800283e:	f000 f8b1 	bl	80029a4 <fiprintf>
 8002842:	f000 f9be 	bl	8002bc2 <abort>
 8002846:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__assert_func+0x38>)
 8002848:	e7f4      	b.n	8002834 <__assert_func+0x14>
 800284a:	bf00      	nop
 800284c:	20000028 	.word	0x20000028
 8002850:	0800391b 	.word	0x0800391b
 8002854:	080038ed 	.word	0x080038ed
 8002858:	080038e0 	.word	0x080038e0

0800285c <std>:
 800285c:	2300      	movs	r3, #0
 800285e:	b510      	push	{r4, lr}
 8002860:	4604      	mov	r4, r0
 8002862:	e9c0 3300 	strd	r3, r3, [r0]
 8002866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800286a:	6083      	str	r3, [r0, #8]
 800286c:	8181      	strh	r1, [r0, #12]
 800286e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002870:	81c2      	strh	r2, [r0, #14]
 8002872:	6183      	str	r3, [r0, #24]
 8002874:	4619      	mov	r1, r3
 8002876:	2208      	movs	r2, #8
 8002878:	305c      	adds	r0, #92	@ 0x5c
 800287a:	f000 f918 	bl	8002aae <memset>
 800287e:	4b0d      	ldr	r3, [pc, #52]	@ (80028b4 <std+0x58>)
 8002880:	6263      	str	r3, [r4, #36]	@ 0x24
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <std+0x5c>)
 8002884:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <std+0x60>)
 8002888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <std+0x64>)
 800288c:	6323      	str	r3, [r4, #48]	@ 0x30
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <std+0x68>)
 8002890:	6224      	str	r4, [r4, #32]
 8002892:	429c      	cmp	r4, r3
 8002894:	d006      	beq.n	80028a4 <std+0x48>
 8002896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800289a:	4294      	cmp	r4, r2
 800289c:	d002      	beq.n	80028a4 <std+0x48>
 800289e:	33d0      	adds	r3, #208	@ 0xd0
 80028a0:	429c      	cmp	r4, r3
 80028a2:	d105      	bne.n	80028b0 <std+0x54>
 80028a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ac:	f000 b978 	b.w	8002ba0 <__retarget_lock_init_recursive>
 80028b0:	bd10      	pop	{r4, pc}
 80028b2:	bf00      	nop
 80028b4:	08002a29 	.word	0x08002a29
 80028b8:	08002a4b 	.word	0x08002a4b
 80028bc:	08002a83 	.word	0x08002a83
 80028c0:	08002aa7 	.word	0x08002aa7
 80028c4:	200000f4 	.word	0x200000f4

080028c8 <stdio_exit_handler>:
 80028c8:	4a02      	ldr	r2, [pc, #8]	@ (80028d4 <stdio_exit_handler+0xc>)
 80028ca:	4903      	ldr	r1, [pc, #12]	@ (80028d8 <stdio_exit_handler+0x10>)
 80028cc:	4803      	ldr	r0, [pc, #12]	@ (80028dc <stdio_exit_handler+0x14>)
 80028ce:	f000 b87b 	b.w	80029c8 <_fwalk_sglue>
 80028d2:	bf00      	nop
 80028d4:	2000001c 	.word	0x2000001c
 80028d8:	08003469 	.word	0x08003469
 80028dc:	2000002c 	.word	0x2000002c

080028e0 <cleanup_stdio>:
 80028e0:	6841      	ldr	r1, [r0, #4]
 80028e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <cleanup_stdio+0x34>)
 80028e4:	4299      	cmp	r1, r3
 80028e6:	b510      	push	{r4, lr}
 80028e8:	4604      	mov	r4, r0
 80028ea:	d001      	beq.n	80028f0 <cleanup_stdio+0x10>
 80028ec:	f000 fdbc 	bl	8003468 <_fflush_r>
 80028f0:	68a1      	ldr	r1, [r4, #8]
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <cleanup_stdio+0x38>)
 80028f4:	4299      	cmp	r1, r3
 80028f6:	d002      	beq.n	80028fe <cleanup_stdio+0x1e>
 80028f8:	4620      	mov	r0, r4
 80028fa:	f000 fdb5 	bl	8003468 <_fflush_r>
 80028fe:	68e1      	ldr	r1, [r4, #12]
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <cleanup_stdio+0x3c>)
 8002902:	4299      	cmp	r1, r3
 8002904:	d004      	beq.n	8002910 <cleanup_stdio+0x30>
 8002906:	4620      	mov	r0, r4
 8002908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800290c:	f000 bdac 	b.w	8003468 <_fflush_r>
 8002910:	bd10      	pop	{r4, pc}
 8002912:	bf00      	nop
 8002914:	200000f4 	.word	0x200000f4
 8002918:	2000015c 	.word	0x2000015c
 800291c:	200001c4 	.word	0x200001c4

08002920 <global_stdio_init.part.0>:
 8002920:	b510      	push	{r4, lr}
 8002922:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <global_stdio_init.part.0+0x30>)
 8002924:	4c0b      	ldr	r4, [pc, #44]	@ (8002954 <global_stdio_init.part.0+0x34>)
 8002926:	4a0c      	ldr	r2, [pc, #48]	@ (8002958 <global_stdio_init.part.0+0x38>)
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	4620      	mov	r0, r4
 800292c:	2200      	movs	r2, #0
 800292e:	2104      	movs	r1, #4
 8002930:	f7ff ff94 	bl	800285c <std>
 8002934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002938:	2201      	movs	r2, #1
 800293a:	2109      	movs	r1, #9
 800293c:	f7ff ff8e 	bl	800285c <std>
 8002940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002944:	2202      	movs	r2, #2
 8002946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800294a:	2112      	movs	r1, #18
 800294c:	f7ff bf86 	b.w	800285c <std>
 8002950:	2000022c 	.word	0x2000022c
 8002954:	200000f4 	.word	0x200000f4
 8002958:	080028c9 	.word	0x080028c9

0800295c <__sfp_lock_acquire>:
 800295c:	4801      	ldr	r0, [pc, #4]	@ (8002964 <__sfp_lock_acquire+0x8>)
 800295e:	f000 b920 	b.w	8002ba2 <__retarget_lock_acquire_recursive>
 8002962:	bf00      	nop
 8002964:	20000235 	.word	0x20000235

08002968 <__sfp_lock_release>:
 8002968:	4801      	ldr	r0, [pc, #4]	@ (8002970 <__sfp_lock_release+0x8>)
 800296a:	f000 b91b 	b.w	8002ba4 <__retarget_lock_release_recursive>
 800296e:	bf00      	nop
 8002970:	20000235 	.word	0x20000235

08002974 <__sinit>:
 8002974:	b510      	push	{r4, lr}
 8002976:	4604      	mov	r4, r0
 8002978:	f7ff fff0 	bl	800295c <__sfp_lock_acquire>
 800297c:	6a23      	ldr	r3, [r4, #32]
 800297e:	b11b      	cbz	r3, 8002988 <__sinit+0x14>
 8002980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002984:	f7ff bff0 	b.w	8002968 <__sfp_lock_release>
 8002988:	4b04      	ldr	r3, [pc, #16]	@ (800299c <__sinit+0x28>)
 800298a:	6223      	str	r3, [r4, #32]
 800298c:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <__sinit+0x2c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f5      	bne.n	8002980 <__sinit+0xc>
 8002994:	f7ff ffc4 	bl	8002920 <global_stdio_init.part.0>
 8002998:	e7f2      	b.n	8002980 <__sinit+0xc>
 800299a:	bf00      	nop
 800299c:	080028e1 	.word	0x080028e1
 80029a0:	2000022c 	.word	0x2000022c

080029a4 <fiprintf>:
 80029a4:	b40e      	push	{r1, r2, r3}
 80029a6:	b503      	push	{r0, r1, lr}
 80029a8:	4601      	mov	r1, r0
 80029aa:	ab03      	add	r3, sp, #12
 80029ac:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <fiprintf+0x20>)
 80029ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80029b2:	6800      	ldr	r0, [r0, #0]
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	f000 fa2d 	bl	8002e14 <_vfiprintf_r>
 80029ba:	b002      	add	sp, #8
 80029bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80029c0:	b003      	add	sp, #12
 80029c2:	4770      	bx	lr
 80029c4:	20000028 	.word	0x20000028

080029c8 <_fwalk_sglue>:
 80029c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029cc:	4607      	mov	r7, r0
 80029ce:	4688      	mov	r8, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	2600      	movs	r6, #0
 80029d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029d8:	f1b9 0901 	subs.w	r9, r9, #1
 80029dc:	d505      	bpl.n	80029ea <_fwalk_sglue+0x22>
 80029de:	6824      	ldr	r4, [r4, #0]
 80029e0:	2c00      	cmp	r4, #0
 80029e2:	d1f7      	bne.n	80029d4 <_fwalk_sglue+0xc>
 80029e4:	4630      	mov	r0, r6
 80029e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029ea:	89ab      	ldrh	r3, [r5, #12]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d907      	bls.n	8002a00 <_fwalk_sglue+0x38>
 80029f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029f4:	3301      	adds	r3, #1
 80029f6:	d003      	beq.n	8002a00 <_fwalk_sglue+0x38>
 80029f8:	4629      	mov	r1, r5
 80029fa:	4638      	mov	r0, r7
 80029fc:	47c0      	blx	r8
 80029fe:	4306      	orrs	r6, r0
 8002a00:	3568      	adds	r5, #104	@ 0x68
 8002a02:	e7e9      	b.n	80029d8 <_fwalk_sglue+0x10>

08002a04 <iprintf>:
 8002a04:	b40f      	push	{r0, r1, r2, r3}
 8002a06:	b507      	push	{r0, r1, r2, lr}
 8002a08:	4906      	ldr	r1, [pc, #24]	@ (8002a24 <iprintf+0x20>)
 8002a0a:	ab04      	add	r3, sp, #16
 8002a0c:	6808      	ldr	r0, [r1, #0]
 8002a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a12:	6881      	ldr	r1, [r0, #8]
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	f000 f9fd 	bl	8002e14 <_vfiprintf_r>
 8002a1a:	b003      	add	sp, #12
 8002a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a20:	b004      	add	sp, #16
 8002a22:	4770      	bx	lr
 8002a24:	20000028 	.word	0x20000028

08002a28 <__sread>:
 8002a28:	b510      	push	{r4, lr}
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a30:	f000 f868 	bl	8002b04 <_read_r>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	bfab      	itete	ge
 8002a38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8002a3c:	181b      	addge	r3, r3, r0
 8002a3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a42:	bfac      	ite	ge
 8002a44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a46:	81a3      	strhlt	r3, [r4, #12]
 8002a48:	bd10      	pop	{r4, pc}

08002a4a <__swrite>:
 8002a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a4e:	461f      	mov	r7, r3
 8002a50:	898b      	ldrh	r3, [r1, #12]
 8002a52:	05db      	lsls	r3, r3, #23
 8002a54:	4605      	mov	r5, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	4616      	mov	r6, r2
 8002a5a:	d505      	bpl.n	8002a68 <__swrite+0x1e>
 8002a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a60:	2302      	movs	r3, #2
 8002a62:	2200      	movs	r2, #0
 8002a64:	f000 f83c 	bl	8002ae0 <_lseek_r>
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a72:	81a3      	strh	r3, [r4, #12]
 8002a74:	4632      	mov	r2, r6
 8002a76:	463b      	mov	r3, r7
 8002a78:	4628      	mov	r0, r5
 8002a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7e:	f000 b853 	b.w	8002b28 <_write_r>

08002a82 <__sseek>:
 8002a82:	b510      	push	{r4, lr}
 8002a84:	460c      	mov	r4, r1
 8002a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a8a:	f000 f829 	bl	8002ae0 <_lseek_r>
 8002a8e:	1c43      	adds	r3, r0, #1
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	bf15      	itete	ne
 8002a94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a9e:	81a3      	strheq	r3, [r4, #12]
 8002aa0:	bf18      	it	ne
 8002aa2:	81a3      	strhne	r3, [r4, #12]
 8002aa4:	bd10      	pop	{r4, pc}

08002aa6 <__sclose>:
 8002aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aaa:	f000 b809 	b.w	8002ac0 <_close_r>

08002aae <memset>:
 8002aae:	4402      	add	r2, r0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d100      	bne.n	8002ab8 <memset+0xa>
 8002ab6:	4770      	bx	lr
 8002ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8002abc:	e7f9      	b.n	8002ab2 <memset+0x4>
	...

08002ac0 <_close_r>:
 8002ac0:	b538      	push	{r3, r4, r5, lr}
 8002ac2:	4d06      	ldr	r5, [pc, #24]	@ (8002adc <_close_r+0x1c>)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4608      	mov	r0, r1
 8002aca:	602b      	str	r3, [r5, #0]
 8002acc:	f7fe f8e8 	bl	8000ca0 <_close>
 8002ad0:	1c43      	adds	r3, r0, #1
 8002ad2:	d102      	bne.n	8002ada <_close_r+0x1a>
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	b103      	cbz	r3, 8002ada <_close_r+0x1a>
 8002ad8:	6023      	str	r3, [r4, #0]
 8002ada:	bd38      	pop	{r3, r4, r5, pc}
 8002adc:	20000230 	.word	0x20000230

08002ae0 <_lseek_r>:
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	4d07      	ldr	r5, [pc, #28]	@ (8002b00 <_lseek_r+0x20>)
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	4608      	mov	r0, r1
 8002ae8:	4611      	mov	r1, r2
 8002aea:	2200      	movs	r2, #0
 8002aec:	602a      	str	r2, [r5, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f7fe f8fd 	bl	8000cee <_lseek>
 8002af4:	1c43      	adds	r3, r0, #1
 8002af6:	d102      	bne.n	8002afe <_lseek_r+0x1e>
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	b103      	cbz	r3, 8002afe <_lseek_r+0x1e>
 8002afc:	6023      	str	r3, [r4, #0]
 8002afe:	bd38      	pop	{r3, r4, r5, pc}
 8002b00:	20000230 	.word	0x20000230

08002b04 <_read_r>:
 8002b04:	b538      	push	{r3, r4, r5, lr}
 8002b06:	4d07      	ldr	r5, [pc, #28]	@ (8002b24 <_read_r+0x20>)
 8002b08:	4604      	mov	r4, r0
 8002b0a:	4608      	mov	r0, r1
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	2200      	movs	r2, #0
 8002b10:	602a      	str	r2, [r5, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f7fe f88b 	bl	8000c2e <_read>
 8002b18:	1c43      	adds	r3, r0, #1
 8002b1a:	d102      	bne.n	8002b22 <_read_r+0x1e>
 8002b1c:	682b      	ldr	r3, [r5, #0]
 8002b1e:	b103      	cbz	r3, 8002b22 <_read_r+0x1e>
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	bd38      	pop	{r3, r4, r5, pc}
 8002b24:	20000230 	.word	0x20000230

08002b28 <_write_r>:
 8002b28:	b538      	push	{r3, r4, r5, lr}
 8002b2a:	4d07      	ldr	r5, [pc, #28]	@ (8002b48 <_write_r+0x20>)
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	4608      	mov	r0, r1
 8002b30:	4611      	mov	r1, r2
 8002b32:	2200      	movs	r2, #0
 8002b34:	602a      	str	r2, [r5, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f7fe f896 	bl	8000c68 <_write>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d102      	bne.n	8002b46 <_write_r+0x1e>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	b103      	cbz	r3, 8002b46 <_write_r+0x1e>
 8002b44:	6023      	str	r3, [r4, #0]
 8002b46:	bd38      	pop	{r3, r4, r5, pc}
 8002b48:	20000230 	.word	0x20000230

08002b4c <__errno>:
 8002b4c:	4b01      	ldr	r3, [pc, #4]	@ (8002b54 <__errno+0x8>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000028 	.word	0x20000028

08002b58 <__libc_init_array>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	4d0d      	ldr	r5, [pc, #52]	@ (8002b90 <__libc_init_array+0x38>)
 8002b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8002b94 <__libc_init_array+0x3c>)
 8002b5e:	1b64      	subs	r4, r4, r5
 8002b60:	10a4      	asrs	r4, r4, #2
 8002b62:	2600      	movs	r6, #0
 8002b64:	42a6      	cmp	r6, r4
 8002b66:	d109      	bne.n	8002b7c <__libc_init_array+0x24>
 8002b68:	4d0b      	ldr	r5, [pc, #44]	@ (8002b98 <__libc_init_array+0x40>)
 8002b6a:	4c0c      	ldr	r4, [pc, #48]	@ (8002b9c <__libc_init_array+0x44>)
 8002b6c:	f000 fe10 	bl	8003790 <_init>
 8002b70:	1b64      	subs	r4, r4, r5
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	2600      	movs	r6, #0
 8002b76:	42a6      	cmp	r6, r4
 8002b78:	d105      	bne.n	8002b86 <__libc_init_array+0x2e>
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b80:	4798      	blx	r3
 8002b82:	3601      	adds	r6, #1
 8002b84:	e7ee      	b.n	8002b64 <__libc_init_array+0xc>
 8002b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8a:	4798      	blx	r3
 8002b8c:	3601      	adds	r6, #1
 8002b8e:	e7f2      	b.n	8002b76 <__libc_init_array+0x1e>
 8002b90:	08003958 	.word	0x08003958
 8002b94:	08003958 	.word	0x08003958
 8002b98:	08003958 	.word	0x08003958
 8002b9c:	0800395c 	.word	0x0800395c

08002ba0 <__retarget_lock_init_recursive>:
 8002ba0:	4770      	bx	lr

08002ba2 <__retarget_lock_acquire_recursive>:
 8002ba2:	4770      	bx	lr

08002ba4 <__retarget_lock_release_recursive>:
 8002ba4:	4770      	bx	lr

08002ba6 <memcpy>:
 8002ba6:	440a      	add	r2, r1
 8002ba8:	4291      	cmp	r1, r2
 8002baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bae:	d100      	bne.n	8002bb2 <memcpy+0xc>
 8002bb0:	4770      	bx	lr
 8002bb2:	b510      	push	{r4, lr}
 8002bb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bbc:	4291      	cmp	r1, r2
 8002bbe:	d1f9      	bne.n	8002bb4 <memcpy+0xe>
 8002bc0:	bd10      	pop	{r4, pc}

08002bc2 <abort>:
 8002bc2:	b508      	push	{r3, lr}
 8002bc4:	2006      	movs	r0, #6
 8002bc6:	f000 fd33 	bl	8003630 <raise>
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7fe f824 	bl	8000c18 <_exit>

08002bd0 <_free_r>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d041      	beq.n	8002c5c <_free_r+0x8c>
 8002bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bdc:	1f0c      	subs	r4, r1, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bfb8      	it	lt
 8002be2:	18e4      	addlt	r4, r4, r3
 8002be4:	f000 f8e0 	bl	8002da8 <__malloc_lock>
 8002be8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c60 <_free_r+0x90>)
 8002bea:	6813      	ldr	r3, [r2, #0]
 8002bec:	b933      	cbnz	r3, 8002bfc <_free_r+0x2c>
 8002bee:	6063      	str	r3, [r4, #4]
 8002bf0:	6014      	str	r4, [r2, #0]
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bf8:	f000 b8dc 	b.w	8002db4 <__malloc_unlock>
 8002bfc:	42a3      	cmp	r3, r4
 8002bfe:	d908      	bls.n	8002c12 <_free_r+0x42>
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	1821      	adds	r1, r4, r0
 8002c04:	428b      	cmp	r3, r1
 8002c06:	bf01      	itttt	eq
 8002c08:	6819      	ldreq	r1, [r3, #0]
 8002c0a:	685b      	ldreq	r3, [r3, #4]
 8002c0c:	1809      	addeq	r1, r1, r0
 8002c0e:	6021      	streq	r1, [r4, #0]
 8002c10:	e7ed      	b.n	8002bee <_free_r+0x1e>
 8002c12:	461a      	mov	r2, r3
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	b10b      	cbz	r3, 8002c1c <_free_r+0x4c>
 8002c18:	42a3      	cmp	r3, r4
 8002c1a:	d9fa      	bls.n	8002c12 <_free_r+0x42>
 8002c1c:	6811      	ldr	r1, [r2, #0]
 8002c1e:	1850      	adds	r0, r2, r1
 8002c20:	42a0      	cmp	r0, r4
 8002c22:	d10b      	bne.n	8002c3c <_free_r+0x6c>
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	4401      	add	r1, r0
 8002c28:	1850      	adds	r0, r2, r1
 8002c2a:	4283      	cmp	r3, r0
 8002c2c:	6011      	str	r1, [r2, #0]
 8002c2e:	d1e0      	bne.n	8002bf2 <_free_r+0x22>
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	6053      	str	r3, [r2, #4]
 8002c36:	4408      	add	r0, r1
 8002c38:	6010      	str	r0, [r2, #0]
 8002c3a:	e7da      	b.n	8002bf2 <_free_r+0x22>
 8002c3c:	d902      	bls.n	8002c44 <_free_r+0x74>
 8002c3e:	230c      	movs	r3, #12
 8002c40:	602b      	str	r3, [r5, #0]
 8002c42:	e7d6      	b.n	8002bf2 <_free_r+0x22>
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	1821      	adds	r1, r4, r0
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	bf04      	itt	eq
 8002c4c:	6819      	ldreq	r1, [r3, #0]
 8002c4e:	685b      	ldreq	r3, [r3, #4]
 8002c50:	6063      	str	r3, [r4, #4]
 8002c52:	bf04      	itt	eq
 8002c54:	1809      	addeq	r1, r1, r0
 8002c56:	6021      	streq	r1, [r4, #0]
 8002c58:	6054      	str	r4, [r2, #4]
 8002c5a:	e7ca      	b.n	8002bf2 <_free_r+0x22>
 8002c5c:	bd38      	pop	{r3, r4, r5, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000023c 	.word	0x2000023c

08002c64 <sbrk_aligned>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4e0f      	ldr	r6, [pc, #60]	@ (8002ca4 <sbrk_aligned+0x40>)
 8002c68:	460c      	mov	r4, r1
 8002c6a:	6831      	ldr	r1, [r6, #0]
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	b911      	cbnz	r1, 8002c76 <sbrk_aligned+0x12>
 8002c70:	f000 fcfa 	bl	8003668 <_sbrk_r>
 8002c74:	6030      	str	r0, [r6, #0]
 8002c76:	4621      	mov	r1, r4
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f000 fcf5 	bl	8003668 <_sbrk_r>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	d103      	bne.n	8002c8a <sbrk_aligned+0x26>
 8002c82:	f04f 34ff 	mov.w	r4, #4294967295
 8002c86:	4620      	mov	r0, r4
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	1cc4      	adds	r4, r0, #3
 8002c8c:	f024 0403 	bic.w	r4, r4, #3
 8002c90:	42a0      	cmp	r0, r4
 8002c92:	d0f8      	beq.n	8002c86 <sbrk_aligned+0x22>
 8002c94:	1a21      	subs	r1, r4, r0
 8002c96:	4628      	mov	r0, r5
 8002c98:	f000 fce6 	bl	8003668 <_sbrk_r>
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	d1f2      	bne.n	8002c86 <sbrk_aligned+0x22>
 8002ca0:	e7ef      	b.n	8002c82 <sbrk_aligned+0x1e>
 8002ca2:	bf00      	nop
 8002ca4:	20000238 	.word	0x20000238

08002ca8 <_malloc_r>:
 8002ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cac:	1ccd      	adds	r5, r1, #3
 8002cae:	f025 0503 	bic.w	r5, r5, #3
 8002cb2:	3508      	adds	r5, #8
 8002cb4:	2d0c      	cmp	r5, #12
 8002cb6:	bf38      	it	cc
 8002cb8:	250c      	movcc	r5, #12
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	4606      	mov	r6, r0
 8002cbe:	db01      	blt.n	8002cc4 <_malloc_r+0x1c>
 8002cc0:	42a9      	cmp	r1, r5
 8002cc2:	d904      	bls.n	8002cce <_malloc_r+0x26>
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	6033      	str	r3, [r6, #0]
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002da4 <_malloc_r+0xfc>
 8002cd2:	f000 f869 	bl	8002da8 <__malloc_lock>
 8002cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002cda:	461c      	mov	r4, r3
 8002cdc:	bb44      	cbnz	r4, 8002d30 <_malloc_r+0x88>
 8002cde:	4629      	mov	r1, r5
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f7ff ffbf 	bl	8002c64 <sbrk_aligned>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	4604      	mov	r4, r0
 8002cea:	d158      	bne.n	8002d9e <_malloc_r+0xf6>
 8002cec:	f8d8 4000 	ldr.w	r4, [r8]
 8002cf0:	4627      	mov	r7, r4
 8002cf2:	2f00      	cmp	r7, #0
 8002cf4:	d143      	bne.n	8002d7e <_malloc_r+0xd6>
 8002cf6:	2c00      	cmp	r4, #0
 8002cf8:	d04b      	beq.n	8002d92 <_malloc_r+0xea>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	4639      	mov	r1, r7
 8002cfe:	4630      	mov	r0, r6
 8002d00:	eb04 0903 	add.w	r9, r4, r3
 8002d04:	f000 fcb0 	bl	8003668 <_sbrk_r>
 8002d08:	4581      	cmp	r9, r0
 8002d0a:	d142      	bne.n	8002d92 <_malloc_r+0xea>
 8002d0c:	6821      	ldr	r1, [r4, #0]
 8002d0e:	1a6d      	subs	r5, r5, r1
 8002d10:	4629      	mov	r1, r5
 8002d12:	4630      	mov	r0, r6
 8002d14:	f7ff ffa6 	bl	8002c64 <sbrk_aligned>
 8002d18:	3001      	adds	r0, #1
 8002d1a:	d03a      	beq.n	8002d92 <_malloc_r+0xea>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	442b      	add	r3, r5
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	f8d8 3000 	ldr.w	r3, [r8]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	bb62      	cbnz	r2, 8002d84 <_malloc_r+0xdc>
 8002d2a:	f8c8 7000 	str.w	r7, [r8]
 8002d2e:	e00f      	b.n	8002d50 <_malloc_r+0xa8>
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	1b52      	subs	r2, r2, r5
 8002d34:	d420      	bmi.n	8002d78 <_malloc_r+0xd0>
 8002d36:	2a0b      	cmp	r2, #11
 8002d38:	d917      	bls.n	8002d6a <_malloc_r+0xc2>
 8002d3a:	1961      	adds	r1, r4, r5
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	6025      	str	r5, [r4, #0]
 8002d40:	bf18      	it	ne
 8002d42:	6059      	strne	r1, [r3, #4]
 8002d44:	6863      	ldr	r3, [r4, #4]
 8002d46:	bf08      	it	eq
 8002d48:	f8c8 1000 	streq.w	r1, [r8]
 8002d4c:	5162      	str	r2, [r4, r5]
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	4630      	mov	r0, r6
 8002d52:	f000 f82f 	bl	8002db4 <__malloc_unlock>
 8002d56:	f104 000b 	add.w	r0, r4, #11
 8002d5a:	1d23      	adds	r3, r4, #4
 8002d5c:	f020 0007 	bic.w	r0, r0, #7
 8002d60:	1ac2      	subs	r2, r0, r3
 8002d62:	bf1c      	itt	ne
 8002d64:	1a1b      	subne	r3, r3, r0
 8002d66:	50a3      	strne	r3, [r4, r2]
 8002d68:	e7af      	b.n	8002cca <_malloc_r+0x22>
 8002d6a:	6862      	ldr	r2, [r4, #4]
 8002d6c:	42a3      	cmp	r3, r4
 8002d6e:	bf0c      	ite	eq
 8002d70:	f8c8 2000 	streq.w	r2, [r8]
 8002d74:	605a      	strne	r2, [r3, #4]
 8002d76:	e7eb      	b.n	8002d50 <_malloc_r+0xa8>
 8002d78:	4623      	mov	r3, r4
 8002d7a:	6864      	ldr	r4, [r4, #4]
 8002d7c:	e7ae      	b.n	8002cdc <_malloc_r+0x34>
 8002d7e:	463c      	mov	r4, r7
 8002d80:	687f      	ldr	r7, [r7, #4]
 8002d82:	e7b6      	b.n	8002cf2 <_malloc_r+0x4a>
 8002d84:	461a      	mov	r2, r3
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	42a3      	cmp	r3, r4
 8002d8a:	d1fb      	bne.n	8002d84 <_malloc_r+0xdc>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6053      	str	r3, [r2, #4]
 8002d90:	e7de      	b.n	8002d50 <_malloc_r+0xa8>
 8002d92:	230c      	movs	r3, #12
 8002d94:	6033      	str	r3, [r6, #0]
 8002d96:	4630      	mov	r0, r6
 8002d98:	f000 f80c 	bl	8002db4 <__malloc_unlock>
 8002d9c:	e794      	b.n	8002cc8 <_malloc_r+0x20>
 8002d9e:	6005      	str	r5, [r0, #0]
 8002da0:	e7d6      	b.n	8002d50 <_malloc_r+0xa8>
 8002da2:	bf00      	nop
 8002da4:	2000023c 	.word	0x2000023c

08002da8 <__malloc_lock>:
 8002da8:	4801      	ldr	r0, [pc, #4]	@ (8002db0 <__malloc_lock+0x8>)
 8002daa:	f7ff befa 	b.w	8002ba2 <__retarget_lock_acquire_recursive>
 8002dae:	bf00      	nop
 8002db0:	20000234 	.word	0x20000234

08002db4 <__malloc_unlock>:
 8002db4:	4801      	ldr	r0, [pc, #4]	@ (8002dbc <__malloc_unlock+0x8>)
 8002db6:	f7ff bef5 	b.w	8002ba4 <__retarget_lock_release_recursive>
 8002dba:	bf00      	nop
 8002dbc:	20000234 	.word	0x20000234

08002dc0 <__sfputc_r>:
 8002dc0:	6893      	ldr	r3, [r2, #8]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	b410      	push	{r4}
 8002dc8:	6093      	str	r3, [r2, #8]
 8002dca:	da08      	bge.n	8002dde <__sfputc_r+0x1e>
 8002dcc:	6994      	ldr	r4, [r2, #24]
 8002dce:	42a3      	cmp	r3, r4
 8002dd0:	db01      	blt.n	8002dd6 <__sfputc_r+0x16>
 8002dd2:	290a      	cmp	r1, #10
 8002dd4:	d103      	bne.n	8002dde <__sfputc_r+0x1e>
 8002dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dda:	f000 bb6d 	b.w	80034b8 <__swbuf_r>
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	1c58      	adds	r0, r3, #1
 8002de2:	6010      	str	r0, [r2, #0]
 8002de4:	7019      	strb	r1, [r3, #0]
 8002de6:	4608      	mov	r0, r1
 8002de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <__sfputs_r>:
 8002dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df0:	4606      	mov	r6, r0
 8002df2:	460f      	mov	r7, r1
 8002df4:	4614      	mov	r4, r2
 8002df6:	18d5      	adds	r5, r2, r3
 8002df8:	42ac      	cmp	r4, r5
 8002dfa:	d101      	bne.n	8002e00 <__sfputs_r+0x12>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	e007      	b.n	8002e10 <__sfputs_r+0x22>
 8002e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e04:	463a      	mov	r2, r7
 8002e06:	4630      	mov	r0, r6
 8002e08:	f7ff ffda 	bl	8002dc0 <__sfputc_r>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	d1f3      	bne.n	8002df8 <__sfputs_r+0xa>
 8002e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e14 <_vfiprintf_r>:
 8002e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e18:	460d      	mov	r5, r1
 8002e1a:	b09d      	sub	sp, #116	@ 0x74
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	4698      	mov	r8, r3
 8002e20:	4606      	mov	r6, r0
 8002e22:	b118      	cbz	r0, 8002e2c <_vfiprintf_r+0x18>
 8002e24:	6a03      	ldr	r3, [r0, #32]
 8002e26:	b90b      	cbnz	r3, 8002e2c <_vfiprintf_r+0x18>
 8002e28:	f7ff fda4 	bl	8002974 <__sinit>
 8002e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e2e:	07d9      	lsls	r1, r3, #31
 8002e30:	d405      	bmi.n	8002e3e <_vfiprintf_r+0x2a>
 8002e32:	89ab      	ldrh	r3, [r5, #12]
 8002e34:	059a      	lsls	r2, r3, #22
 8002e36:	d402      	bmi.n	8002e3e <_vfiprintf_r+0x2a>
 8002e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e3a:	f7ff feb2 	bl	8002ba2 <__retarget_lock_acquire_recursive>
 8002e3e:	89ab      	ldrh	r3, [r5, #12]
 8002e40:	071b      	lsls	r3, r3, #28
 8002e42:	d501      	bpl.n	8002e48 <_vfiprintf_r+0x34>
 8002e44:	692b      	ldr	r3, [r5, #16]
 8002e46:	b99b      	cbnz	r3, 8002e70 <_vfiprintf_r+0x5c>
 8002e48:	4629      	mov	r1, r5
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f000 fb72 	bl	8003534 <__swsetup_r>
 8002e50:	b170      	cbz	r0, 8002e70 <_vfiprintf_r+0x5c>
 8002e52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e54:	07dc      	lsls	r4, r3, #31
 8002e56:	d504      	bpl.n	8002e62 <_vfiprintf_r+0x4e>
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	b01d      	add	sp, #116	@ 0x74
 8002e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e62:	89ab      	ldrh	r3, [r5, #12]
 8002e64:	0598      	lsls	r0, r3, #22
 8002e66:	d4f7      	bmi.n	8002e58 <_vfiprintf_r+0x44>
 8002e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e6a:	f7ff fe9b 	bl	8002ba4 <__retarget_lock_release_recursive>
 8002e6e:	e7f3      	b.n	8002e58 <_vfiprintf_r+0x44>
 8002e70:	2300      	movs	r3, #0
 8002e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e74:	2320      	movs	r3, #32
 8002e76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e7e:	2330      	movs	r3, #48	@ 0x30
 8002e80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003030 <_vfiprintf_r+0x21c>
 8002e84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002e88:	f04f 0901 	mov.w	r9, #1
 8002e8c:	4623      	mov	r3, r4
 8002e8e:	469a      	mov	sl, r3
 8002e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e94:	b10a      	cbz	r2, 8002e9a <_vfiprintf_r+0x86>
 8002e96:	2a25      	cmp	r2, #37	@ 0x25
 8002e98:	d1f9      	bne.n	8002e8e <_vfiprintf_r+0x7a>
 8002e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8002e9e:	d00b      	beq.n	8002eb8 <_vfiprintf_r+0xa4>
 8002ea0:	465b      	mov	r3, fp
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f7ff ffa1 	bl	8002dee <__sfputs_r>
 8002eac:	3001      	adds	r0, #1
 8002eae:	f000 80a7 	beq.w	8003000 <_vfiprintf_r+0x1ec>
 8002eb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002eb4:	445a      	add	r2, fp
 8002eb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8002eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <_vfiprintf_r+0x1ec>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ecc:	f10a 0a01 	add.w	sl, sl, #1
 8002ed0:	9304      	str	r3, [sp, #16]
 8002ed2:	9307      	str	r3, [sp, #28]
 8002ed4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ed8:	931a      	str	r3, [sp, #104]	@ 0x68
 8002eda:	4654      	mov	r4, sl
 8002edc:	2205      	movs	r2, #5
 8002ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee2:	4853      	ldr	r0, [pc, #332]	@ (8003030 <_vfiprintf_r+0x21c>)
 8002ee4:	f7fd f984 	bl	80001f0 <memchr>
 8002ee8:	9a04      	ldr	r2, [sp, #16]
 8002eea:	b9d8      	cbnz	r0, 8002f24 <_vfiprintf_r+0x110>
 8002eec:	06d1      	lsls	r1, r2, #27
 8002eee:	bf44      	itt	mi
 8002ef0:	2320      	movmi	r3, #32
 8002ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ef6:	0713      	lsls	r3, r2, #28
 8002ef8:	bf44      	itt	mi
 8002efa:	232b      	movmi	r3, #43	@ 0x2b
 8002efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f00:	f89a 3000 	ldrb.w	r3, [sl]
 8002f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f06:	d015      	beq.n	8002f34 <_vfiprintf_r+0x120>
 8002f08:	9a07      	ldr	r2, [sp, #28]
 8002f0a:	4654      	mov	r4, sl
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f04f 0c0a 	mov.w	ip, #10
 8002f12:	4621      	mov	r1, r4
 8002f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f18:	3b30      	subs	r3, #48	@ 0x30
 8002f1a:	2b09      	cmp	r3, #9
 8002f1c:	d94b      	bls.n	8002fb6 <_vfiprintf_r+0x1a2>
 8002f1e:	b1b0      	cbz	r0, 8002f4e <_vfiprintf_r+0x13a>
 8002f20:	9207      	str	r2, [sp, #28]
 8002f22:	e014      	b.n	8002f4e <_vfiprintf_r+0x13a>
 8002f24:	eba0 0308 	sub.w	r3, r0, r8
 8002f28:	fa09 f303 	lsl.w	r3, r9, r3
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	9304      	str	r3, [sp, #16]
 8002f30:	46a2      	mov	sl, r4
 8002f32:	e7d2      	b.n	8002eda <_vfiprintf_r+0xc6>
 8002f34:	9b03      	ldr	r3, [sp, #12]
 8002f36:	1d19      	adds	r1, r3, #4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	9103      	str	r1, [sp, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bfbb      	ittet	lt
 8002f40:	425b      	neglt	r3, r3
 8002f42:	f042 0202 	orrlt.w	r2, r2, #2
 8002f46:	9307      	strge	r3, [sp, #28]
 8002f48:	9307      	strlt	r3, [sp, #28]
 8002f4a:	bfb8      	it	lt
 8002f4c:	9204      	strlt	r2, [sp, #16]
 8002f4e:	7823      	ldrb	r3, [r4, #0]
 8002f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f52:	d10a      	bne.n	8002f6a <_vfiprintf_r+0x156>
 8002f54:	7863      	ldrb	r3, [r4, #1]
 8002f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f58:	d132      	bne.n	8002fc0 <_vfiprintf_r+0x1ac>
 8002f5a:	9b03      	ldr	r3, [sp, #12]
 8002f5c:	1d1a      	adds	r2, r3, #4
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	9203      	str	r2, [sp, #12]
 8002f62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f66:	3402      	adds	r4, #2
 8002f68:	9305      	str	r3, [sp, #20]
 8002f6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003040 <_vfiprintf_r+0x22c>
 8002f6e:	7821      	ldrb	r1, [r4, #0]
 8002f70:	2203      	movs	r2, #3
 8002f72:	4650      	mov	r0, sl
 8002f74:	f7fd f93c 	bl	80001f0 <memchr>
 8002f78:	b138      	cbz	r0, 8002f8a <_vfiprintf_r+0x176>
 8002f7a:	9b04      	ldr	r3, [sp, #16]
 8002f7c:	eba0 000a 	sub.w	r0, r0, sl
 8002f80:	2240      	movs	r2, #64	@ 0x40
 8002f82:	4082      	lsls	r2, r0
 8002f84:	4313      	orrs	r3, r2
 8002f86:	3401      	adds	r4, #1
 8002f88:	9304      	str	r3, [sp, #16]
 8002f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f8e:	4829      	ldr	r0, [pc, #164]	@ (8003034 <_vfiprintf_r+0x220>)
 8002f90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002f94:	2206      	movs	r2, #6
 8002f96:	f7fd f92b 	bl	80001f0 <memchr>
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d03f      	beq.n	800301e <_vfiprintf_r+0x20a>
 8002f9e:	4b26      	ldr	r3, [pc, #152]	@ (8003038 <_vfiprintf_r+0x224>)
 8002fa0:	bb1b      	cbnz	r3, 8002fea <_vfiprintf_r+0x1d6>
 8002fa2:	9b03      	ldr	r3, [sp, #12]
 8002fa4:	3307      	adds	r3, #7
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	3308      	adds	r3, #8
 8002fac:	9303      	str	r3, [sp, #12]
 8002fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fb0:	443b      	add	r3, r7
 8002fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fb4:	e76a      	b.n	8002e8c <_vfiprintf_r+0x78>
 8002fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fba:	460c      	mov	r4, r1
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	e7a8      	b.n	8002f12 <_vfiprintf_r+0xfe>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	3401      	adds	r4, #1
 8002fc4:	9305      	str	r3, [sp, #20]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f04f 0c0a 	mov.w	ip, #10
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fd2:	3a30      	subs	r2, #48	@ 0x30
 8002fd4:	2a09      	cmp	r2, #9
 8002fd6:	d903      	bls.n	8002fe0 <_vfiprintf_r+0x1cc>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0c6      	beq.n	8002f6a <_vfiprintf_r+0x156>
 8002fdc:	9105      	str	r1, [sp, #20]
 8002fde:	e7c4      	b.n	8002f6a <_vfiprintf_r+0x156>
 8002fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e7f0      	b.n	8002fcc <_vfiprintf_r+0x1b8>
 8002fea:	ab03      	add	r3, sp, #12
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	462a      	mov	r2, r5
 8002ff0:	4b12      	ldr	r3, [pc, #72]	@ (800303c <_vfiprintf_r+0x228>)
 8002ff2:	a904      	add	r1, sp, #16
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	f3af 8000 	nop.w
 8002ffa:	4607      	mov	r7, r0
 8002ffc:	1c78      	adds	r0, r7, #1
 8002ffe:	d1d6      	bne.n	8002fae <_vfiprintf_r+0x19a>
 8003000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003002:	07d9      	lsls	r1, r3, #31
 8003004:	d405      	bmi.n	8003012 <_vfiprintf_r+0x1fe>
 8003006:	89ab      	ldrh	r3, [r5, #12]
 8003008:	059a      	lsls	r2, r3, #22
 800300a:	d402      	bmi.n	8003012 <_vfiprintf_r+0x1fe>
 800300c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800300e:	f7ff fdc9 	bl	8002ba4 <__retarget_lock_release_recursive>
 8003012:	89ab      	ldrh	r3, [r5, #12]
 8003014:	065b      	lsls	r3, r3, #25
 8003016:	f53f af1f 	bmi.w	8002e58 <_vfiprintf_r+0x44>
 800301a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800301c:	e71e      	b.n	8002e5c <_vfiprintf_r+0x48>
 800301e:	ab03      	add	r3, sp, #12
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	462a      	mov	r2, r5
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <_vfiprintf_r+0x228>)
 8003026:	a904      	add	r1, sp, #16
 8003028:	4630      	mov	r0, r6
 800302a:	f000 f879 	bl	8003120 <_printf_i>
 800302e:	e7e4      	b.n	8002ffa <_vfiprintf_r+0x1e6>
 8003030:	0800391c 	.word	0x0800391c
 8003034:	08003926 	.word	0x08003926
 8003038:	00000000 	.word	0x00000000
 800303c:	08002def 	.word	0x08002def
 8003040:	08003922 	.word	0x08003922

08003044 <_printf_common>:
 8003044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003048:	4616      	mov	r6, r2
 800304a:	4698      	mov	r8, r3
 800304c:	688a      	ldr	r2, [r1, #8]
 800304e:	690b      	ldr	r3, [r1, #16]
 8003050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003054:	4293      	cmp	r3, r2
 8003056:	bfb8      	it	lt
 8003058:	4613      	movlt	r3, r2
 800305a:	6033      	str	r3, [r6, #0]
 800305c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003060:	4607      	mov	r7, r0
 8003062:	460c      	mov	r4, r1
 8003064:	b10a      	cbz	r2, 800306a <_printf_common+0x26>
 8003066:	3301      	adds	r3, #1
 8003068:	6033      	str	r3, [r6, #0]
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	0699      	lsls	r1, r3, #26
 800306e:	bf42      	ittt	mi
 8003070:	6833      	ldrmi	r3, [r6, #0]
 8003072:	3302      	addmi	r3, #2
 8003074:	6033      	strmi	r3, [r6, #0]
 8003076:	6825      	ldr	r5, [r4, #0]
 8003078:	f015 0506 	ands.w	r5, r5, #6
 800307c:	d106      	bne.n	800308c <_printf_common+0x48>
 800307e:	f104 0a19 	add.w	sl, r4, #25
 8003082:	68e3      	ldr	r3, [r4, #12]
 8003084:	6832      	ldr	r2, [r6, #0]
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	42ab      	cmp	r3, r5
 800308a:	dc26      	bgt.n	80030da <_printf_common+0x96>
 800308c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003090:	6822      	ldr	r2, [r4, #0]
 8003092:	3b00      	subs	r3, #0
 8003094:	bf18      	it	ne
 8003096:	2301      	movne	r3, #1
 8003098:	0692      	lsls	r2, r2, #26
 800309a:	d42b      	bmi.n	80030f4 <_printf_common+0xb0>
 800309c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030a0:	4641      	mov	r1, r8
 80030a2:	4638      	mov	r0, r7
 80030a4:	47c8      	blx	r9
 80030a6:	3001      	adds	r0, #1
 80030a8:	d01e      	beq.n	80030e8 <_printf_common+0xa4>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	6922      	ldr	r2, [r4, #16]
 80030ae:	f003 0306 	and.w	r3, r3, #6
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	bf02      	ittt	eq
 80030b6:	68e5      	ldreq	r5, [r4, #12]
 80030b8:	6833      	ldreq	r3, [r6, #0]
 80030ba:	1aed      	subeq	r5, r5, r3
 80030bc:	68a3      	ldr	r3, [r4, #8]
 80030be:	bf0c      	ite	eq
 80030c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030c4:	2500      	movne	r5, #0
 80030c6:	4293      	cmp	r3, r2
 80030c8:	bfc4      	itt	gt
 80030ca:	1a9b      	subgt	r3, r3, r2
 80030cc:	18ed      	addgt	r5, r5, r3
 80030ce:	2600      	movs	r6, #0
 80030d0:	341a      	adds	r4, #26
 80030d2:	42b5      	cmp	r5, r6
 80030d4:	d11a      	bne.n	800310c <_printf_common+0xc8>
 80030d6:	2000      	movs	r0, #0
 80030d8:	e008      	b.n	80030ec <_printf_common+0xa8>
 80030da:	2301      	movs	r3, #1
 80030dc:	4652      	mov	r2, sl
 80030de:	4641      	mov	r1, r8
 80030e0:	4638      	mov	r0, r7
 80030e2:	47c8      	blx	r9
 80030e4:	3001      	adds	r0, #1
 80030e6:	d103      	bne.n	80030f0 <_printf_common+0xac>
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f0:	3501      	adds	r5, #1
 80030f2:	e7c6      	b.n	8003082 <_printf_common+0x3e>
 80030f4:	18e1      	adds	r1, r4, r3
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	2030      	movs	r0, #48	@ 0x30
 80030fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030fe:	4422      	add	r2, r4
 8003100:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003104:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003108:	3302      	adds	r3, #2
 800310a:	e7c7      	b.n	800309c <_printf_common+0x58>
 800310c:	2301      	movs	r3, #1
 800310e:	4622      	mov	r2, r4
 8003110:	4641      	mov	r1, r8
 8003112:	4638      	mov	r0, r7
 8003114:	47c8      	blx	r9
 8003116:	3001      	adds	r0, #1
 8003118:	d0e6      	beq.n	80030e8 <_printf_common+0xa4>
 800311a:	3601      	adds	r6, #1
 800311c:	e7d9      	b.n	80030d2 <_printf_common+0x8e>
	...

08003120 <_printf_i>:
 8003120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003124:	7e0f      	ldrb	r7, [r1, #24]
 8003126:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003128:	2f78      	cmp	r7, #120	@ 0x78
 800312a:	4691      	mov	r9, r2
 800312c:	4680      	mov	r8, r0
 800312e:	460c      	mov	r4, r1
 8003130:	469a      	mov	sl, r3
 8003132:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003136:	d807      	bhi.n	8003148 <_printf_i+0x28>
 8003138:	2f62      	cmp	r7, #98	@ 0x62
 800313a:	d80a      	bhi.n	8003152 <_printf_i+0x32>
 800313c:	2f00      	cmp	r7, #0
 800313e:	f000 80d2 	beq.w	80032e6 <_printf_i+0x1c6>
 8003142:	2f58      	cmp	r7, #88	@ 0x58
 8003144:	f000 80b9 	beq.w	80032ba <_printf_i+0x19a>
 8003148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800314c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003150:	e03a      	b.n	80031c8 <_printf_i+0xa8>
 8003152:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003156:	2b15      	cmp	r3, #21
 8003158:	d8f6      	bhi.n	8003148 <_printf_i+0x28>
 800315a:	a101      	add	r1, pc, #4	@ (adr r1, 8003160 <_printf_i+0x40>)
 800315c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003160:	080031b9 	.word	0x080031b9
 8003164:	080031cd 	.word	0x080031cd
 8003168:	08003149 	.word	0x08003149
 800316c:	08003149 	.word	0x08003149
 8003170:	08003149 	.word	0x08003149
 8003174:	08003149 	.word	0x08003149
 8003178:	080031cd 	.word	0x080031cd
 800317c:	08003149 	.word	0x08003149
 8003180:	08003149 	.word	0x08003149
 8003184:	08003149 	.word	0x08003149
 8003188:	08003149 	.word	0x08003149
 800318c:	080032cd 	.word	0x080032cd
 8003190:	080031f7 	.word	0x080031f7
 8003194:	08003287 	.word	0x08003287
 8003198:	08003149 	.word	0x08003149
 800319c:	08003149 	.word	0x08003149
 80031a0:	080032ef 	.word	0x080032ef
 80031a4:	08003149 	.word	0x08003149
 80031a8:	080031f7 	.word	0x080031f7
 80031ac:	08003149 	.word	0x08003149
 80031b0:	08003149 	.word	0x08003149
 80031b4:	0800328f 	.word	0x0800328f
 80031b8:	6833      	ldr	r3, [r6, #0]
 80031ba:	1d1a      	adds	r2, r3, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6032      	str	r2, [r6, #0]
 80031c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031c8:	2301      	movs	r3, #1
 80031ca:	e09d      	b.n	8003308 <_printf_i+0x1e8>
 80031cc:	6833      	ldr	r3, [r6, #0]
 80031ce:	6820      	ldr	r0, [r4, #0]
 80031d0:	1d19      	adds	r1, r3, #4
 80031d2:	6031      	str	r1, [r6, #0]
 80031d4:	0606      	lsls	r6, r0, #24
 80031d6:	d501      	bpl.n	80031dc <_printf_i+0xbc>
 80031d8:	681d      	ldr	r5, [r3, #0]
 80031da:	e003      	b.n	80031e4 <_printf_i+0xc4>
 80031dc:	0645      	lsls	r5, r0, #25
 80031de:	d5fb      	bpl.n	80031d8 <_printf_i+0xb8>
 80031e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031e4:	2d00      	cmp	r5, #0
 80031e6:	da03      	bge.n	80031f0 <_printf_i+0xd0>
 80031e8:	232d      	movs	r3, #45	@ 0x2d
 80031ea:	426d      	negs	r5, r5
 80031ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031f0:	4859      	ldr	r0, [pc, #356]	@ (8003358 <_printf_i+0x238>)
 80031f2:	230a      	movs	r3, #10
 80031f4:	e011      	b.n	800321a <_printf_i+0xfa>
 80031f6:	6821      	ldr	r1, [r4, #0]
 80031f8:	6833      	ldr	r3, [r6, #0]
 80031fa:	0608      	lsls	r0, r1, #24
 80031fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003200:	d402      	bmi.n	8003208 <_printf_i+0xe8>
 8003202:	0649      	lsls	r1, r1, #25
 8003204:	bf48      	it	mi
 8003206:	b2ad      	uxthmi	r5, r5
 8003208:	2f6f      	cmp	r7, #111	@ 0x6f
 800320a:	4853      	ldr	r0, [pc, #332]	@ (8003358 <_printf_i+0x238>)
 800320c:	6033      	str	r3, [r6, #0]
 800320e:	bf14      	ite	ne
 8003210:	230a      	movne	r3, #10
 8003212:	2308      	moveq	r3, #8
 8003214:	2100      	movs	r1, #0
 8003216:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800321a:	6866      	ldr	r6, [r4, #4]
 800321c:	60a6      	str	r6, [r4, #8]
 800321e:	2e00      	cmp	r6, #0
 8003220:	bfa2      	ittt	ge
 8003222:	6821      	ldrge	r1, [r4, #0]
 8003224:	f021 0104 	bicge.w	r1, r1, #4
 8003228:	6021      	strge	r1, [r4, #0]
 800322a:	b90d      	cbnz	r5, 8003230 <_printf_i+0x110>
 800322c:	2e00      	cmp	r6, #0
 800322e:	d04b      	beq.n	80032c8 <_printf_i+0x1a8>
 8003230:	4616      	mov	r6, r2
 8003232:	fbb5 f1f3 	udiv	r1, r5, r3
 8003236:	fb03 5711 	mls	r7, r3, r1, r5
 800323a:	5dc7      	ldrb	r7, [r0, r7]
 800323c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003240:	462f      	mov	r7, r5
 8003242:	42bb      	cmp	r3, r7
 8003244:	460d      	mov	r5, r1
 8003246:	d9f4      	bls.n	8003232 <_printf_i+0x112>
 8003248:	2b08      	cmp	r3, #8
 800324a:	d10b      	bne.n	8003264 <_printf_i+0x144>
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	07df      	lsls	r7, r3, #31
 8003250:	d508      	bpl.n	8003264 <_printf_i+0x144>
 8003252:	6923      	ldr	r3, [r4, #16]
 8003254:	6861      	ldr	r1, [r4, #4]
 8003256:	4299      	cmp	r1, r3
 8003258:	bfde      	ittt	le
 800325a:	2330      	movle	r3, #48	@ 0x30
 800325c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003260:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003264:	1b92      	subs	r2, r2, r6
 8003266:	6122      	str	r2, [r4, #16]
 8003268:	f8cd a000 	str.w	sl, [sp]
 800326c:	464b      	mov	r3, r9
 800326e:	aa03      	add	r2, sp, #12
 8003270:	4621      	mov	r1, r4
 8003272:	4640      	mov	r0, r8
 8003274:	f7ff fee6 	bl	8003044 <_printf_common>
 8003278:	3001      	adds	r0, #1
 800327a:	d14a      	bne.n	8003312 <_printf_i+0x1f2>
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	b004      	add	sp, #16
 8003282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	f043 0320 	orr.w	r3, r3, #32
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	4833      	ldr	r0, [pc, #204]	@ (800335c <_printf_i+0x23c>)
 8003290:	2778      	movs	r7, #120	@ 0x78
 8003292:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	6831      	ldr	r1, [r6, #0]
 800329a:	061f      	lsls	r7, r3, #24
 800329c:	f851 5b04 	ldr.w	r5, [r1], #4
 80032a0:	d402      	bmi.n	80032a8 <_printf_i+0x188>
 80032a2:	065f      	lsls	r7, r3, #25
 80032a4:	bf48      	it	mi
 80032a6:	b2ad      	uxthmi	r5, r5
 80032a8:	6031      	str	r1, [r6, #0]
 80032aa:	07d9      	lsls	r1, r3, #31
 80032ac:	bf44      	itt	mi
 80032ae:	f043 0320 	orrmi.w	r3, r3, #32
 80032b2:	6023      	strmi	r3, [r4, #0]
 80032b4:	b11d      	cbz	r5, 80032be <_printf_i+0x19e>
 80032b6:	2310      	movs	r3, #16
 80032b8:	e7ac      	b.n	8003214 <_printf_i+0xf4>
 80032ba:	4827      	ldr	r0, [pc, #156]	@ (8003358 <_printf_i+0x238>)
 80032bc:	e7e9      	b.n	8003292 <_printf_i+0x172>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	f023 0320 	bic.w	r3, r3, #32
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	e7f6      	b.n	80032b6 <_printf_i+0x196>
 80032c8:	4616      	mov	r6, r2
 80032ca:	e7bd      	b.n	8003248 <_printf_i+0x128>
 80032cc:	6833      	ldr	r3, [r6, #0]
 80032ce:	6825      	ldr	r5, [r4, #0]
 80032d0:	6961      	ldr	r1, [r4, #20]
 80032d2:	1d18      	adds	r0, r3, #4
 80032d4:	6030      	str	r0, [r6, #0]
 80032d6:	062e      	lsls	r6, r5, #24
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	d501      	bpl.n	80032e0 <_printf_i+0x1c0>
 80032dc:	6019      	str	r1, [r3, #0]
 80032de:	e002      	b.n	80032e6 <_printf_i+0x1c6>
 80032e0:	0668      	lsls	r0, r5, #25
 80032e2:	d5fb      	bpl.n	80032dc <_printf_i+0x1bc>
 80032e4:	8019      	strh	r1, [r3, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	6123      	str	r3, [r4, #16]
 80032ea:	4616      	mov	r6, r2
 80032ec:	e7bc      	b.n	8003268 <_printf_i+0x148>
 80032ee:	6833      	ldr	r3, [r6, #0]
 80032f0:	1d1a      	adds	r2, r3, #4
 80032f2:	6032      	str	r2, [r6, #0]
 80032f4:	681e      	ldr	r6, [r3, #0]
 80032f6:	6862      	ldr	r2, [r4, #4]
 80032f8:	2100      	movs	r1, #0
 80032fa:	4630      	mov	r0, r6
 80032fc:	f7fc ff78 	bl	80001f0 <memchr>
 8003300:	b108      	cbz	r0, 8003306 <_printf_i+0x1e6>
 8003302:	1b80      	subs	r0, r0, r6
 8003304:	6060      	str	r0, [r4, #4]
 8003306:	6863      	ldr	r3, [r4, #4]
 8003308:	6123      	str	r3, [r4, #16]
 800330a:	2300      	movs	r3, #0
 800330c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003310:	e7aa      	b.n	8003268 <_printf_i+0x148>
 8003312:	6923      	ldr	r3, [r4, #16]
 8003314:	4632      	mov	r2, r6
 8003316:	4649      	mov	r1, r9
 8003318:	4640      	mov	r0, r8
 800331a:	47d0      	blx	sl
 800331c:	3001      	adds	r0, #1
 800331e:	d0ad      	beq.n	800327c <_printf_i+0x15c>
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	079b      	lsls	r3, r3, #30
 8003324:	d413      	bmi.n	800334e <_printf_i+0x22e>
 8003326:	68e0      	ldr	r0, [r4, #12]
 8003328:	9b03      	ldr	r3, [sp, #12]
 800332a:	4298      	cmp	r0, r3
 800332c:	bfb8      	it	lt
 800332e:	4618      	movlt	r0, r3
 8003330:	e7a6      	b.n	8003280 <_printf_i+0x160>
 8003332:	2301      	movs	r3, #1
 8003334:	4632      	mov	r2, r6
 8003336:	4649      	mov	r1, r9
 8003338:	4640      	mov	r0, r8
 800333a:	47d0      	blx	sl
 800333c:	3001      	adds	r0, #1
 800333e:	d09d      	beq.n	800327c <_printf_i+0x15c>
 8003340:	3501      	adds	r5, #1
 8003342:	68e3      	ldr	r3, [r4, #12]
 8003344:	9903      	ldr	r1, [sp, #12]
 8003346:	1a5b      	subs	r3, r3, r1
 8003348:	42ab      	cmp	r3, r5
 800334a:	dcf2      	bgt.n	8003332 <_printf_i+0x212>
 800334c:	e7eb      	b.n	8003326 <_printf_i+0x206>
 800334e:	2500      	movs	r5, #0
 8003350:	f104 0619 	add.w	r6, r4, #25
 8003354:	e7f5      	b.n	8003342 <_printf_i+0x222>
 8003356:	bf00      	nop
 8003358:	0800392d 	.word	0x0800392d
 800335c:	0800393e 	.word	0x0800393e

08003360 <__sflush_r>:
 8003360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003368:	0716      	lsls	r6, r2, #28
 800336a:	4605      	mov	r5, r0
 800336c:	460c      	mov	r4, r1
 800336e:	d454      	bmi.n	800341a <__sflush_r+0xba>
 8003370:	684b      	ldr	r3, [r1, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	dc02      	bgt.n	800337c <__sflush_r+0x1c>
 8003376:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	dd48      	ble.n	800340e <__sflush_r+0xae>
 800337c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800337e:	2e00      	cmp	r6, #0
 8003380:	d045      	beq.n	800340e <__sflush_r+0xae>
 8003382:	2300      	movs	r3, #0
 8003384:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003388:	682f      	ldr	r7, [r5, #0]
 800338a:	6a21      	ldr	r1, [r4, #32]
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	d030      	beq.n	80033f2 <__sflush_r+0x92>
 8003390:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	0759      	lsls	r1, r3, #29
 8003396:	d505      	bpl.n	80033a4 <__sflush_r+0x44>
 8003398:	6863      	ldr	r3, [r4, #4]
 800339a:	1ad2      	subs	r2, r2, r3
 800339c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800339e:	b10b      	cbz	r3, 80033a4 <__sflush_r+0x44>
 80033a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80033a2:	1ad2      	subs	r2, r2, r3
 80033a4:	2300      	movs	r3, #0
 80033a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80033a8:	6a21      	ldr	r1, [r4, #32]
 80033aa:	4628      	mov	r0, r5
 80033ac:	47b0      	blx	r6
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	d106      	bne.n	80033c2 <__sflush_r+0x62>
 80033b4:	6829      	ldr	r1, [r5, #0]
 80033b6:	291d      	cmp	r1, #29
 80033b8:	d82b      	bhi.n	8003412 <__sflush_r+0xb2>
 80033ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003464 <__sflush_r+0x104>)
 80033bc:	410a      	asrs	r2, r1
 80033be:	07d6      	lsls	r6, r2, #31
 80033c0:	d427      	bmi.n	8003412 <__sflush_r+0xb2>
 80033c2:	2200      	movs	r2, #0
 80033c4:	6062      	str	r2, [r4, #4]
 80033c6:	04d9      	lsls	r1, r3, #19
 80033c8:	6922      	ldr	r2, [r4, #16]
 80033ca:	6022      	str	r2, [r4, #0]
 80033cc:	d504      	bpl.n	80033d8 <__sflush_r+0x78>
 80033ce:	1c42      	adds	r2, r0, #1
 80033d0:	d101      	bne.n	80033d6 <__sflush_r+0x76>
 80033d2:	682b      	ldr	r3, [r5, #0]
 80033d4:	b903      	cbnz	r3, 80033d8 <__sflush_r+0x78>
 80033d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80033d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033da:	602f      	str	r7, [r5, #0]
 80033dc:	b1b9      	cbz	r1, 800340e <__sflush_r+0xae>
 80033de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033e2:	4299      	cmp	r1, r3
 80033e4:	d002      	beq.n	80033ec <__sflush_r+0x8c>
 80033e6:	4628      	mov	r0, r5
 80033e8:	f7ff fbf2 	bl	8002bd0 <_free_r>
 80033ec:	2300      	movs	r3, #0
 80033ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80033f0:	e00d      	b.n	800340e <__sflush_r+0xae>
 80033f2:	2301      	movs	r3, #1
 80033f4:	4628      	mov	r0, r5
 80033f6:	47b0      	blx	r6
 80033f8:	4602      	mov	r2, r0
 80033fa:	1c50      	adds	r0, r2, #1
 80033fc:	d1c9      	bne.n	8003392 <__sflush_r+0x32>
 80033fe:	682b      	ldr	r3, [r5, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0c6      	beq.n	8003392 <__sflush_r+0x32>
 8003404:	2b1d      	cmp	r3, #29
 8003406:	d001      	beq.n	800340c <__sflush_r+0xac>
 8003408:	2b16      	cmp	r3, #22
 800340a:	d11e      	bne.n	800344a <__sflush_r+0xea>
 800340c:	602f      	str	r7, [r5, #0]
 800340e:	2000      	movs	r0, #0
 8003410:	e022      	b.n	8003458 <__sflush_r+0xf8>
 8003412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003416:	b21b      	sxth	r3, r3
 8003418:	e01b      	b.n	8003452 <__sflush_r+0xf2>
 800341a:	690f      	ldr	r7, [r1, #16]
 800341c:	2f00      	cmp	r7, #0
 800341e:	d0f6      	beq.n	800340e <__sflush_r+0xae>
 8003420:	0793      	lsls	r3, r2, #30
 8003422:	680e      	ldr	r6, [r1, #0]
 8003424:	bf08      	it	eq
 8003426:	694b      	ldreq	r3, [r1, #20]
 8003428:	600f      	str	r7, [r1, #0]
 800342a:	bf18      	it	ne
 800342c:	2300      	movne	r3, #0
 800342e:	eba6 0807 	sub.w	r8, r6, r7
 8003432:	608b      	str	r3, [r1, #8]
 8003434:	f1b8 0f00 	cmp.w	r8, #0
 8003438:	dde9      	ble.n	800340e <__sflush_r+0xae>
 800343a:	6a21      	ldr	r1, [r4, #32]
 800343c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800343e:	4643      	mov	r3, r8
 8003440:	463a      	mov	r2, r7
 8003442:	4628      	mov	r0, r5
 8003444:	47b0      	blx	r6
 8003446:	2800      	cmp	r0, #0
 8003448:	dc08      	bgt.n	800345c <__sflush_r+0xfc>
 800344a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800344e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003452:	81a3      	strh	r3, [r4, #12]
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800345c:	4407      	add	r7, r0
 800345e:	eba8 0800 	sub.w	r8, r8, r0
 8003462:	e7e7      	b.n	8003434 <__sflush_r+0xd4>
 8003464:	dfbffffe 	.word	0xdfbffffe

08003468 <_fflush_r>:
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	690b      	ldr	r3, [r1, #16]
 800346c:	4605      	mov	r5, r0
 800346e:	460c      	mov	r4, r1
 8003470:	b913      	cbnz	r3, 8003478 <_fflush_r+0x10>
 8003472:	2500      	movs	r5, #0
 8003474:	4628      	mov	r0, r5
 8003476:	bd38      	pop	{r3, r4, r5, pc}
 8003478:	b118      	cbz	r0, 8003482 <_fflush_r+0x1a>
 800347a:	6a03      	ldr	r3, [r0, #32]
 800347c:	b90b      	cbnz	r3, 8003482 <_fflush_r+0x1a>
 800347e:	f7ff fa79 	bl	8002974 <__sinit>
 8003482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f3      	beq.n	8003472 <_fflush_r+0xa>
 800348a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800348c:	07d0      	lsls	r0, r2, #31
 800348e:	d404      	bmi.n	800349a <_fflush_r+0x32>
 8003490:	0599      	lsls	r1, r3, #22
 8003492:	d402      	bmi.n	800349a <_fflush_r+0x32>
 8003494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003496:	f7ff fb84 	bl	8002ba2 <__retarget_lock_acquire_recursive>
 800349a:	4628      	mov	r0, r5
 800349c:	4621      	mov	r1, r4
 800349e:	f7ff ff5f 	bl	8003360 <__sflush_r>
 80034a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034a4:	07da      	lsls	r2, r3, #31
 80034a6:	4605      	mov	r5, r0
 80034a8:	d4e4      	bmi.n	8003474 <_fflush_r+0xc>
 80034aa:	89a3      	ldrh	r3, [r4, #12]
 80034ac:	059b      	lsls	r3, r3, #22
 80034ae:	d4e1      	bmi.n	8003474 <_fflush_r+0xc>
 80034b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034b2:	f7ff fb77 	bl	8002ba4 <__retarget_lock_release_recursive>
 80034b6:	e7dd      	b.n	8003474 <_fflush_r+0xc>

080034b8 <__swbuf_r>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	460e      	mov	r6, r1
 80034bc:	4614      	mov	r4, r2
 80034be:	4605      	mov	r5, r0
 80034c0:	b118      	cbz	r0, 80034ca <__swbuf_r+0x12>
 80034c2:	6a03      	ldr	r3, [r0, #32]
 80034c4:	b90b      	cbnz	r3, 80034ca <__swbuf_r+0x12>
 80034c6:	f7ff fa55 	bl	8002974 <__sinit>
 80034ca:	69a3      	ldr	r3, [r4, #24]
 80034cc:	60a3      	str	r3, [r4, #8]
 80034ce:	89a3      	ldrh	r3, [r4, #12]
 80034d0:	071a      	lsls	r2, r3, #28
 80034d2:	d501      	bpl.n	80034d8 <__swbuf_r+0x20>
 80034d4:	6923      	ldr	r3, [r4, #16]
 80034d6:	b943      	cbnz	r3, 80034ea <__swbuf_r+0x32>
 80034d8:	4621      	mov	r1, r4
 80034da:	4628      	mov	r0, r5
 80034dc:	f000 f82a 	bl	8003534 <__swsetup_r>
 80034e0:	b118      	cbz	r0, 80034ea <__swbuf_r+0x32>
 80034e2:	f04f 37ff 	mov.w	r7, #4294967295
 80034e6:	4638      	mov	r0, r7
 80034e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	6922      	ldr	r2, [r4, #16]
 80034ee:	1a98      	subs	r0, r3, r2
 80034f0:	6963      	ldr	r3, [r4, #20]
 80034f2:	b2f6      	uxtb	r6, r6
 80034f4:	4283      	cmp	r3, r0
 80034f6:	4637      	mov	r7, r6
 80034f8:	dc05      	bgt.n	8003506 <__swbuf_r+0x4e>
 80034fa:	4621      	mov	r1, r4
 80034fc:	4628      	mov	r0, r5
 80034fe:	f7ff ffb3 	bl	8003468 <_fflush_r>
 8003502:	2800      	cmp	r0, #0
 8003504:	d1ed      	bne.n	80034e2 <__swbuf_r+0x2a>
 8003506:	68a3      	ldr	r3, [r4, #8]
 8003508:	3b01      	subs	r3, #1
 800350a:	60a3      	str	r3, [r4, #8]
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	6022      	str	r2, [r4, #0]
 8003512:	701e      	strb	r6, [r3, #0]
 8003514:	6962      	ldr	r2, [r4, #20]
 8003516:	1c43      	adds	r3, r0, #1
 8003518:	429a      	cmp	r2, r3
 800351a:	d004      	beq.n	8003526 <__swbuf_r+0x6e>
 800351c:	89a3      	ldrh	r3, [r4, #12]
 800351e:	07db      	lsls	r3, r3, #31
 8003520:	d5e1      	bpl.n	80034e6 <__swbuf_r+0x2e>
 8003522:	2e0a      	cmp	r6, #10
 8003524:	d1df      	bne.n	80034e6 <__swbuf_r+0x2e>
 8003526:	4621      	mov	r1, r4
 8003528:	4628      	mov	r0, r5
 800352a:	f7ff ff9d 	bl	8003468 <_fflush_r>
 800352e:	2800      	cmp	r0, #0
 8003530:	d0d9      	beq.n	80034e6 <__swbuf_r+0x2e>
 8003532:	e7d6      	b.n	80034e2 <__swbuf_r+0x2a>

08003534 <__swsetup_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4b29      	ldr	r3, [pc, #164]	@ (80035dc <__swsetup_r+0xa8>)
 8003538:	4605      	mov	r5, r0
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	460c      	mov	r4, r1
 800353e:	b118      	cbz	r0, 8003548 <__swsetup_r+0x14>
 8003540:	6a03      	ldr	r3, [r0, #32]
 8003542:	b90b      	cbnz	r3, 8003548 <__swsetup_r+0x14>
 8003544:	f7ff fa16 	bl	8002974 <__sinit>
 8003548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800354c:	0719      	lsls	r1, r3, #28
 800354e:	d422      	bmi.n	8003596 <__swsetup_r+0x62>
 8003550:	06da      	lsls	r2, r3, #27
 8003552:	d407      	bmi.n	8003564 <__swsetup_r+0x30>
 8003554:	2209      	movs	r2, #9
 8003556:	602a      	str	r2, [r5, #0]
 8003558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800355c:	81a3      	strh	r3, [r4, #12]
 800355e:	f04f 30ff 	mov.w	r0, #4294967295
 8003562:	e033      	b.n	80035cc <__swsetup_r+0x98>
 8003564:	0758      	lsls	r0, r3, #29
 8003566:	d512      	bpl.n	800358e <__swsetup_r+0x5a>
 8003568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800356a:	b141      	cbz	r1, 800357e <__swsetup_r+0x4a>
 800356c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003570:	4299      	cmp	r1, r3
 8003572:	d002      	beq.n	800357a <__swsetup_r+0x46>
 8003574:	4628      	mov	r0, r5
 8003576:	f7ff fb2b 	bl	8002bd0 <_free_r>
 800357a:	2300      	movs	r3, #0
 800357c:	6363      	str	r3, [r4, #52]	@ 0x34
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003584:	81a3      	strh	r3, [r4, #12]
 8003586:	2300      	movs	r3, #0
 8003588:	6063      	str	r3, [r4, #4]
 800358a:	6923      	ldr	r3, [r4, #16]
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	89a3      	ldrh	r3, [r4, #12]
 8003590:	f043 0308 	orr.w	r3, r3, #8
 8003594:	81a3      	strh	r3, [r4, #12]
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	b94b      	cbnz	r3, 80035ae <__swsetup_r+0x7a>
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a4:	d003      	beq.n	80035ae <__swsetup_r+0x7a>
 80035a6:	4621      	mov	r1, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	f000 f893 	bl	80036d4 <__smakebuf_r>
 80035ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035b2:	f013 0201 	ands.w	r2, r3, #1
 80035b6:	d00a      	beq.n	80035ce <__swsetup_r+0x9a>
 80035b8:	2200      	movs	r2, #0
 80035ba:	60a2      	str	r2, [r4, #8]
 80035bc:	6962      	ldr	r2, [r4, #20]
 80035be:	4252      	negs	r2, r2
 80035c0:	61a2      	str	r2, [r4, #24]
 80035c2:	6922      	ldr	r2, [r4, #16]
 80035c4:	b942      	cbnz	r2, 80035d8 <__swsetup_r+0xa4>
 80035c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80035ca:	d1c5      	bne.n	8003558 <__swsetup_r+0x24>
 80035cc:	bd38      	pop	{r3, r4, r5, pc}
 80035ce:	0799      	lsls	r1, r3, #30
 80035d0:	bf58      	it	pl
 80035d2:	6962      	ldrpl	r2, [r4, #20]
 80035d4:	60a2      	str	r2, [r4, #8]
 80035d6:	e7f4      	b.n	80035c2 <__swsetup_r+0x8e>
 80035d8:	2000      	movs	r0, #0
 80035da:	e7f7      	b.n	80035cc <__swsetup_r+0x98>
 80035dc:	20000028 	.word	0x20000028

080035e0 <_raise_r>:
 80035e0:	291f      	cmp	r1, #31
 80035e2:	b538      	push	{r3, r4, r5, lr}
 80035e4:	4605      	mov	r5, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	d904      	bls.n	80035f4 <_raise_r+0x14>
 80035ea:	2316      	movs	r3, #22
 80035ec:	6003      	str	r3, [r0, #0]
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80035f6:	b112      	cbz	r2, 80035fe <_raise_r+0x1e>
 80035f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80035fc:	b94b      	cbnz	r3, 8003612 <_raise_r+0x32>
 80035fe:	4628      	mov	r0, r5
 8003600:	f000 f830 	bl	8003664 <_getpid_r>
 8003604:	4622      	mov	r2, r4
 8003606:	4601      	mov	r1, r0
 8003608:	4628      	mov	r0, r5
 800360a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800360e:	f000 b817 	b.w	8003640 <_kill_r>
 8003612:	2b01      	cmp	r3, #1
 8003614:	d00a      	beq.n	800362c <_raise_r+0x4c>
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	d103      	bne.n	8003622 <_raise_r+0x42>
 800361a:	2316      	movs	r3, #22
 800361c:	6003      	str	r3, [r0, #0]
 800361e:	2001      	movs	r0, #1
 8003620:	e7e7      	b.n	80035f2 <_raise_r+0x12>
 8003622:	2100      	movs	r1, #0
 8003624:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003628:	4620      	mov	r0, r4
 800362a:	4798      	blx	r3
 800362c:	2000      	movs	r0, #0
 800362e:	e7e0      	b.n	80035f2 <_raise_r+0x12>

08003630 <raise>:
 8003630:	4b02      	ldr	r3, [pc, #8]	@ (800363c <raise+0xc>)
 8003632:	4601      	mov	r1, r0
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	f7ff bfd3 	b.w	80035e0 <_raise_r>
 800363a:	bf00      	nop
 800363c:	20000028 	.word	0x20000028

08003640 <_kill_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4d07      	ldr	r5, [pc, #28]	@ (8003660 <_kill_r+0x20>)
 8003644:	2300      	movs	r3, #0
 8003646:	4604      	mov	r4, r0
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	f7fd fad3 	bl	8000bf8 <_kill>
 8003652:	1c43      	adds	r3, r0, #1
 8003654:	d102      	bne.n	800365c <_kill_r+0x1c>
 8003656:	682b      	ldr	r3, [r5, #0]
 8003658:	b103      	cbz	r3, 800365c <_kill_r+0x1c>
 800365a:	6023      	str	r3, [r4, #0]
 800365c:	bd38      	pop	{r3, r4, r5, pc}
 800365e:	bf00      	nop
 8003660:	20000230 	.word	0x20000230

08003664 <_getpid_r>:
 8003664:	f7fd bac0 	b.w	8000be8 <_getpid>

08003668 <_sbrk_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4d06      	ldr	r5, [pc, #24]	@ (8003684 <_sbrk_r+0x1c>)
 800366c:	2300      	movs	r3, #0
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
 8003672:	602b      	str	r3, [r5, #0]
 8003674:	f7fd fb48 	bl	8000d08 <_sbrk>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_sbrk_r+0x1a>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_sbrk_r+0x1a>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	20000230 	.word	0x20000230

08003688 <__swhatbuf_r>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	460c      	mov	r4, r1
 800368c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003690:	2900      	cmp	r1, #0
 8003692:	b096      	sub	sp, #88	@ 0x58
 8003694:	4615      	mov	r5, r2
 8003696:	461e      	mov	r6, r3
 8003698:	da0d      	bge.n	80036b6 <__swhatbuf_r+0x2e>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	bf14      	ite	ne
 80036a6:	2340      	movne	r3, #64	@ 0x40
 80036a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80036ac:	2000      	movs	r0, #0
 80036ae:	6031      	str	r1, [r6, #0]
 80036b0:	602b      	str	r3, [r5, #0]
 80036b2:	b016      	add	sp, #88	@ 0x58
 80036b4:	bd70      	pop	{r4, r5, r6, pc}
 80036b6:	466a      	mov	r2, sp
 80036b8:	f000 f848 	bl	800374c <_fstat_r>
 80036bc:	2800      	cmp	r0, #0
 80036be:	dbec      	blt.n	800369a <__swhatbuf_r+0x12>
 80036c0:	9901      	ldr	r1, [sp, #4]
 80036c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80036c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80036ca:	4259      	negs	r1, r3
 80036cc:	4159      	adcs	r1, r3
 80036ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036d2:	e7eb      	b.n	80036ac <__swhatbuf_r+0x24>

080036d4 <__smakebuf_r>:
 80036d4:	898b      	ldrh	r3, [r1, #12]
 80036d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036d8:	079d      	lsls	r5, r3, #30
 80036da:	4606      	mov	r6, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	d507      	bpl.n	80036f0 <__smakebuf_r+0x1c>
 80036e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	6123      	str	r3, [r4, #16]
 80036e8:	2301      	movs	r3, #1
 80036ea:	6163      	str	r3, [r4, #20]
 80036ec:	b003      	add	sp, #12
 80036ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f0:	ab01      	add	r3, sp, #4
 80036f2:	466a      	mov	r2, sp
 80036f4:	f7ff ffc8 	bl	8003688 <__swhatbuf_r>
 80036f8:	9f00      	ldr	r7, [sp, #0]
 80036fa:	4605      	mov	r5, r0
 80036fc:	4639      	mov	r1, r7
 80036fe:	4630      	mov	r0, r6
 8003700:	f7ff fad2 	bl	8002ca8 <_malloc_r>
 8003704:	b948      	cbnz	r0, 800371a <__smakebuf_r+0x46>
 8003706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800370a:	059a      	lsls	r2, r3, #22
 800370c:	d4ee      	bmi.n	80036ec <__smakebuf_r+0x18>
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	81a3      	strh	r3, [r4, #12]
 8003718:	e7e2      	b.n	80036e0 <__smakebuf_r+0xc>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	6020      	str	r0, [r4, #0]
 800371e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	9b01      	ldr	r3, [sp, #4]
 8003726:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800372a:	b15b      	cbz	r3, 8003744 <__smakebuf_r+0x70>
 800372c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003730:	4630      	mov	r0, r6
 8003732:	f000 f81d 	bl	8003770 <_isatty_r>
 8003736:	b128      	cbz	r0, 8003744 <__smakebuf_r+0x70>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	431d      	orrs	r5, r3
 8003748:	81a5      	strh	r5, [r4, #12]
 800374a:	e7cf      	b.n	80036ec <__smakebuf_r+0x18>

0800374c <_fstat_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	4d07      	ldr	r5, [pc, #28]	@ (800376c <_fstat_r+0x20>)
 8003750:	2300      	movs	r3, #0
 8003752:	4604      	mov	r4, r0
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	f7fd faad 	bl	8000cb8 <_fstat>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d102      	bne.n	8003768 <_fstat_r+0x1c>
 8003762:	682b      	ldr	r3, [r5, #0]
 8003764:	b103      	cbz	r3, 8003768 <_fstat_r+0x1c>
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	bd38      	pop	{r3, r4, r5, pc}
 800376a:	bf00      	nop
 800376c:	20000230 	.word	0x20000230

08003770 <_isatty_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4d06      	ldr	r5, [pc, #24]	@ (800378c <_isatty_r+0x1c>)
 8003774:	2300      	movs	r3, #0
 8003776:	4604      	mov	r4, r0
 8003778:	4608      	mov	r0, r1
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	f7fd faac 	bl	8000cd8 <_isatty>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	d102      	bne.n	800378a <_isatty_r+0x1a>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	b103      	cbz	r3, 800378a <_isatty_r+0x1a>
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	bd38      	pop	{r3, r4, r5, pc}
 800378c:	20000230 	.word	0x20000230

08003790 <_init>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr

0800379c <_fini>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr
