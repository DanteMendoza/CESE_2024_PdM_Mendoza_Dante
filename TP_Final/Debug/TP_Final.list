
TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047bc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ec  080049ec  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f4  080049f4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f4  080049f4  000059f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080049fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          00000244  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b0  200002b0  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9a2  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002532  00000000  00000000  00013a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00015f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b02  00000000  00000000  00016db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024649  00000000  00000000  000178ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012749  00000000  00000000  0003bf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da945  00000000  00000000  0004e64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128f91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004034  00000000  00000000  00128fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0012d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004954 	.word	0x08004954

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08004954 	.word	0x08004954

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a25      	ldr	r2, [pc, #148]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b23      	ldr	r3, [pc, #140]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a1e      	ldr	r2, [pc, #120]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_GPIO_Init+0xb4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2108      	movs	r1, #8
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <MX_GPIO_Init+0xb8>)
 8000de8:	f001 f9a2 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8000dec:	2308      	movs	r3, #8
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_GPIO_Init+0xb8>)
 8000e04:	f000 ffe8 	bl	8001dd8 <HAL_GPIO_Init>

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	@ 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e90 <MX_I2C1_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e24:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <MX_I2C1_Init+0x7c>)
 8000e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e42:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e48:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e54:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e56:	f001 f985 	bl	8002164 <HAL_I2C_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e60:	f000 f918 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4809      	ldr	r0, [pc, #36]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e68:	f001 fe19 	bl	8002a9e <HAL_I2CEx_ConfigAnalogFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e72:	f000 f90f 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_I2C1_Init+0x74>)
 8000e7a:	f001 fe4c 	bl	8002b16 <HAL_I2CEx_ConfigDigitalFilter>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e84:	f000 f906 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000088 	.word	0x20000088
 8000e90:	40005400 	.word	0x40005400
 8000e94:	000186a0 	.word	0x000186a0

08000e98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	@ (8000f1c <HAL_I2C_MspInit+0x84>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12c      	bne.n	8000f14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a17      	ldr	r2, [pc, #92]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ed6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <HAL_I2C_MspInit+0x8c>)
 8000ef4:	f000 ff70 	bl	8001dd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000f02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_I2C_MspInit+0x88>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	@ 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400

08000f28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f2c:	f000 fdac 	bl	8001a88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f30:	f000 f846 	bl	8000fc0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f34:	f7ff ff12 	bl	8000d5c <MX_GPIO_Init>
	MX_TIM1_Init();
 8000f38:	f000 f95c 	bl	80011f4 <MX_TIM1_Init>
	MX_I2C1_Init();
 8000f3c:	f7ff ff6c 	bl	8000e18 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HCSR04_Init();
 8000f40:	f000 fb0a 	bl	8001558 <HCSR04_Init>
	HD44780_Init(2);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f000 fba5 	bl	8001694 <HD44780_Init>
	hcsr04FSM_init();
 8000f4a:	f000 fb3f 	bl	80015cc <hcsr04FSM_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (delayRead(&delay_lcd)) {
 8000f4e:	4817      	ldr	r0, [pc, #92]	@ (8000fac <main+0x84>)
 8000f50:	f000 fa1f 	bl	8001392 <delayRead>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f9      	beq.n	8000f4e <main+0x26>
			hcsr04_distance = HCSR04_Get_Distance();
 8000f5a:	f000 fb0f 	bl	800157c <HCSR04_Get_Distance>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <main+0x88>)
 8000f64:	801a      	strh	r2, [r3, #0]

			hcsr04FSM_update(hcsr04_distance);
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <main+0x88>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fb3a 	bl	80015e4 <hcsr04FSM_update>

			HD44780_Clear();
 8000f70:	f000 fc14 	bl	800179c <HD44780_Clear>
			HD44780_SetCursor(0, 0); // Primera linea.
 8000f74:	2100      	movs	r1, #0
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 fc26 	bl	80017c8 <HD44780_SetCursor>
			HD44780_PrintStr("Sensor HC-SR04");
 8000f7c:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <main+0x8c>)
 8000f7e:	f000 fc94 	bl	80018aa <HD44780_PrintStr>

			HD44780_SetCursor(0, 1); // Segunda linea.
 8000f82:	2101      	movs	r1, #1
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 fc1f 	bl	80017c8 <HD44780_SetCursor>
			sprintf(buffer_lcd, "Distancia: %ucm.", hcsr04_distance);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <main+0x88>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4909      	ldr	r1, [pc, #36]	@ (8000fb8 <main+0x90>)
 8000f92:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <main+0x94>)
 8000f94:	f003 f83e 	bl	8004014 <siprintf>
			//snprintf(buffer_lcd, sizeof(buffer_lcd), "Distancia: %ucm.", hcsr04_distance);
			HD44780_PrintStr(buffer_lcd);
 8000f98:	4808      	ldr	r0, [pc, #32]	@ (8000fbc <main+0x94>)
 8000f9a:	f000 fc86 	bl	80018aa <HD44780_PrintStr>
			delayWrite(&delay_lcd, REFRESH_LCD);
 8000f9e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fa2:	4802      	ldr	r0, [pc, #8]	@ (8000fac <main+0x84>)
 8000fa4:	f000 fa21 	bl	80013ea <delayWrite>
		if (delayRead(&delay_lcd)) {
 8000fa8:	e7d1      	b.n	8000f4e <main+0x26>
 8000faa:	bf00      	nop
 8000fac:	200000f4 	.word	0x200000f4
 8000fb0:	200000dc 	.word	0x200000dc
 8000fb4:	0800496c 	.word	0x0800496c
 8000fb8:	0800497c 	.word	0x0800497c
 8000fbc:	200000e0 	.word	0x200000e0

08000fc0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	@ 0x50
 8000fc4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	2230      	movs	r2, #48	@ 0x30
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 f840 	bl	8004054 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	4b28      	ldr	r3, [pc, #160]	@ (800108c <SystemClock_Config+0xcc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	4a27      	ldr	r2, [pc, #156]	@ (800108c <SystemClock_Config+0xcc>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff4:	4b25      	ldr	r3, [pc, #148]	@ (800108c <SystemClock_Config+0xcc>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <SystemClock_Config+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800100c:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <SystemClock_Config+0xd0>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001028:	2310      	movs	r3, #16
 800102a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102c:	2302      	movs	r3, #2
 800102e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001030:	2300      	movs	r3, #0
 8001032:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001034:	2308      	movs	r3, #8
 8001036:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001038:	2348      	movs	r3, #72	@ 0x48
 800103a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fda3 	bl	8002b94 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x98>
		Error_Handler();
 8001054:	f000 f81e 	bl	8001094 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001068:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2102      	movs	r1, #2
 8001074:	4618      	mov	r0, r3
 8001076:	f002 f805 	bl	8003084 <HAL_RCC_ClockConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xc4>
		Error_Handler();
 8001080:	f000 f808 	bl	8001094 <Error_Handler>
	}
}
 8001084:	bf00      	nop
 8001086:	3750      	adds	r7, #80	@ 0x50
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000

08001094 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <HAL_MspInit+0x4c>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <HAL_MspInit+0x4c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 fcf1 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <TIM1_CC_IRQHandler+0x10>)
 8001156:	f002 fad9 	bl	800370c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000104 	.word	0x20000104

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f002 ff66 	bl	8004064 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20030000 	.word	0x20030000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	20000100 	.word	0x20000100
 80011cc:	200002b0 	.word	0x200002b0

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001210:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <MX_TIM1_Init+0xa4>)
 8001212:	4a22      	ldr	r2, [pc, #136]	@ (800129c <MX_TIM1_Init+0xa8>)
 8001214:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <MX_TIM1_Init+0xa4>)
 8001218:	2247      	movs	r2, #71	@ 0x47
 800121a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_TIM1_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <MX_TIM1_Init+0xa4>)
 8001224:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001228:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <MX_TIM1_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_TIM1_Init+0xa4>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <MX_TIM1_Init+0xa4>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800123c:	4816      	ldr	r0, [pc, #88]	@ (8001298 <MX_TIM1_Init+0xa4>)
 800123e:	f002 f8ed 	bl	800341c <HAL_TIM_IC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001248:	f7ff ff24 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4619      	mov	r1, r3
 800125a:	480f      	ldr	r0, [pc, #60]	@ (8001298 <MX_TIM1_Init+0xa4>)
 800125c:	f002 fe4a 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001266:	f7ff ff15 	bl	8001094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800126e:	2301      	movs	r3, #1
 8001270:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_TIM1_Init+0xa4>)
 8001282:	f002 fb33 	bl	80038ec <HAL_TIM_IC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800128c:	f7ff ff02 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000104 	.word	0x20000104
 800129c:	40010000 	.word	0x40010000

080012a0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001334 <HAL_TIM_IC_MspInit+0x94>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d134      	bne.n	800132c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_TIM_IC_MspInit+0x98>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <HAL_TIM_IC_MspInit+0x98>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_TIM_IC_MspInit+0x98>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_TIM_IC_MspInit+0x98>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <HAL_TIM_IC_MspInit+0x98>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_TIM_IC_MspInit+0x98>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800130c:	2301      	movs	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4809      	ldr	r0, [pc, #36]	@ (800133c <HAL_TIM_IC_MspInit+0x9c>)
 8001318:	f000 fd5e 	bl	8001dd8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	201b      	movs	r0, #27
 8001322:	f000 fd22 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001326:	201b      	movs	r0, #27
 8001328:	f000 fd3b 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010000 	.word	0x40010000
 8001338:	40023800 	.word	0x40023800
 800133c:	40021000 	.word	0x40021000

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001378 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001344:	f7ff ff44 	bl	80011d0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	@ (8001380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	@ (800138c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800136e:	f002 fe7f 	bl	8004070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff fdd9 	bl	8000f28 <main>
  bx  lr    
 8001376:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001378:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001384:	080049fc 	.word	0x080049fc
  ldr r2, =_sbss
 8001388:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800138c:	200002b0 	.word	0x200002b0

08001390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC_IRQHandler>

08001392 <delayRead>:
 * En caso afirmativo, devuelve Verdadero, caso contrario devuelve Falso.
 * Si es la primera vez que se llama a la función, se pone delay->running = Verdadero.
 * @param *delay: puntero a la estructura del delay.
 * @return bool.
 */
bool_t delayRead(delay_t *delay) {
 8001392:	b590      	push	{r4, r7, lr}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	if (delay != NULL) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01f      	beq.n	80013e0 <delayRead+0x4e>
		if (!delay->running) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7a1b      	ldrb	r3, [r3, #8]
 80013a4:	f083 0301 	eor.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <delayRead+0x30>
			// Tomar marca de tiempo
			delay->startTime = HAL_GetTick();
 80013ae:	f000 fbd1 	bl	8001b54 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	601a      	str	r2, [r3, #0]
			// Cambiar el flag a 'true'
			delay->running = true;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	721a      	strb	r2, [r3, #8]
			return false;
 80013be:	2300      	movs	r3, #0
 80013c0:	e00f      	b.n	80013e2 <delayRead+0x50>
		}

		if (delay->duration <= (HAL_GetTick() - delay->startTime)) {
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685c      	ldr	r4, [r3, #4]
 80013c6:	f000 fbc5 	bl	8001b54 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	429c      	cmp	r4, r3
 80013d4:	d804      	bhi.n	80013e0 <delayRead+0x4e>
			delay->running = false;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	721a      	strb	r2, [r3, #8]
			return true;  // El tiempo se cumplió.
 80013dc:	2301      	movs	r3, #1
 80013de:	e000      	b.n	80013e2 <delayRead+0x50>
		}

	}

	return false;  // El tiempo no se ha cumplido.
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}

080013ea <delayWrite>:
 * @brief Esta función se utiliza para cambiar la duración de un delay ya inicializado.
 * @param *delay: puntero a la estructura del delay.
 * @param duration: duracion en milisegundos.
 * @return None.
 */
void delayWrite(delay_t *delay, tick_t duration) {
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
	if (delay != NULL && duration >= MINIMUM_DURATION) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <delayWrite+0x1c>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <delayWrite+0x1c>
		delay->duration = duration;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	605a      	str	r2, [r3, #4]
	}
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	0000      	movs	r0, r0
 8001414:	0000      	movs	r0, r0
	...

08001418 <HAL_TIM_IC_CaptureCallback>:
 * Calcula la distancia utilizando la señal capturada y actualiza la variable global 'dist'.
 * No se llama directamente desde el código; se llama automáticamente por el hardware del temporizador.
 * @param htim: Puntero al controlador de temporizador de hardware que generó la interrupción.
 * @return None.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7f1b      	ldrb	r3, [r3, #28]
 8001424:	2b01      	cmp	r3, #1
 8001426:	f040 8083 	bne.w	8001530 <HAL_TIM_IC_CaptureCallback+0x118>
		if (flag_captured == 0) {
 800142a:	4b45      	ldr	r3, [pc, #276]	@ (8001540 <HAL_TIM_IC_CaptureCallback+0x128>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d11a      	bne.n	8001468 <HAL_TIM_IC_CaptureCallback+0x50>
			t_ini = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f002 faf5 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 800143a:	4603      	mov	r3, r0
 800143c:	4a41      	ldr	r2, [pc, #260]	@ (8001544 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800143e:	6013      	str	r3, [r2, #0]
			flag_captured = 1;
 8001440:	4b3f      	ldr	r3, [pc, #252]	@ (8001540 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6a1a      	ldr	r2, [r3, #32]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 020a 	bic.w	r2, r2, #10
 8001454:	621a      	str	r2, [r3, #32]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a1a      	ldr	r2, [r3, #32]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0202 	orr.w	r2, r2, #2
 8001464:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001466:	e063      	b.n	8001530 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (flag_captured == 1) {
 8001468:	4b35      	ldr	r3, [pc, #212]	@ (8001540 <HAL_TIM_IC_CaptureCallback+0x128>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d15f      	bne.n	8001530 <HAL_TIM_IC_CaptureCallback+0x118>
			t_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001470:	2100      	movs	r1, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f002 fad6 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 8001478:	4603      	mov	r3, r0
 800147a:	4a33      	ldr	r2, [pc, #204]	@ (8001548 <HAL_TIM_IC_CaptureCallback+0x130>)
 800147c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SetCounter(htim, 0);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
			if (t_end > t_ini) {
 8001486:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b2e      	ldr	r3, [pc, #184]	@ (8001544 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d907      	bls.n	80014a2 <HAL_TIM_IC_CaptureCallback+0x8a>
				t_time = t_end - t_ini;
 8001492:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b2b      	ldr	r3, [pc, #172]	@ (8001544 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a2b      	ldr	r2, [pc, #172]	@ (800154c <HAL_TIM_IC_CaptureCallback+0x134>)
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e00f      	b.n	80014c2 <HAL_TIM_IC_CaptureCallback+0xaa>
			} else if (t_ini > t_end) {
 80014a2:	4b28      	ldr	r3, [pc, #160]	@ (8001544 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b28      	ldr	r3, [pc, #160]	@ (8001548 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d909      	bls.n	80014c2 <HAL_TIM_IC_CaptureCallback+0xaa>
				t_time = (0xFFFF - t_ini) + t_end;
 80014ae:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <HAL_TIM_IC_CaptureCallback+0x130>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80014bc:	33ff      	adds	r3, #255	@ 0xff
 80014be:	4a23      	ldr	r2, [pc, #140]	@ (800154c <HAL_TIM_IC_CaptureCallback+0x134>)
 80014c0:	6013      	str	r3, [r2, #0]
			dist = (uint16_t) ((t_time * 0.034) / 2);
 80014c2:	4b22      	ldr	r3, [pc, #136]	@ (800154c <HAL_TIM_IC_CaptureCallback+0x134>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f824 	bl	8000514 <__aeabi_ui2d>
 80014cc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001538 <HAL_TIM_IC_CaptureCallback+0x120>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f899 	bl	8000608 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014e6:	f7ff f9b9 	bl	800085c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fa9b 	bl	8000a2c <__aeabi_d2uiz>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_TIM_IC_CaptureCallback+0x138>)
 80014fc:	801a      	strh	r2, [r3, #0]
			flag_captured = 0;
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a1a      	ldr	r2, [r3, #32]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020a 	bic.w	r2, r2, #10
 8001512:	621a      	str	r2, [r3, #32]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a12      	ldr	r2, [r2, #32]
 800151e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0202 	bic.w	r2, r2, #2
 800152e:	60da      	str	r2, [r3, #12]
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	b020c49c 	.word	0xb020c49c
 800153c:	3fa16872 	.word	0x3fa16872
 8001540:	2000015a 	.word	0x2000015a
 8001544:	2000014c 	.word	0x2000014c
 8001548:	20000150 	.word	0x20000150
 800154c:	20000154 	.word	0x20000154
 8001550:	20000158 	.word	0x20000158
 8001554:	20000104 	.word	0x20000104

08001558 <HCSR04_Init>:
/**
 * @brief Inicializa el sensor de distancia ultrasónico HC-SR04.
 * Esta función configura los pines GPIO y el temporizador de hardware (TIM) para el funcionamiento del sensor HC-SR04.
 * @return None.
 */
void HCSR04_Init(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2108      	movs	r1, #8
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <HCSR04_Init+0x1c>)
 8001562:	f000 fde5 	bl	8002130 <HAL_GPIO_WritePin>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001566:	2100      	movs	r1, #0
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <HCSR04_Init+0x20>)
 800156a:	f001 ffa7 	bl	80034bc <HAL_TIM_IC_Start_IT>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40020000 	.word	0x40020000
 8001578:	20000104 	.word	0x20000104

0800157c <HCSR04_Get_Distance>:
 * @brief Obtiene la distancia medida por el sensor HC-SR04.
 * Esta función activa el disparador del sensor, mide el tiempo de vuelo de la señal ultrasónica y
 * calcula la distancia correspondiente.
 * @return La distancia medida en centímetros.
 */
uint16_t HCSR04_Get_Distance(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	2108      	movs	r1, #8
 8001584:	480e      	ldr	r0, [pc, #56]	@ (80015c0 <HCSR04_Get_Distance+0x44>)
 8001586:	f000 fdd3 	bl	8002130 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCounter(&htim1, 0);
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <HCSR04_Get_Distance+0x48>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GetCounter(&htim1) < 10)
 8001592:	bf00      	nop
 8001594:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <HCSR04_Get_Distance+0x48>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	2b09      	cmp	r3, #9
 800159c:	d9fa      	bls.n	8001594 <HCSR04_Get_Distance+0x18>
		;
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2108      	movs	r1, #8
 80015a2:	4807      	ldr	r0, [pc, #28]	@ (80015c0 <HCSR04_Get_Distance+0x44>)
 80015a4:	f000 fdc4 	bl	8002130 <HAL_GPIO_WritePin>
	// Se habilita la interrupción del canal 1 para permitir que se capture la señal ultrasónica
	// y se calcule la distancia correspondiente. Esto asegura que el sistema esté preparado para
	// procesar la señal capturada y actualizar la distancia medida.
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HCSR04_Get_Distance+0x48>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HCSR04_Get_Distance+0x48>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0202 	orr.w	r2, r2, #2
 80015b6:	60da      	str	r2, [r3, #12]
	return dist;
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HCSR04_Get_Distance+0x4c>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40020000 	.word	0x40020000
 80015c4:	20000104 	.word	0x20000104
 80015c8:	20000158 	.word	0x20000158

080015cc <hcsr04FSM_init>:
/**
 * @brief Inicializa la máquina de estados finitos (FSM) del sensor HC-SR04.
 * Esta función establece el estado inicial de la FSM como NEAR_STATE.
 * @return None.
 */
void hcsr04FSM_init(void) {
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	hcsr04State = NEAR_STATE;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <hcsr04FSM_init+0x14>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	2000015b 	.word	0x2000015b

080015e4 <hcsr04FSM_update>:
 * - NEAR_VALUE: Valor límite para el estado NEAR_STATE.
 * - NORMAL_VALUE_LOW: Valor inferior del rango normal de distancia.
 * - NORMAL_VALUE_HIGH: Valor superior del rango normal de distancia.
 * - FAR_VALUE: Valor límite para el estado FAR_STATE.
 */
void hcsr04FSM_update(uint16_t distance) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
    // Lógica para la transición de estados
    switch (hcsr04State) {
 80015ee:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <hcsr04FSM_update+0xac>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d030      	beq.n	8001658 <hcsr04FSM_update+0x74>
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	dc43      	bgt.n	8001682 <hcsr04FSM_update+0x9e>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <hcsr04FSM_update+0x20>
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d015      	beq.n	800162e <hcsr04FSM_update+0x4a>
 8001602:	e03e      	b.n	8001682 <hcsr04FSM_update+0x9e>
        case NEAR_STATE:
            if (distance <= NEAR_VALUE) {
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	2b1e      	cmp	r3, #30
 8001608:	d803      	bhi.n	8001612 <hcsr04FSM_update+0x2e>
                hcsr04State = NEAR_STATE;
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <hcsr04FSM_update+0xac>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
            } else if (distance >= NORMAL_VALUE_LOW && distance <= NORMAL_VALUE_HIGH) {
                hcsr04State = NORMAL_STATE;
            } else {
                hcsr04State = FAR_STATE;
            }
            break;
 8001610:	e03a      	b.n	8001688 <hcsr04FSM_update+0xa4>
            } else if (distance >= NORMAL_VALUE_LOW && distance <= NORMAL_VALUE_HIGH) {
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	2b1e      	cmp	r3, #30
 8001616:	d906      	bls.n	8001626 <hcsr04FSM_update+0x42>
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	2b45      	cmp	r3, #69	@ 0x45
 800161c:	d803      	bhi.n	8001626 <hcsr04FSM_update+0x42>
                hcsr04State = NORMAL_STATE;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <hcsr04FSM_update+0xac>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
            break;
 8001624:	e030      	b.n	8001688 <hcsr04FSM_update+0xa4>
                hcsr04State = FAR_STATE;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <hcsr04FSM_update+0xac>)
 8001628:	2202      	movs	r2, #2
 800162a:	701a      	strb	r2, [r3, #0]
            break;
 800162c:	e02c      	b.n	8001688 <hcsr04FSM_update+0xa4>

        case NORMAL_STATE:
            if (distance <= NEAR_VALUE) {
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2b1e      	cmp	r3, #30
 8001632:	d803      	bhi.n	800163c <hcsr04FSM_update+0x58>
                hcsr04State = NEAR_STATE;
 8001634:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <hcsr04FSM_update+0xac>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
            } else if (distance >= NORMAL_VALUE_LOW && distance <= NORMAL_VALUE_HIGH) {
                hcsr04State = NORMAL_STATE;
            } else {
                hcsr04State = FAR_STATE;
            }
            break;
 800163a:	e025      	b.n	8001688 <hcsr04FSM_update+0xa4>
            } else if (distance >= NORMAL_VALUE_LOW && distance <= NORMAL_VALUE_HIGH) {
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	2b1e      	cmp	r3, #30
 8001640:	d906      	bls.n	8001650 <hcsr04FSM_update+0x6c>
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	2b45      	cmp	r3, #69	@ 0x45
 8001646:	d803      	bhi.n	8001650 <hcsr04FSM_update+0x6c>
                hcsr04State = NORMAL_STATE;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <hcsr04FSM_update+0xac>)
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
            break;
 800164e:	e01b      	b.n	8001688 <hcsr04FSM_update+0xa4>
                hcsr04State = FAR_STATE;
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <hcsr04FSM_update+0xac>)
 8001652:	2202      	movs	r2, #2
 8001654:	701a      	strb	r2, [r3, #0]
            break;
 8001656:	e017      	b.n	8001688 <hcsr04FSM_update+0xa4>

        case FAR_STATE:
            if (distance >= FAR_VALUE) {
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	2b45      	cmp	r3, #69	@ 0x45
 800165c:	d903      	bls.n	8001666 <hcsr04FSM_update+0x82>
                hcsr04State = FAR_STATE;
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <hcsr04FSM_update+0xac>)
 8001660:	2202      	movs	r2, #2
 8001662:	701a      	strb	r2, [r3, #0]
            } else if (distance >= NORMAL_VALUE_LOW && distance <= NORMAL_VALUE_HIGH) {
                hcsr04State = NORMAL_STATE;
            } else {
                hcsr04State = NEAR_STATE;
            }
            break;
 8001664:	e010      	b.n	8001688 <hcsr04FSM_update+0xa4>
            } else if (distance >= NORMAL_VALUE_LOW && distance <= NORMAL_VALUE_HIGH) {
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	2b1e      	cmp	r3, #30
 800166a:	d906      	bls.n	800167a <hcsr04FSM_update+0x96>
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	2b45      	cmp	r3, #69	@ 0x45
 8001670:	d803      	bhi.n	800167a <hcsr04FSM_update+0x96>
                hcsr04State = NORMAL_STATE;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <hcsr04FSM_update+0xac>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
            break;
 8001678:	e006      	b.n	8001688 <hcsr04FSM_update+0xa4>
                hcsr04State = NEAR_STATE;
 800167a:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <hcsr04FSM_update+0xac>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
            break;
 8001680:	e002      	b.n	8001688 <hcsr04FSM_update+0xa4>

        default:
        	hcsr04FSM_init();
 8001682:	f7ff ffa3 	bl	80015cc <hcsr04FSM_init>
            break;
 8001686:	bf00      	nop
    }
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000015b 	.word	0x2000015b

08001694 <HD44780_Init>:
 * @param rows El número de filas de la pantalla (1 o 2).
 * Esta función inicializa la pantalla LCD HD44780 con la interfaz I2C.
 * Se deben especificar el número de filas de la pantalla (1 o 2).
 * @return None.
 */
void HD44780_Init(uint8_t rows) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	dpRows = rows;
 800169e:	4a38      	ldr	r2, [pc, #224]	@ (8001780 <HD44780_Init+0xec>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	7013      	strb	r3, [r2, #0]

	dpBacklight = LCD_BACKLIGHT;
 80016a4:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <HD44780_Init+0xf0>)
 80016a6:	2208      	movs	r2, #8
 80016a8:	701a      	strb	r2, [r3, #0]

	dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80016aa:	4b37      	ldr	r3, [pc, #220]	@ (8001788 <HD44780_Init+0xf4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]

	if (dpRows > 1) {
 80016b0:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <HD44780_Init+0xec>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d907      	bls.n	80016c8 <HD44780_Init+0x34>
		dpFunction |= LCD_2LINE;
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <HD44780_Init+0xf4>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <HD44780_Init+0xf4>)
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e006      	b.n	80016d6 <HD44780_Init+0x42>
	} else {
		dpFunction |= LCD_5x10DOTS;
 80016c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <HD44780_Init+0xf4>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <HD44780_Init+0xf4>)
 80016d4:	701a      	strb	r2, [r3, #0]
	}

	/* Wait for initialization */
	DelayInit();
 80016d6:	f000 f985 	bl	80019e4 <DelayInit>
	HAL_Delay(50);
 80016da:	2032      	movs	r0, #50	@ 0x32
 80016dc:	f000 fa46 	bl	8001b6c <HAL_Delay>

	ExpanderWrite(dpBacklight);
 80016e0:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <HD44780_Init+0xf0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f943 	bl	8001970 <ExpanderWrite>
	HAL_Delay(1000);
 80016ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ee:	f000 fa3d 	bl	8001b6c <HAL_Delay>

	/* 4bit Mode */
	Write4Bits(0x03 << 4);
 80016f2:	2030      	movs	r0, #48	@ 0x30
 80016f4:	f000 f92b 	bl	800194e <Write4Bits>
	DelayUS(4500);
 80016f8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80016fc:	f000 f99c 	bl	8001a38 <DelayUS>

	Write4Bits(0x03 << 4);
 8001700:	2030      	movs	r0, #48	@ 0x30
 8001702:	f000 f924 	bl	800194e <Write4Bits>
	DelayUS(4500);
 8001706:	f241 1094 	movw	r0, #4500	@ 0x1194
 800170a:	f000 f995 	bl	8001a38 <DelayUS>

	Write4Bits(0x03 << 4);
 800170e:	2030      	movs	r0, #48	@ 0x30
 8001710:	f000 f91d 	bl	800194e <Write4Bits>
	DelayUS(4500);
 8001714:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001718:	f000 f98e 	bl	8001a38 <DelayUS>

	Write4Bits(0x02 << 4);
 800171c:	2020      	movs	r0, #32
 800171e:	f000 f916 	bl	800194e <Write4Bits>
	DelayUS(100);
 8001722:	2064      	movs	r0, #100	@ 0x64
 8001724:	f000 f988 	bl	8001a38 <DelayUS>

	/* Display Control */
	SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <HD44780_Init+0xf4>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f8ce 	bl	80018d4 <SendCommand>

	dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <HD44780_Init+0xf8>)
 800173a:	2204      	movs	r2, #4
 800173c:	701a      	strb	r2, [r3, #0]
	HD44780_Display();
 800173e:	f000 f875 	bl	800182c <HD44780_Display>
	HD44780_Clear();
 8001742:	f000 f82b 	bl	800179c <HD44780_Clear>

	/* Display Mode */
	dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HD44780_Init+0xfc>)
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_ENTRYMODESET | dpMode);
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <HD44780_Init+0xfc>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f8bc 	bl	80018d4 <SendCommand>
	DelayUS(4500);
 800175c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001760:	f000 f96a 	bl	8001a38 <DelayUS>

	HD44780_CreateSpecialChar(0, special1);
 8001764:	490b      	ldr	r1, [pc, #44]	@ (8001794 <HD44780_Init+0x100>)
 8001766:	2000      	movs	r0, #0
 8001768:	f000 f876 	bl	8001858 <HD44780_CreateSpecialChar>
	HD44780_CreateSpecialChar(1, special2);
 800176c:	490a      	ldr	r1, [pc, #40]	@ (8001798 <HD44780_Init+0x104>)
 800176e:	2001      	movs	r0, #1
 8001770:	f000 f872 	bl	8001858 <HD44780_CreateSpecialChar>

	HD44780_Home();
 8001774:	f000 f81d 	bl	80017b2 <HD44780_Home>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000015f 	.word	0x2000015f
 8001784:	20000160 	.word	0x20000160
 8001788:	2000015c 	.word	0x2000015c
 800178c:	2000015d 	.word	0x2000015d
 8001790:	2000015e 	.word	0x2000015e
 8001794:	20000004 	.word	0x20000004
 8001798:	2000000c 	.word	0x2000000c

0800179c <HD44780_Clear>:
/**
 * @brief Borra el contenido de la pantalla LCD.
 * Esta función borra todo el contenido de la pantalla LCD.
 * @return None.
 */
void HD44780_Clear() {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	SendCommand(LCD_CLEARDISPLAY);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f000 f897 	bl	80018d4 <SendCommand>
	DelayUS(2000);
 80017a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017aa:	f000 f945 	bl	8001a38 <DelayUS>
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HD44780_Home>:
 * la operación de retorno al inicio.
 * @return None.
 * Ejemplo de uso:
 * HD44780_Home();
 */
void HD44780_Home() {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
	SendCommand(LCD_RETURNHOME);
 80017b6:	2002      	movs	r0, #2
 80017b8:	f000 f88c 	bl	80018d4 <SendCommand>
	DelayUS(2000);
 80017bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017c0:	f000 f93a 	bl	8001a38 <DelayUS>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HD44780_SetCursor>:
 * Esta función mueve el cursor a la posición especificada por la columna y la fila en la pantalla LCD.
 * @return None.
 * Ejemplo de uso:
 * HD44780_SetCursor(0, 0); // Mueve el cursor a la primera posición de la primera fila.
 */
void HD44780_SetCursor(uint8_t col, uint8_t row) {
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	460a      	mov	r2, r1
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	4613      	mov	r3, r2
 80017d6:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HD44780_SetCursor+0x5c>)
 80017da:	f107 0408 	add.w	r4, r7, #8
 80017de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row >= dpRows) {
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HD44780_SetCursor+0x60>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	79ba      	ldrb	r2, [r7, #6]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d303      	bcc.n	80017f6 <HD44780_SetCursor+0x2e>
		row = dpRows - 1;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HD44780_SetCursor+0x60>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	71bb      	strb	r3, [r7, #6]
	}
	SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	3318      	adds	r3, #24
 80017fc:	443b      	add	r3, r7
 80017fe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4413      	add	r3, r2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001810:	b25b      	sxtb	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f85d 	bl	80018d4 <SendCommand>
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	bf00      	nop
 8001824:	08004990 	.word	0x08004990
 8001828:	2000015f 	.word	0x2000015f

0800182c <HD44780_Display>:

/**
 * @brief Enciende la visualización de la pantalla LCD.
 * @return None.
 */
void HD44780_Display() {
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	dpControl |= LCD_DISPLAYON;
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HD44780_Display+0x28>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HD44780_Display+0x28>)
 800183c:	701a      	strb	r2, [r3, #0]
	SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800183e:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HD44780_Display+0x28>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f843 	bl	80018d4 <SendCommand>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000015d 	.word	0x2000015d

08001858 <HD44780_CreateSpecialChar>:
 * @brief Crea un carácter especial en la memoria CGRAM de la pantalla LCD.
 * @param location Posición de memoria donde se almacenará el carácter (0-7).
 * @param charmap  Matriz de bytes que define la forma del carácter especial.
 * @return None.
 */
void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[]) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
	location &= 0x7;
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	71fb      	strb	r3, [r7, #7]
	SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001876:	b25b      	sxtb	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f82a 	bl	80018d4 <SendCommand>
	for (int i = 0; i < 8; i++) {
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e009      	b.n	800189a <HD44780_CreateSpecialChar+0x42>
		SendChar(charmap[i]);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f82e 	bl	80018f0 <SendChar>
	for (int i = 0; i < 8; i++) {
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b07      	cmp	r3, #7
 800189e:	ddf2      	ble.n	8001886 <HD44780_CreateSpecialChar+0x2e>
	}
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HD44780_PrintStr>:
/**
 * @brief Imprime una cadena de caracteres en la pantalla LCD.
 * @param c Cadena de caracteres a imprimir.
 * @return None.
 */
void HD44780_PrintStr(const char c[]) {
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	while (*c)
 80018b2:	e006      	b.n	80018c2 <HD44780_PrintStr+0x18>
		SendChar(*c++);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f817 	bl	80018f0 <SendChar>
	while (*c)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f4      	bne.n	80018b4 <HD44780_PrintStr+0xa>
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <SendCommand>:
/**
 * @brief Envía un comando a la pantalla LCD.
 * @param cmd Comando a enviar.
 * @return None.
 */
static void SendCommand(uint8_t cmd) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	Send(cmd, 0);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f812 	bl	800190c <Send>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SendChar>:
/**
 * @brief Envía un carácter a la pantalla LCD.
 * @param ch Carácter a enviar.
 * @return None.
 */
static void SendChar(uint8_t ch) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	Send(ch, RS);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f804 	bl	800190c <Send>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <Send>:
 * @brief Envía datos a la pantalla LCD.
 * @param value Valor a enviar.
 * @param mode Modo de envío (RS: 1 para datos, 0 para comandos).
 * @return None.
 */
static void Send(uint8_t value, uint8_t mode) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib = value & 0xF0;
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f023 030f 	bic.w	r3, r3, #15
 8001922:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib = (value << 4) & 0xF0;
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	73bb      	strb	r3, [r7, #14]
	Write4Bits((highnib) | mode);
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	4313      	orrs	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f80b 	bl	800194e <Write4Bits>
	Write4Bits((lownib) | mode);
 8001938:	7bba      	ldrb	r2, [r7, #14]
 800193a:	79bb      	ldrb	r3, [r7, #6]
 800193c:	4313      	orrs	r3, r2
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f804 	bl	800194e <Write4Bits>
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <Write4Bits>:
/**
 * @brief Envía los 4 bits superiores a la pantalla LCD.
 * @param value Valor de los 4 bits superiores a enviar.
 * @return None.
 */
static void Write4Bits(uint8_t value) {
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(value);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f808 	bl	8001970 <ExpanderWrite>
	PulseEnable(value);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f820 	bl	80019a8 <PulseEnable>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ExpanderWrite>:
/**
 * @brief Escribe datos en el expansor de E/S de la pantalla LCD.
 * @param _data Datos a escribir.
 * @return None.
 */
static void ExpanderWrite(uint8_t _data) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	uint8_t data = _data | dpBacklight;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <ExpanderWrite+0x30>)
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4313      	orrs	r3, r2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*) &data, 1, 10);
 8001986:	f107 020f 	add.w	r2, r7, #15
 800198a:	230a      	movs	r3, #10
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2301      	movs	r3, #1
 8001990:	214e      	movs	r1, #78	@ 0x4e
 8001992:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <ExpanderWrite+0x34>)
 8001994:	f000 fd2a 	bl	80023ec <HAL_I2C_Master_Transmit>
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000160 	.word	0x20000160
 80019a4:	20000088 	.word	0x20000088

080019a8 <PulseEnable>:
/**
 * @brief Genera un pulso de habilitación para la pantalla LCD.
 * @param _data Datos del pulso de habilitación.
 * @return None.
 */
static void PulseEnable(uint8_t _data) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
	ExpanderWrite(_data | ENABLE);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ffd8 	bl	8001970 <ExpanderWrite>
	DelayUS(20);
 80019c0:	2014      	movs	r0, #20
 80019c2:	f000 f839 	bl	8001a38 <DelayUS>

	ExpanderWrite(_data & ~ENABLE);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f023 0304 	bic.w	r3, r3, #4
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ffce 	bl	8001970 <ExpanderWrite>
	DelayUS(20);
 80019d4:	2014      	movs	r0, #20
 80019d6:	f000 f82f 	bl	8001a38 <DelayUS>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <DelayInit>:
/**
 * @brief Inicializa el sistema de retardo utilizando el contador de ciclos de CPU.
 *        Esta función debe ser llamada antes de utilizar la función de retardo.
 * @return None.
 */
static void DelayInit(void) {
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <DelayInit+0x4c>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a10      	ldr	r2, [pc, #64]	@ (8001a30 <DelayInit+0x4c>)
 80019ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019f2:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <DelayInit+0x4c>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <DelayInit+0x4c>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019fe:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <DelayInit+0x50>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0b      	ldr	r2, [pc, #44]	@ (8001a34 <DelayInit+0x50>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <DelayInit+0x50>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <DelayInit+0x50>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6013      	str	r3, [r2, #0]

	DWT->CYCCNT = 0;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <DelayInit+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]

	/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 8001a1e:	bf00      	nop
	__ASM volatile ("NOP");
 8001a20:	bf00      	nop
	__ASM volatile ("NOP");
 8001a22:	bf00      	nop
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000edf0 	.word	0xe000edf0
 8001a34:	e0001000 	.word	0xe0001000

08001a38 <DelayUS>:
/**
 * @brief Genera un retardo en microsegundos utilizando el contador de ciclos de CPU.
 * @param us: Número de microsegundos de retardo deseado.
 * @return None.
 */
static void DelayUS(uint32_t us) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001a40:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <DelayUS+0x44>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <DelayUS+0x48>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9a      	lsrs	r2, r3, #18
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
	uint32_t start = DWT->CYCCNT;
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <DelayUS+0x4c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
	volatile uint32_t cnt;

	do {
		cnt = DWT->CYCCNT - start;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <DelayUS+0x4c>)
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	60fb      	str	r3, [r7, #12]
	} while (cnt < cycles);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f6      	bhi.n	8001a5a <DelayUS+0x22>
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	e0001000 	.word	0xe0001000

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <HAL_Init+0x40>)
 8001a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <HAL_Init+0x40>)
 8001a9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	@ (8001ac8 <HAL_Init+0x40>)
 8001aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f000 f94f 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab6:	200f      	movs	r0, #15
 8001ab8:	f000 f808 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff faf0 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f967 	bl	8001dbe <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 f92f 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000018 	.word	0x20000018
 8001b28:	20000014 	.word	0x20000014

08001b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000018 	.word	0x20000018
 8001b50:	20000164 	.word	0x20000164

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000164 	.word	0x20000164

08001b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff ffee 	bl	8001b54 <HAL_GetTick>
 8001b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d005      	beq.n	8001b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b86:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <HAL_Delay+0x44>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b92:	bf00      	nop
 8001b94:	f7ff ffde 	bl	8001b54 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8f7      	bhi.n	8001b94 <HAL_Delay+0x28>
  {
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000018 	.word	0x20000018

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	@ (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	@ (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	@ (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	@ 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff29 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff3e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff31 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e177      	b.n	80020e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 8166 	bne.w	80020de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d005      	beq.n	8001e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d130      	bne.n	8001e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0201 	and.w	r2, r3, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d017      	beq.n	8001ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d123      	bne.n	8001f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	69b9      	ldr	r1, [r7, #24]
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80c0 	beq.w	80020de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b66      	ldr	r3, [pc, #408]	@ (80020fc <HAL_GPIO_Init+0x324>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	4a65      	ldr	r2, [pc, #404]	@ (80020fc <HAL_GPIO_Init+0x324>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6e:	4b63      	ldr	r3, [pc, #396]	@ (80020fc <HAL_GPIO_Init+0x324>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f7a:	4a61      	ldr	r2, [pc, #388]	@ (8002100 <HAL_GPIO_Init+0x328>)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	@ (8002104 <HAL_GPIO_Init+0x32c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d037      	beq.n	8002016 <HAL_GPIO_Init+0x23e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a57      	ldr	r2, [pc, #348]	@ (8002108 <HAL_GPIO_Init+0x330>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_GPIO_Init+0x23a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a56      	ldr	r2, [pc, #344]	@ (800210c <HAL_GPIO_Init+0x334>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02b      	beq.n	800200e <HAL_GPIO_Init+0x236>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a55      	ldr	r2, [pc, #340]	@ (8002110 <HAL_GPIO_Init+0x338>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x232>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a54      	ldr	r2, [pc, #336]	@ (8002114 <HAL_GPIO_Init+0x33c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x22e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a53      	ldr	r2, [pc, #332]	@ (8002118 <HAL_GPIO_Init+0x340>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x22a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	@ (800211c <HAL_GPIO_Init+0x344>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x226>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	@ (8002120 <HAL_GPIO_Init+0x348>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	@ (8002124 <HAL_GPIO_Init+0x34c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x21e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8002128 <HAL_GPIO_Init+0x350>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x21a>
 8001fee:	2309      	movs	r3, #9
 8001ff0:	e012      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	e010      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	e00e      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00c      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ffe:	2306      	movs	r3, #6
 8002000:	e00a      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002002:	2305      	movs	r3, #5
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002006:	2304      	movs	r3, #4
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x240>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x240>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002016:	2300      	movs	r3, #0
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	@ (8002100 <HAL_GPIO_Init+0x328>)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b3d      	ldr	r3, [pc, #244]	@ (800212c <HAL_GPIO_Init+0x354>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205a:	4a34      	ldr	r2, [pc, #208]	@ (800212c <HAL_GPIO_Init+0x354>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002060:	4b32      	ldr	r3, [pc, #200]	@ (800212c <HAL_GPIO_Init+0x354>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002084:	4a29      	ldr	r2, [pc, #164]	@ (800212c <HAL_GPIO_Init+0x354>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208a:	4b28      	ldr	r3, [pc, #160]	@ (800212c <HAL_GPIO_Init+0x354>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ae:	4a1f      	ldr	r2, [pc, #124]	@ (800212c <HAL_GPIO_Init+0x354>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_GPIO_Init+0x354>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d8:	4a14      	ldr	r2, [pc, #80]	@ (800212c <HAL_GPIO_Init+0x354>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f ae84 	bls.w	8001df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	@ 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40021400 	.word	0x40021400
 800211c:	40021800 	.word	0x40021800
 8002120:	40021c00 	.word	0x40021c00
 8002124:	40022000 	.word	0x40022000
 8002128:	40022400 	.word	0x40022400
 800212c:	40013c00 	.word	0x40013c00

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800214c:	e003      	b.n	8002156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e12b      	b.n	80023ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fe84 	bl	8000e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	@ 0x24
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c8:	f001 f914 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a81      	ldr	r2, [pc, #516]	@ (80023d8 <HAL_I2C_Init+0x274>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d807      	bhi.n	80021e8 <HAL_I2C_Init+0x84>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a80      	ldr	r2, [pc, #512]	@ (80023dc <HAL_I2C_Init+0x278>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e006      	b.n	80021f6 <HAL_I2C_Init+0x92>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a7d      	ldr	r2, [pc, #500]	@ (80023e0 <HAL_I2C_Init+0x27c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0e7      	b.n	80023ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a78      	ldr	r2, [pc, #480]	@ (80023e4 <HAL_I2C_Init+0x280>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a6a      	ldr	r2, [pc, #424]	@ (80023d8 <HAL_I2C_Init+0x274>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d802      	bhi.n	8002238 <HAL_I2C_Init+0xd4>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	e009      	b.n	800224c <HAL_I2C_Init+0xe8>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	4a69      	ldr	r2, [pc, #420]	@ (80023e8 <HAL_I2C_Init+0x284>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	3301      	adds	r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800225e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	495c      	ldr	r1, [pc, #368]	@ (80023d8 <HAL_I2C_Init+0x274>)
 8002268:	428b      	cmp	r3, r1
 800226a:	d819      	bhi.n	80022a0 <HAL_I2C_Init+0x13c>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e59      	subs	r1, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fbb1 f3f3 	udiv	r3, r1, r3
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002280:	400b      	ands	r3, r1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_I2C_Init+0x138>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e59      	subs	r1, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fbb1 f3f3 	udiv	r3, r1, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229a:	e051      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 800229c:	2304      	movs	r3, #4
 800229e:	e04f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_I2C_Init+0x168>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e012      	b.n	80022f2 <HAL_I2C_Init+0x18e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	0099      	lsls	r1, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x196>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e022      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <HAL_I2C_Init+0x1bc>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e58      	subs	r0, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	440b      	add	r3, r1
 8002310:	fbb0 f3f3 	udiv	r3, r0, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800231e:	e00f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	6809      	ldr	r1, [r1, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800236e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6911      	ldr	r1, [r2, #16]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	000186a0 	.word	0x000186a0
 80023dc:	001e847f 	.word	0x001e847f
 80023e0:	003d08ff 	.word	0x003d08ff
 80023e4:	431bde83 	.word	0x431bde83
 80023e8:	10624dd3 	.word	0x10624dd3

080023ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
 80023fc:	4613      	mov	r3, r2
 80023fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fba8 	bl	8001b54 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b20      	cmp	r3, #32
 8002410:	f040 80e0 	bne.w	80025d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	4970      	ldr	r1, [pc, #448]	@ (80025e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f964 	bl	80026ec <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	e0d3      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_Master_Transmit+0x50>
 8002438:	2302      	movs	r3, #2
 800243a:	e0cc      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2221      	movs	r2, #33	@ 0x21
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2210      	movs	r2, #16
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	893a      	ldrh	r2, [r7, #8]
 8002492:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a50      	ldr	r2, [pc, #320]	@ (80025e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80024a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6a3a      	ldr	r2, [r7, #32]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f89c 	bl	80025e8 <I2C_MasterRequestWrite>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e08d      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d0:	e066      	b.n	80025a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	6a39      	ldr	r1, [r7, #32]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fa22 	bl	8002920 <I2C_WaitOnTXEFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d107      	bne.n	80024fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e06b      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d11b      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x188>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	6a39      	ldr	r1, [r7, #32]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fa19 	bl	80029b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00d      	beq.n	80025a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	2b04      	cmp	r3, #4
 800258a:	d107      	bne.n	800259c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800259a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e01a      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d194      	bne.n	80024d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	00100002 	.word	0x00100002
 80025e4:	ffff0000 	.word	0xffff0000

080025e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	460b      	mov	r3, r1
 80025f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d006      	beq.n	8002612 <I2C_MasterRequestWrite+0x2a>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d003      	beq.n	8002612 <I2C_MasterRequestWrite+0x2a>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002610:	d108      	bne.n	8002624 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e00b      	b.n	800263c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	2b12      	cmp	r3, #18
 800262a:	d107      	bne.n	800263c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800263a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f84f 	bl	80026ec <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002662:	d103      	bne.n	800266c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e035      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002678:	d108      	bne.n	800268c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	e01b      	b.n	80026c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800268c:	897b      	ldrh	r3, [r7, #10]
 800268e:	11db      	asrs	r3, r3, #7
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 0306 	and.w	r3, r3, #6
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f063 030f 	orn	r3, r3, #15
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	490e      	ldr	r1, [pc, #56]	@ (80026e4 <I2C_MasterRequestWrite+0xfc>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f898 	bl	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e010      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4907      	ldr	r1, [pc, #28]	@ (80026e8 <I2C_MasterRequestWrite+0x100>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f888 	bl	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	00010008 	.word	0x00010008
 80026e8:	00010002 	.word	0x00010002

080026ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026fc:	e048      	b.n	8002790 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d044      	beq.n	8002790 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7ff fa25 	bl	8001b54 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d139      	bne.n	8002790 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	0c1b      	lsrs	r3, r3, #16
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d10d      	bne.n	8002742 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	43da      	mvns	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	e00c      	b.n	800275c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	43da      	mvns	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	429a      	cmp	r2, r3
 8002760:	d116      	bne.n	8002790 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e023      	b.n	80027d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10d      	bne.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	e00c      	b.n	80027d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d093      	beq.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ee:	e071      	b.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027fe:	d123      	bne.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800280e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002818:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	f043 0204 	orr.w	r2, r3, #4
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e067      	b.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d041      	beq.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002850:	f7ff f980 	bl	8001b54 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	d302      	bcc.n	8002866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d136      	bne.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d10c      	bne.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4013      	ands	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf14      	ite	ne
 8002882:	2301      	movne	r3, #1
 8002884:	2300      	moveq	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	e00b      	b.n	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	43da      	mvns	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e021      	b.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10c      	bne.n	80028f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	43da      	mvns	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e00b      	b.n	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4013      	ands	r3, r2
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	f47f af6d 	bne.w	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800292c:	e034      	b.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f886 	bl	8002a40 <I2C_IsAcknowledgeFailed>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e034      	b.n	80029a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d028      	beq.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002946:	f7ff f905 	bl	8001b54 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	d302      	bcc.n	800295c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11d      	bne.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	2b80      	cmp	r3, #128	@ 0x80
 8002968:	d016      	beq.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e007      	b.n	80029a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a2:	2b80      	cmp	r3, #128	@ 0x80
 80029a4:	d1c3      	bne.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029bc:	e034      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f83e 	bl	8002a40 <I2C_IsAcknowledgeFailed>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e034      	b.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d028      	beq.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7ff f8bd 	bl	8001b54 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11d      	bne.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d016      	beq.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d1c3      	bne.n	80029be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a56:	d11b      	bne.n	8002a90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	f043 0204 	orr.w	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d129      	bne.n	8002b08 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2224      	movs	r2, #36	@ 0x24
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0210 	bic.w	r2, r2, #16
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d12a      	bne.n	8002b86 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	@ 0x24
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	f023 030f 	bic.w	r3, r3, #15
 8002b56:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	89fb      	ldrh	r3, [r7, #14]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	89fa      	ldrh	r2, [r7, #14]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e267      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d075      	beq.n	8002c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb2:	4b88      	ldr	r3, [pc, #544]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b85      	ldr	r3, [pc, #532]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d112      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bca:	4b82      	ldr	r3, [pc, #520]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x108>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e242      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x74>
 8002bfa:	4b76      	ldr	r3, [pc, #472]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e01d      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x98>
 8002c12:	4b70      	ldr	r3, [pc, #448]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6f      	ldr	r2, [pc, #444]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6c      	ldr	r2, [pc, #432]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0xb0>
 8002c2c:	4b69      	ldr	r3, [pc, #420]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a68      	ldr	r2, [pc, #416]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b66      	ldr	r3, [pc, #408]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a65      	ldr	r2, [pc, #404]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe ff82 	bl	8001b54 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe ff7e 	bl	8001b54 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	@ 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e207      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b5b      	ldr	r3, [pc, #364]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0xc0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe ff6e 	bl	8001b54 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe ff6a 	bl	8001b54 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	@ 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e1f3      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	4b51      	ldr	r3, [pc, #324]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0xe8>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002caa:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b47      	ldr	r3, [pc, #284]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d11c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc2:	4b44      	ldr	r3, [pc, #272]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d116      	bne.n	8002cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1c7      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4937      	ldr	r1, [pc, #220]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	e03a      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d04:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe ff23 	bl	8001b54 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d12:	f7fe ff1f 	bl	8001b54 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e1a8      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b28      	ldr	r3, [pc, #160]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4925      	ldr	r1, [pc, #148]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d46:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <HAL_RCC_OscConfig+0x244>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe ff02 	bl	8001b54 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fe fefe 	bl	8001b54 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e187      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d036      	beq.n	8002dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d016      	beq.n	8002db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d86:	4b15      	ldr	r3, [pc, #84]	@ (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fee2 	bl	8001b54 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe fede 	bl	8001b54 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e167      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCC_OscConfig+0x240>)
 8002da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x200>
 8002db2:	e01b      	b.n	8002dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_OscConfig+0x248>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fecb 	bl	8001b54 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc0:	e00e      	b.n	8002de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fec7 	bl	8001b54 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d907      	bls.n	8002de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e150      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b88      	ldr	r3, [pc, #544]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ea      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8097 	beq.w	8002f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b81      	ldr	r3, [pc, #516]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	4a7c      	ldr	r2, [pc, #496]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b77      	ldr	r3, [pc, #476]	@ (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b74      	ldr	r3, [pc, #464]	@ (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a73      	ldr	r2, [pc, #460]	@ (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fe87 	bl	8001b54 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fe fe83 	bl	8001b54 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e10c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003008 <HAL_RCC_OscConfig+0x474>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2ea>
 8002e70:	4b64      	ldr	r3, [pc, #400]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e74:	4a63      	ldr	r2, [pc, #396]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x30c>
 8002e86:	4b5f      	ldr	r3, [pc, #380]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e92:	4b5c      	ldr	r3, [pc, #368]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a5b      	ldr	r2, [pc, #364]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x324>
 8002ea0:	4b58      	ldr	r3, [pc, #352]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	4a57      	ldr	r2, [pc, #348]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eac:	4b55      	ldr	r3, [pc, #340]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a54      	ldr	r2, [pc, #336]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fe48 	bl	8001b54 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fe44 	bl	8001b54 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0cb      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	4b49      	ldr	r3, [pc, #292]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ee      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x334>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eec:	f7fe fe32 	bl	8001b54 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fe2e 	bl	8001b54 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0b5      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1c:	4b39      	ldr	r3, [pc, #228]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	4a38      	ldr	r2, [pc, #224]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a1 	beq.w	8003074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f32:	4b34      	ldr	r3, [pc, #208]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d05c      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d141      	bne.n	8002fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b31      	ldr	r3, [pc, #196]	@ (800300c <HAL_RCC_OscConfig+0x478>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fe02 	bl	8001b54 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fdfe 	bl	8001b54 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e087      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	4b27      	ldr	r3, [pc, #156]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	491b      	ldr	r1, [pc, #108]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <HAL_RCC_OscConfig+0x478>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fdd7 	bl	8001b54 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fdd3 	bl	8001b54 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e05c      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x416>
 8002fc8:	e054      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_RCC_OscConfig+0x478>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fdc0 	bl	8001b54 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe fdbc 	bl	8001b54 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e045      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_OscConfig+0x470>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x444>
 8002ff6:	e03d      	b.n	8003074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e038      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000
 800300c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_RCC_OscConfig+0x4ec>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d028      	beq.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d121      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d11a      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003040:	4013      	ands	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	3b01      	subs	r3, #1
 800305a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0cc      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b68      	ldr	r3, [pc, #416]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d90c      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b65      	ldr	r3, [pc, #404]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b63      	ldr	r3, [pc, #396]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0b8      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d8:	4b59      	ldr	r3, [pc, #356]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a58      	ldr	r2, [pc, #352]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f0:	4b53      	ldr	r3, [pc, #332]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a52      	ldr	r2, [pc, #328]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b50      	ldr	r3, [pc, #320]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	494d      	ldr	r1, [pc, #308]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d044      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d119      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e07f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d003      	beq.n	8003142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b3f      	ldr	r3, [pc, #252]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e067      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b37      	ldr	r3, [pc, #220]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4934      	ldr	r1, [pc, #208]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fcee 	bl	8001b54 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fe fcea 	bl	8001b54 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e04f      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b25      	ldr	r3, [pc, #148]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20c      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b22      	ldr	r3, [pc, #136]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b20      	ldr	r3, [pc, #128]	@ (800323c <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e032      	b.n	8003232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4916      	ldr	r1, [pc, #88]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f6:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	490e      	ldr	r1, [pc, #56]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800320a:	f000 f821 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	490a      	ldr	r1, [pc, #40]	@ (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	fa22 f303 	lsr.w	r3, r2, r3
 8003222:	4a09      	ldr	r2, [pc, #36]	@ (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe fc4e 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023c00 	.word	0x40023c00
 8003240:	40023800 	.word	0x40023800
 8003244:	080049a0 	.word	0x080049a0
 8003248:	20000000 	.word	0x20000000
 800324c:	20000014 	.word	0x20000014

08003250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b090      	sub	sp, #64	@ 0x40
 8003256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	637b      	str	r3, [r7, #52]	@ 0x34
 800325c:	2300      	movs	r3, #0
 800325e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003260:	2300      	movs	r3, #0
 8003262:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003268:	4b59      	ldr	r3, [pc, #356]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d00d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x40>
 8003274:	2b08      	cmp	r3, #8
 8003276:	f200 80a1 	bhi.w	80033bc <HAL_RCC_GetSysClockFreq+0x16c>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x34>
 800327e:	2b04      	cmp	r3, #4
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x3a>
 8003282:	e09b      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b53      	ldr	r3, [pc, #332]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003288:	e09b      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b53      	ldr	r3, [pc, #332]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800328c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800328e:	e098      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4b4f      	ldr	r3, [pc, #316]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003298:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329a:	4b4d      	ldr	r3, [pc, #308]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d028      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b4a      	ldr	r3, [pc, #296]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032b8:	2100      	movs	r1, #0
 80032ba:	4b47      	ldr	r3, [pc, #284]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032bc:	fb03 f201 	mul.w	r2, r3, r1
 80032c0:	2300      	movs	r3, #0
 80032c2:	fb00 f303 	mul.w	r3, r0, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	4a43      	ldr	r2, [pc, #268]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032ca:	fba0 1202 	umull	r1, r2, r0, r2
 80032ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d0:	460a      	mov	r2, r1
 80032d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032d6:	4413      	add	r3, r2
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032dc:	2200      	movs	r2, #0
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	61fa      	str	r2, [r7, #28]
 80032e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032ea:	f7fd fbbf 	bl	8000a6c <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4613      	mov	r3, r2
 80032f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f6:	e053      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f8:	4b35      	ldr	r3, [pc, #212]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	2200      	movs	r2, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	617a      	str	r2, [r7, #20]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800330a:	f04f 0b00 	mov.w	fp, #0
 800330e:	4652      	mov	r2, sl
 8003310:	465b      	mov	r3, fp
 8003312:	f04f 0000 	mov.w	r0, #0
 8003316:	f04f 0100 	mov.w	r1, #0
 800331a:	0159      	lsls	r1, r3, #5
 800331c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003320:	0150      	lsls	r0, r2, #5
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	ebb2 080a 	subs.w	r8, r2, sl
 800332a:	eb63 090b 	sbc.w	r9, r3, fp
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800333a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800333e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003342:	ebb2 0408 	subs.w	r4, r2, r8
 8003346:	eb63 0509 	sbc.w	r5, r3, r9
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	00eb      	lsls	r3, r5, #3
 8003354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003358:	00e2      	lsls	r2, r4, #3
 800335a:	4614      	mov	r4, r2
 800335c:	461d      	mov	r5, r3
 800335e:	eb14 030a 	adds.w	r3, r4, sl
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	eb45 030b 	adc.w	r3, r5, fp
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003376:	4629      	mov	r1, r5
 8003378:	028b      	lsls	r3, r1, #10
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003380:	4621      	mov	r1, r4
 8003382:	028a      	lsls	r2, r1, #10
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800338a:	2200      	movs	r2, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	60fa      	str	r2, [r7, #12]
 8003390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003394:	f7fd fb6a 	bl	8000a6c <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80033b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3740      	adds	r7, #64	@ 0x40
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	017d7840 	.word	0x017d7840

080033dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033f8:	f7ff fff0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	080049b0 	.word	0x080049b0

0800341c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e041      	b.n	80034b2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd ff2c 	bl	80012a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f000 fb4e 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d104      	bne.n	80034da <HAL_TIM_IC_Start_IT+0x1e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	e013      	b.n	8003502 <HAL_TIM_IC_Start_IT+0x46>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d104      	bne.n	80034ea <HAL_TIM_IC_Start_IT+0x2e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e00b      	b.n	8003502 <HAL_TIM_IC_Start_IT+0x46>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_IC_Start_IT+0x3e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	e003      	b.n	8003502 <HAL_TIM_IC_Start_IT+0x46>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003500:	b2db      	uxtb	r3, r3
 8003502:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d104      	bne.n	8003514 <HAL_TIM_IC_Start_IT+0x58>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e013      	b.n	800353c <HAL_TIM_IC_Start_IT+0x80>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b04      	cmp	r3, #4
 8003518:	d104      	bne.n	8003524 <HAL_TIM_IC_Start_IT+0x68>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e00b      	b.n	800353c <HAL_TIM_IC_Start_IT+0x80>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b08      	cmp	r3, #8
 8003528:	d104      	bne.n	8003534 <HAL_TIM_IC_Start_IT+0x78>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e003      	b.n	800353c <HAL_TIM_IC_Start_IT+0x80>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800353a:	b2db      	uxtb	r3, r3
 800353c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800353e:	7bbb      	ldrb	r3, [r7, #14]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d102      	bne.n	800354a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003544:	7b7b      	ldrb	r3, [r7, #13]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d001      	beq.n	800354e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0cc      	b.n	80036e8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <HAL_TIM_IC_Start_IT+0xa2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800355c:	e013      	b.n	8003586 <HAL_TIM_IC_Start_IT+0xca>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b04      	cmp	r3, #4
 8003562:	d104      	bne.n	800356e <HAL_TIM_IC_Start_IT+0xb2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800356c:	e00b      	b.n	8003586 <HAL_TIM_IC_Start_IT+0xca>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d104      	bne.n	800357e <HAL_TIM_IC_Start_IT+0xc2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800357c:	e003      	b.n	8003586 <HAL_TIM_IC_Start_IT+0xca>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <HAL_TIM_IC_Start_IT+0xda>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003594:	e013      	b.n	80035be <HAL_TIM_IC_Start_IT+0x102>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_IC_Start_IT+0xea>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035a4:	e00b      	b.n	80035be <HAL_TIM_IC_Start_IT+0x102>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_IC_Start_IT+0xfa>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035b4:	e003      	b.n	80035be <HAL_TIM_IC_Start_IT+0x102>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	d841      	bhi.n	8003648 <HAL_TIM_IC_Start_IT+0x18c>
 80035c4:	a201      	add	r2, pc, #4	@ (adr r2, 80035cc <HAL_TIM_IC_Start_IT+0x110>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003649 	.word	0x08003649
 80035d4:	08003649 	.word	0x08003649
 80035d8:	08003649 	.word	0x08003649
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003649 	.word	0x08003649
 80035e4:	08003649 	.word	0x08003649
 80035e8:	08003649 	.word	0x08003649
 80035ec:	08003625 	.word	0x08003625
 80035f0:	08003649 	.word	0x08003649
 80035f4:	08003649 	.word	0x08003649
 80035f8:	08003649 	.word	0x08003649
 80035fc:	08003637 	.word	0x08003637
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0202 	orr.w	r2, r2, #2
 800360e:	60da      	str	r2, [r3, #12]
      break;
 8003610:	e01d      	b.n	800364e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0204 	orr.w	r2, r2, #4
 8003620:	60da      	str	r2, [r3, #12]
      break;
 8003622:	e014      	b.n	800364e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	60da      	str	r2, [r3, #12]
      break;
 8003634:	e00b      	b.n	800364e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0210 	orr.w	r2, r2, #16
 8003644:	60da      	str	r2, [r3, #12]
      break;
 8003646:	e002      	b.n	800364e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      break;
 800364c:	bf00      	nop
  }

  if (status == HAL_OK)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d148      	bne.n	80036e6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fc23 	bl	8003ea8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a22      	ldr	r2, [pc, #136]	@ (80036f0 <HAL_TIM_IC_Start_IT+0x234>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_TIM_IC_Start_IT+0x1f6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003674:	d01d      	beq.n	80036b2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1e      	ldr	r2, [pc, #120]	@ (80036f4 <HAL_TIM_IC_Start_IT+0x238>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <HAL_TIM_IC_Start_IT+0x23c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_TIM_IC_Start_IT+0x1f6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <HAL_TIM_IC_Start_IT+0x240>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIM_IC_Start_IT+0x1f6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a19      	ldr	r2, [pc, #100]	@ (8003700 <HAL_TIM_IC_Start_IT+0x244>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIM_IC_Start_IT+0x1f6>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a18      	ldr	r2, [pc, #96]	@ (8003704 <HAL_TIM_IC_Start_IT+0x248>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIM_IC_Start_IT+0x1f6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a16      	ldr	r2, [pc, #88]	@ (8003708 <HAL_TIM_IC_Start_IT+0x24c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d111      	bne.n	80036d6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d010      	beq.n	80036e6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d4:	e007      	b.n	80036e6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40010400 	.word	0x40010400
 8003704:	40014000 	.word	0x40014000
 8003708:	40001800 	.word	0x40001800

0800370c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d020      	beq.n	8003770 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0202 	mvn.w	r2, #2
 8003740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd fe5e 	bl	8001418 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f9ae 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f9b5 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d020      	beq.n	80037bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01b      	beq.n	80037bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0204 	mvn.w	r2, #4
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fe38 	bl	8001418 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f988 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f98f 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d020      	beq.n	8003808 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01b      	beq.n	8003808 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0208 	mvn.w	r2, #8
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fe12 	bl	8001418 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f962 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f969 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d020      	beq.n	8003854 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01b      	beq.n	8003854 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0210 	mvn.w	r2, #16
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2208      	movs	r2, #8
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd fdec 	bl	8001418 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f93c 	bl	8003ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f943 	bl	8003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0201 	mvn.w	r2, #1
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f91a 	bl	8003aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00c      	beq.n	800389c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fbb2 	bl	8004000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f914 	bl	8003ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0220 	mvn.w	r2, #32
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb84 	bl	8003fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003906:	2302      	movs	r3, #2
 8003908:	e088      	b.n	8003a1c <HAL_TIM_IC_ConfigChannel+0x130>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003928:	f000 f994 	bl	8003c54 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 020c 	bic.w	r2, r2, #12
 800393a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6999      	ldr	r1, [r3, #24]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	619a      	str	r2, [r3, #24]
 800394e:	e060      	b.n	8003a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b04      	cmp	r3, #4
 8003954:	d11c      	bne.n	8003990 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003966:	f000 f9e9 	bl	8003d3c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003978:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6999      	ldr	r1, [r3, #24]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	021a      	lsls	r2, r3, #8
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	619a      	str	r2, [r3, #24]
 800398e:	e040      	b.n	8003a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11b      	bne.n	80039ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80039a6:	f000 fa06 	bl	8003db6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 020c 	bic.w	r2, r2, #12
 80039b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69d9      	ldr	r1, [r3, #28]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	61da      	str	r2, [r3, #28]
 80039cc:	e021      	b.n	8003a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	d11c      	bne.n	8003a0e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80039e4:	f000 fa23 	bl	8003e2e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80039f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69d9      	ldr	r1, [r3, #28]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	021a      	lsls	r2, r3, #8
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	61da      	str	r2, [r3, #28]
 8003a0c:	e001      	b.n	8003a12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d831      	bhi.n	8003a9c <HAL_TIM_ReadCapturedValue+0x78>
 8003a38:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003a9d 	.word	0x08003a9d
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	08003a9d 	.word	0x08003a9d
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a9d 	.word	0x08003a9d
 8003a58:	08003a9d 	.word	0x08003a9d
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003a89 	.word	0x08003a89
 8003a64:	08003a9d 	.word	0x08003a9d
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003a93 	.word	0x08003a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7a:	60fb      	str	r3, [r7, #12]

      break;
 8003a7c:	e00f      	b.n	8003a9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a84:	60fb      	str	r3, [r7, #12]

      break;
 8003a86:	e00a      	b.n	8003a9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8e:	60fb      	str	r3, [r7, #12]

      break;
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	60fb      	str	r3, [r7, #12]

      break;
 8003a9a:	e000      	b.n	8003a9e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a9c:	bf00      	nop
  }

  return tmpreg;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a46      	ldr	r2, [pc, #280]	@ (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b1a:	d00f      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a43      	ldr	r2, [pc, #268]	@ (8003c2c <TIM_Base_SetConfig+0x130>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a42      	ldr	r2, [pc, #264]	@ (8003c30 <TIM_Base_SetConfig+0x134>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a41      	ldr	r2, [pc, #260]	@ (8003c34 <TIM_Base_SetConfig+0x138>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a40      	ldr	r2, [pc, #256]	@ (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a35      	ldr	r2, [pc, #212]	@ (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5c:	d027      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a32      	ldr	r2, [pc, #200]	@ (8003c2c <TIM_Base_SetConfig+0x130>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d023      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <TIM_Base_SetConfig+0x134>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a30      	ldr	r2, [pc, #192]	@ (8003c34 <TIM_Base_SetConfig+0x138>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2f      	ldr	r2, [pc, #188]	@ (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d017      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a2e      	ldr	r2, [pc, #184]	@ (8003c3c <TIM_Base_SetConfig+0x140>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2d      	ldr	r2, [pc, #180]	@ (8003c40 <TIM_Base_SetConfig+0x144>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2c      	ldr	r2, [pc, #176]	@ (8003c44 <TIM_Base_SetConfig+0x148>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2b      	ldr	r2, [pc, #172]	@ (8003c48 <TIM_Base_SetConfig+0x14c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c4c <TIM_Base_SetConfig+0x150>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a29      	ldr	r2, [pc, #164]	@ (8003c50 <TIM_Base_SetConfig+0x154>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a10      	ldr	r2, [pc, #64]	@ (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0xf8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a12      	ldr	r2, [pc, #72]	@ (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	611a      	str	r2, [r3, #16]
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40010400 	.word	0x40010400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800
 8003c48:	40001800 	.word	0x40001800
 8003c4c:	40001c00 	.word	0x40001c00
 8003c50:	40002000 	.word	0x40002000

08003c54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f023 0201 	bic.w	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a28      	ldr	r2, [pc, #160]	@ (8003d20 <TIM_TI1_SetConfig+0xcc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01b      	beq.n	8003cba <TIM_TI1_SetConfig+0x66>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c88:	d017      	beq.n	8003cba <TIM_TI1_SetConfig+0x66>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4a25      	ldr	r2, [pc, #148]	@ (8003d24 <TIM_TI1_SetConfig+0xd0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <TIM_TI1_SetConfig+0x66>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a24      	ldr	r2, [pc, #144]	@ (8003d28 <TIM_TI1_SetConfig+0xd4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <TIM_TI1_SetConfig+0x66>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <TIM_TI1_SetConfig+0xd8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <TIM_TI1_SetConfig+0x66>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a22      	ldr	r2, [pc, #136]	@ (8003d30 <TIM_TI1_SetConfig+0xdc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_TI1_SetConfig+0x66>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a21      	ldr	r2, [pc, #132]	@ (8003d34 <TIM_TI1_SetConfig+0xe0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_TI1_SetConfig+0x66>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	@ (8003d38 <TIM_TI1_SetConfig+0xe4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <TIM_TI1_SetConfig+0x6a>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <TIM_TI1_SetConfig+0x6c>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e003      	b.n	8003cde <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f023 030a 	bic.w	r3, r3, #10
 8003cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 030a 	and.w	r3, r3, #10
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010000 	.word	0x40010000
 8003d24:	40000400 	.word	0x40000400
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	40000c00 	.word	0x40000c00
 8003d30:	40010400 	.word	0x40010400
 8003d34:	40014000 	.word	0x40014000
 8003d38:	40001800 	.word	0x40001800

08003d3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f023 0210 	bic.w	r2, r3, #16
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	031b      	lsls	r3, r3, #12
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	621a      	str	r2, [r3, #32]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b087      	sub	sp, #28
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	621a      	str	r2, [r3, #32]
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b087      	sub	sp, #28
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	031b      	lsls	r3, r3, #12
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003e80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	031b      	lsls	r3, r3, #12
 8003e86:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	621a      	str	r2, [r3, #32]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2201      	movs	r2, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	401a      	ands	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1a      	ldr	r2, [r3, #32]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e05a      	b.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d022      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f58:	d01d      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d018      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1a      	ldr	r2, [pc, #104]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10c      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40000800 	.word	0x40000800
 8003fdc:	40000c00 	.word	0x40000c00
 8003fe0:	40010400 	.word	0x40010400
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40001800 	.word	0x40001800

08003fec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <siprintf>:
 8004014:	b40e      	push	{r1, r2, r3}
 8004016:	b500      	push	{lr}
 8004018:	b09c      	sub	sp, #112	@ 0x70
 800401a:	ab1d      	add	r3, sp, #116	@ 0x74
 800401c:	9002      	str	r0, [sp, #8]
 800401e:	9006      	str	r0, [sp, #24]
 8004020:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004024:	4809      	ldr	r0, [pc, #36]	@ (800404c <siprintf+0x38>)
 8004026:	9107      	str	r1, [sp, #28]
 8004028:	9104      	str	r1, [sp, #16]
 800402a:	4909      	ldr	r1, [pc, #36]	@ (8004050 <siprintf+0x3c>)
 800402c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004030:	9105      	str	r1, [sp, #20]
 8004032:	6800      	ldr	r0, [r0, #0]
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	a902      	add	r1, sp, #8
 8004038:	f000 f994 	bl	8004364 <_svfiprintf_r>
 800403c:	9b02      	ldr	r3, [sp, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	b01c      	add	sp, #112	@ 0x70
 8004044:	f85d eb04 	ldr.w	lr, [sp], #4
 8004048:	b003      	add	sp, #12
 800404a:	4770      	bx	lr
 800404c:	2000001c 	.word	0x2000001c
 8004050:	ffff0208 	.word	0xffff0208

08004054 <memset>:
 8004054:	4402      	add	r2, r0
 8004056:	4603      	mov	r3, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <__errno>:
 8004064:	4b01      	ldr	r3, [pc, #4]	@ (800406c <__errno+0x8>)
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	2000001c 	.word	0x2000001c

08004070 <__libc_init_array>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	4d0d      	ldr	r5, [pc, #52]	@ (80040a8 <__libc_init_array+0x38>)
 8004074:	4c0d      	ldr	r4, [pc, #52]	@ (80040ac <__libc_init_array+0x3c>)
 8004076:	1b64      	subs	r4, r4, r5
 8004078:	10a4      	asrs	r4, r4, #2
 800407a:	2600      	movs	r6, #0
 800407c:	42a6      	cmp	r6, r4
 800407e:	d109      	bne.n	8004094 <__libc_init_array+0x24>
 8004080:	4d0b      	ldr	r5, [pc, #44]	@ (80040b0 <__libc_init_array+0x40>)
 8004082:	4c0c      	ldr	r4, [pc, #48]	@ (80040b4 <__libc_init_array+0x44>)
 8004084:	f000 fc66 	bl	8004954 <_init>
 8004088:	1b64      	subs	r4, r4, r5
 800408a:	10a4      	asrs	r4, r4, #2
 800408c:	2600      	movs	r6, #0
 800408e:	42a6      	cmp	r6, r4
 8004090:	d105      	bne.n	800409e <__libc_init_array+0x2e>
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	f855 3b04 	ldr.w	r3, [r5], #4
 8004098:	4798      	blx	r3
 800409a:	3601      	adds	r6, #1
 800409c:	e7ee      	b.n	800407c <__libc_init_array+0xc>
 800409e:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a2:	4798      	blx	r3
 80040a4:	3601      	adds	r6, #1
 80040a6:	e7f2      	b.n	800408e <__libc_init_array+0x1e>
 80040a8:	080049f4 	.word	0x080049f4
 80040ac:	080049f4 	.word	0x080049f4
 80040b0:	080049f4 	.word	0x080049f4
 80040b4:	080049f8 	.word	0x080049f8

080040b8 <__retarget_lock_acquire_recursive>:
 80040b8:	4770      	bx	lr

080040ba <__retarget_lock_release_recursive>:
 80040ba:	4770      	bx	lr

080040bc <_free_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4605      	mov	r5, r0
 80040c0:	2900      	cmp	r1, #0
 80040c2:	d041      	beq.n	8004148 <_free_r+0x8c>
 80040c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c8:	1f0c      	subs	r4, r1, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bfb8      	it	lt
 80040ce:	18e4      	addlt	r4, r4, r3
 80040d0:	f000 f8e0 	bl	8004294 <__malloc_lock>
 80040d4:	4a1d      	ldr	r2, [pc, #116]	@ (800414c <_free_r+0x90>)
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	b933      	cbnz	r3, 80040e8 <_free_r+0x2c>
 80040da:	6063      	str	r3, [r4, #4]
 80040dc:	6014      	str	r4, [r2, #0]
 80040de:	4628      	mov	r0, r5
 80040e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e4:	f000 b8dc 	b.w	80042a0 <__malloc_unlock>
 80040e8:	42a3      	cmp	r3, r4
 80040ea:	d908      	bls.n	80040fe <_free_r+0x42>
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	1821      	adds	r1, r4, r0
 80040f0:	428b      	cmp	r3, r1
 80040f2:	bf01      	itttt	eq
 80040f4:	6819      	ldreq	r1, [r3, #0]
 80040f6:	685b      	ldreq	r3, [r3, #4]
 80040f8:	1809      	addeq	r1, r1, r0
 80040fa:	6021      	streq	r1, [r4, #0]
 80040fc:	e7ed      	b.n	80040da <_free_r+0x1e>
 80040fe:	461a      	mov	r2, r3
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	b10b      	cbz	r3, 8004108 <_free_r+0x4c>
 8004104:	42a3      	cmp	r3, r4
 8004106:	d9fa      	bls.n	80040fe <_free_r+0x42>
 8004108:	6811      	ldr	r1, [r2, #0]
 800410a:	1850      	adds	r0, r2, r1
 800410c:	42a0      	cmp	r0, r4
 800410e:	d10b      	bne.n	8004128 <_free_r+0x6c>
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	4401      	add	r1, r0
 8004114:	1850      	adds	r0, r2, r1
 8004116:	4283      	cmp	r3, r0
 8004118:	6011      	str	r1, [r2, #0]
 800411a:	d1e0      	bne.n	80040de <_free_r+0x22>
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	6053      	str	r3, [r2, #4]
 8004122:	4408      	add	r0, r1
 8004124:	6010      	str	r0, [r2, #0]
 8004126:	e7da      	b.n	80040de <_free_r+0x22>
 8004128:	d902      	bls.n	8004130 <_free_r+0x74>
 800412a:	230c      	movs	r3, #12
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	e7d6      	b.n	80040de <_free_r+0x22>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	1821      	adds	r1, r4, r0
 8004134:	428b      	cmp	r3, r1
 8004136:	bf04      	itt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	bf04      	itt	eq
 8004140:	1809      	addeq	r1, r1, r0
 8004142:	6021      	streq	r1, [r4, #0]
 8004144:	6054      	str	r4, [r2, #4]
 8004146:	e7ca      	b.n	80040de <_free_r+0x22>
 8004148:	bd38      	pop	{r3, r4, r5, pc}
 800414a:	bf00      	nop
 800414c:	200002ac 	.word	0x200002ac

08004150 <sbrk_aligned>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4e0f      	ldr	r6, [pc, #60]	@ (8004190 <sbrk_aligned+0x40>)
 8004154:	460c      	mov	r4, r1
 8004156:	6831      	ldr	r1, [r6, #0]
 8004158:	4605      	mov	r5, r0
 800415a:	b911      	cbnz	r1, 8004162 <sbrk_aligned+0x12>
 800415c:	f000 fba6 	bl	80048ac <_sbrk_r>
 8004160:	6030      	str	r0, [r6, #0]
 8004162:	4621      	mov	r1, r4
 8004164:	4628      	mov	r0, r5
 8004166:	f000 fba1 	bl	80048ac <_sbrk_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d103      	bne.n	8004176 <sbrk_aligned+0x26>
 800416e:	f04f 34ff 	mov.w	r4, #4294967295
 8004172:	4620      	mov	r0, r4
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	1cc4      	adds	r4, r0, #3
 8004178:	f024 0403 	bic.w	r4, r4, #3
 800417c:	42a0      	cmp	r0, r4
 800417e:	d0f8      	beq.n	8004172 <sbrk_aligned+0x22>
 8004180:	1a21      	subs	r1, r4, r0
 8004182:	4628      	mov	r0, r5
 8004184:	f000 fb92 	bl	80048ac <_sbrk_r>
 8004188:	3001      	adds	r0, #1
 800418a:	d1f2      	bne.n	8004172 <sbrk_aligned+0x22>
 800418c:	e7ef      	b.n	800416e <sbrk_aligned+0x1e>
 800418e:	bf00      	nop
 8004190:	200002a8 	.word	0x200002a8

08004194 <_malloc_r>:
 8004194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004198:	1ccd      	adds	r5, r1, #3
 800419a:	f025 0503 	bic.w	r5, r5, #3
 800419e:	3508      	adds	r5, #8
 80041a0:	2d0c      	cmp	r5, #12
 80041a2:	bf38      	it	cc
 80041a4:	250c      	movcc	r5, #12
 80041a6:	2d00      	cmp	r5, #0
 80041a8:	4606      	mov	r6, r0
 80041aa:	db01      	blt.n	80041b0 <_malloc_r+0x1c>
 80041ac:	42a9      	cmp	r1, r5
 80041ae:	d904      	bls.n	80041ba <_malloc_r+0x26>
 80041b0:	230c      	movs	r3, #12
 80041b2:	6033      	str	r3, [r6, #0]
 80041b4:	2000      	movs	r0, #0
 80041b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004290 <_malloc_r+0xfc>
 80041be:	f000 f869 	bl	8004294 <__malloc_lock>
 80041c2:	f8d8 3000 	ldr.w	r3, [r8]
 80041c6:	461c      	mov	r4, r3
 80041c8:	bb44      	cbnz	r4, 800421c <_malloc_r+0x88>
 80041ca:	4629      	mov	r1, r5
 80041cc:	4630      	mov	r0, r6
 80041ce:	f7ff ffbf 	bl	8004150 <sbrk_aligned>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	4604      	mov	r4, r0
 80041d6:	d158      	bne.n	800428a <_malloc_r+0xf6>
 80041d8:	f8d8 4000 	ldr.w	r4, [r8]
 80041dc:	4627      	mov	r7, r4
 80041de:	2f00      	cmp	r7, #0
 80041e0:	d143      	bne.n	800426a <_malloc_r+0xd6>
 80041e2:	2c00      	cmp	r4, #0
 80041e4:	d04b      	beq.n	800427e <_malloc_r+0xea>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	4639      	mov	r1, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	eb04 0903 	add.w	r9, r4, r3
 80041f0:	f000 fb5c 	bl	80048ac <_sbrk_r>
 80041f4:	4581      	cmp	r9, r0
 80041f6:	d142      	bne.n	800427e <_malloc_r+0xea>
 80041f8:	6821      	ldr	r1, [r4, #0]
 80041fa:	1a6d      	subs	r5, r5, r1
 80041fc:	4629      	mov	r1, r5
 80041fe:	4630      	mov	r0, r6
 8004200:	f7ff ffa6 	bl	8004150 <sbrk_aligned>
 8004204:	3001      	adds	r0, #1
 8004206:	d03a      	beq.n	800427e <_malloc_r+0xea>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	442b      	add	r3, r5
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	f8d8 3000 	ldr.w	r3, [r8]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	bb62      	cbnz	r2, 8004270 <_malloc_r+0xdc>
 8004216:	f8c8 7000 	str.w	r7, [r8]
 800421a:	e00f      	b.n	800423c <_malloc_r+0xa8>
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	1b52      	subs	r2, r2, r5
 8004220:	d420      	bmi.n	8004264 <_malloc_r+0xd0>
 8004222:	2a0b      	cmp	r2, #11
 8004224:	d917      	bls.n	8004256 <_malloc_r+0xc2>
 8004226:	1961      	adds	r1, r4, r5
 8004228:	42a3      	cmp	r3, r4
 800422a:	6025      	str	r5, [r4, #0]
 800422c:	bf18      	it	ne
 800422e:	6059      	strne	r1, [r3, #4]
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	bf08      	it	eq
 8004234:	f8c8 1000 	streq.w	r1, [r8]
 8004238:	5162      	str	r2, [r4, r5]
 800423a:	604b      	str	r3, [r1, #4]
 800423c:	4630      	mov	r0, r6
 800423e:	f000 f82f 	bl	80042a0 <__malloc_unlock>
 8004242:	f104 000b 	add.w	r0, r4, #11
 8004246:	1d23      	adds	r3, r4, #4
 8004248:	f020 0007 	bic.w	r0, r0, #7
 800424c:	1ac2      	subs	r2, r0, r3
 800424e:	bf1c      	itt	ne
 8004250:	1a1b      	subne	r3, r3, r0
 8004252:	50a3      	strne	r3, [r4, r2]
 8004254:	e7af      	b.n	80041b6 <_malloc_r+0x22>
 8004256:	6862      	ldr	r2, [r4, #4]
 8004258:	42a3      	cmp	r3, r4
 800425a:	bf0c      	ite	eq
 800425c:	f8c8 2000 	streq.w	r2, [r8]
 8004260:	605a      	strne	r2, [r3, #4]
 8004262:	e7eb      	b.n	800423c <_malloc_r+0xa8>
 8004264:	4623      	mov	r3, r4
 8004266:	6864      	ldr	r4, [r4, #4]
 8004268:	e7ae      	b.n	80041c8 <_malloc_r+0x34>
 800426a:	463c      	mov	r4, r7
 800426c:	687f      	ldr	r7, [r7, #4]
 800426e:	e7b6      	b.n	80041de <_malloc_r+0x4a>
 8004270:	461a      	mov	r2, r3
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	42a3      	cmp	r3, r4
 8004276:	d1fb      	bne.n	8004270 <_malloc_r+0xdc>
 8004278:	2300      	movs	r3, #0
 800427a:	6053      	str	r3, [r2, #4]
 800427c:	e7de      	b.n	800423c <_malloc_r+0xa8>
 800427e:	230c      	movs	r3, #12
 8004280:	6033      	str	r3, [r6, #0]
 8004282:	4630      	mov	r0, r6
 8004284:	f000 f80c 	bl	80042a0 <__malloc_unlock>
 8004288:	e794      	b.n	80041b4 <_malloc_r+0x20>
 800428a:	6005      	str	r5, [r0, #0]
 800428c:	e7d6      	b.n	800423c <_malloc_r+0xa8>
 800428e:	bf00      	nop
 8004290:	200002ac 	.word	0x200002ac

08004294 <__malloc_lock>:
 8004294:	4801      	ldr	r0, [pc, #4]	@ (800429c <__malloc_lock+0x8>)
 8004296:	f7ff bf0f 	b.w	80040b8 <__retarget_lock_acquire_recursive>
 800429a:	bf00      	nop
 800429c:	200002a4 	.word	0x200002a4

080042a0 <__malloc_unlock>:
 80042a0:	4801      	ldr	r0, [pc, #4]	@ (80042a8 <__malloc_unlock+0x8>)
 80042a2:	f7ff bf0a 	b.w	80040ba <__retarget_lock_release_recursive>
 80042a6:	bf00      	nop
 80042a8:	200002a4 	.word	0x200002a4

080042ac <__ssputs_r>:
 80042ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	688e      	ldr	r6, [r1, #8]
 80042b2:	461f      	mov	r7, r3
 80042b4:	42be      	cmp	r6, r7
 80042b6:	680b      	ldr	r3, [r1, #0]
 80042b8:	4682      	mov	sl, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	4690      	mov	r8, r2
 80042be:	d82d      	bhi.n	800431c <__ssputs_r+0x70>
 80042c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042c8:	d026      	beq.n	8004318 <__ssputs_r+0x6c>
 80042ca:	6965      	ldr	r5, [r4, #20]
 80042cc:	6909      	ldr	r1, [r1, #16]
 80042ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042d2:	eba3 0901 	sub.w	r9, r3, r1
 80042d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042da:	1c7b      	adds	r3, r7, #1
 80042dc:	444b      	add	r3, r9
 80042de:	106d      	asrs	r5, r5, #1
 80042e0:	429d      	cmp	r5, r3
 80042e2:	bf38      	it	cc
 80042e4:	461d      	movcc	r5, r3
 80042e6:	0553      	lsls	r3, r2, #21
 80042e8:	d527      	bpl.n	800433a <__ssputs_r+0x8e>
 80042ea:	4629      	mov	r1, r5
 80042ec:	f7ff ff52 	bl	8004194 <_malloc_r>
 80042f0:	4606      	mov	r6, r0
 80042f2:	b360      	cbz	r0, 800434e <__ssputs_r+0xa2>
 80042f4:	6921      	ldr	r1, [r4, #16]
 80042f6:	464a      	mov	r2, r9
 80042f8:	f000 fae8 	bl	80048cc <memcpy>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004306:	81a3      	strh	r3, [r4, #12]
 8004308:	6126      	str	r6, [r4, #16]
 800430a:	6165      	str	r5, [r4, #20]
 800430c:	444e      	add	r6, r9
 800430e:	eba5 0509 	sub.w	r5, r5, r9
 8004312:	6026      	str	r6, [r4, #0]
 8004314:	60a5      	str	r5, [r4, #8]
 8004316:	463e      	mov	r6, r7
 8004318:	42be      	cmp	r6, r7
 800431a:	d900      	bls.n	800431e <__ssputs_r+0x72>
 800431c:	463e      	mov	r6, r7
 800431e:	6820      	ldr	r0, [r4, #0]
 8004320:	4632      	mov	r2, r6
 8004322:	4641      	mov	r1, r8
 8004324:	f000 faa8 	bl	8004878 <memmove>
 8004328:	68a3      	ldr	r3, [r4, #8]
 800432a:	1b9b      	subs	r3, r3, r6
 800432c:	60a3      	str	r3, [r4, #8]
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	4433      	add	r3, r6
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	2000      	movs	r0, #0
 8004336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433a:	462a      	mov	r2, r5
 800433c:	f000 fad4 	bl	80048e8 <_realloc_r>
 8004340:	4606      	mov	r6, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	d1e0      	bne.n	8004308 <__ssputs_r+0x5c>
 8004346:	6921      	ldr	r1, [r4, #16]
 8004348:	4650      	mov	r0, sl
 800434a:	f7ff feb7 	bl	80040bc <_free_r>
 800434e:	230c      	movs	r3, #12
 8004350:	f8ca 3000 	str.w	r3, [sl]
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800435a:	81a3      	strh	r3, [r4, #12]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	e7e9      	b.n	8004336 <__ssputs_r+0x8a>
	...

08004364 <_svfiprintf_r>:
 8004364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	4698      	mov	r8, r3
 800436a:	898b      	ldrh	r3, [r1, #12]
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	b09d      	sub	sp, #116	@ 0x74
 8004370:	4607      	mov	r7, r0
 8004372:	460d      	mov	r5, r1
 8004374:	4614      	mov	r4, r2
 8004376:	d510      	bpl.n	800439a <_svfiprintf_r+0x36>
 8004378:	690b      	ldr	r3, [r1, #16]
 800437a:	b973      	cbnz	r3, 800439a <_svfiprintf_r+0x36>
 800437c:	2140      	movs	r1, #64	@ 0x40
 800437e:	f7ff ff09 	bl	8004194 <_malloc_r>
 8004382:	6028      	str	r0, [r5, #0]
 8004384:	6128      	str	r0, [r5, #16]
 8004386:	b930      	cbnz	r0, 8004396 <_svfiprintf_r+0x32>
 8004388:	230c      	movs	r3, #12
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	b01d      	add	sp, #116	@ 0x74
 8004392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004396:	2340      	movs	r3, #64	@ 0x40
 8004398:	616b      	str	r3, [r5, #20]
 800439a:	2300      	movs	r3, #0
 800439c:	9309      	str	r3, [sp, #36]	@ 0x24
 800439e:	2320      	movs	r3, #32
 80043a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80043a8:	2330      	movs	r3, #48	@ 0x30
 80043aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004548 <_svfiprintf_r+0x1e4>
 80043ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043b2:	f04f 0901 	mov.w	r9, #1
 80043b6:	4623      	mov	r3, r4
 80043b8:	469a      	mov	sl, r3
 80043ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043be:	b10a      	cbz	r2, 80043c4 <_svfiprintf_r+0x60>
 80043c0:	2a25      	cmp	r2, #37	@ 0x25
 80043c2:	d1f9      	bne.n	80043b8 <_svfiprintf_r+0x54>
 80043c4:	ebba 0b04 	subs.w	fp, sl, r4
 80043c8:	d00b      	beq.n	80043e2 <_svfiprintf_r+0x7e>
 80043ca:	465b      	mov	r3, fp
 80043cc:	4622      	mov	r2, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	4638      	mov	r0, r7
 80043d2:	f7ff ff6b 	bl	80042ac <__ssputs_r>
 80043d6:	3001      	adds	r0, #1
 80043d8:	f000 80a7 	beq.w	800452a <_svfiprintf_r+0x1c6>
 80043dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043de:	445a      	add	r2, fp
 80043e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80043e2:	f89a 3000 	ldrb.w	r3, [sl]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 809f 	beq.w	800452a <_svfiprintf_r+0x1c6>
 80043ec:	2300      	movs	r3, #0
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295
 80043f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043f6:	f10a 0a01 	add.w	sl, sl, #1
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	9307      	str	r3, [sp, #28]
 80043fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004402:	931a      	str	r3, [sp, #104]	@ 0x68
 8004404:	4654      	mov	r4, sl
 8004406:	2205      	movs	r2, #5
 8004408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440c:	484e      	ldr	r0, [pc, #312]	@ (8004548 <_svfiprintf_r+0x1e4>)
 800440e:	f7fb feef 	bl	80001f0 <memchr>
 8004412:	9a04      	ldr	r2, [sp, #16]
 8004414:	b9d8      	cbnz	r0, 800444e <_svfiprintf_r+0xea>
 8004416:	06d0      	lsls	r0, r2, #27
 8004418:	bf44      	itt	mi
 800441a:	2320      	movmi	r3, #32
 800441c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004420:	0711      	lsls	r1, r2, #28
 8004422:	bf44      	itt	mi
 8004424:	232b      	movmi	r3, #43	@ 0x2b
 8004426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800442a:	f89a 3000 	ldrb.w	r3, [sl]
 800442e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004430:	d015      	beq.n	800445e <_svfiprintf_r+0xfa>
 8004432:	9a07      	ldr	r2, [sp, #28]
 8004434:	4654      	mov	r4, sl
 8004436:	2000      	movs	r0, #0
 8004438:	f04f 0c0a 	mov.w	ip, #10
 800443c:	4621      	mov	r1, r4
 800443e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004442:	3b30      	subs	r3, #48	@ 0x30
 8004444:	2b09      	cmp	r3, #9
 8004446:	d94b      	bls.n	80044e0 <_svfiprintf_r+0x17c>
 8004448:	b1b0      	cbz	r0, 8004478 <_svfiprintf_r+0x114>
 800444a:	9207      	str	r2, [sp, #28]
 800444c:	e014      	b.n	8004478 <_svfiprintf_r+0x114>
 800444e:	eba0 0308 	sub.w	r3, r0, r8
 8004452:	fa09 f303 	lsl.w	r3, r9, r3
 8004456:	4313      	orrs	r3, r2
 8004458:	9304      	str	r3, [sp, #16]
 800445a:	46a2      	mov	sl, r4
 800445c:	e7d2      	b.n	8004404 <_svfiprintf_r+0xa0>
 800445e:	9b03      	ldr	r3, [sp, #12]
 8004460:	1d19      	adds	r1, r3, #4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	9103      	str	r1, [sp, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	bfbb      	ittet	lt
 800446a:	425b      	neglt	r3, r3
 800446c:	f042 0202 	orrlt.w	r2, r2, #2
 8004470:	9307      	strge	r3, [sp, #28]
 8004472:	9307      	strlt	r3, [sp, #28]
 8004474:	bfb8      	it	lt
 8004476:	9204      	strlt	r2, [sp, #16]
 8004478:	7823      	ldrb	r3, [r4, #0]
 800447a:	2b2e      	cmp	r3, #46	@ 0x2e
 800447c:	d10a      	bne.n	8004494 <_svfiprintf_r+0x130>
 800447e:	7863      	ldrb	r3, [r4, #1]
 8004480:	2b2a      	cmp	r3, #42	@ 0x2a
 8004482:	d132      	bne.n	80044ea <_svfiprintf_r+0x186>
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	1d1a      	adds	r2, r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	9203      	str	r2, [sp, #12]
 800448c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004490:	3402      	adds	r4, #2
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004558 <_svfiprintf_r+0x1f4>
 8004498:	7821      	ldrb	r1, [r4, #0]
 800449a:	2203      	movs	r2, #3
 800449c:	4650      	mov	r0, sl
 800449e:	f7fb fea7 	bl	80001f0 <memchr>
 80044a2:	b138      	cbz	r0, 80044b4 <_svfiprintf_r+0x150>
 80044a4:	9b04      	ldr	r3, [sp, #16]
 80044a6:	eba0 000a 	sub.w	r0, r0, sl
 80044aa:	2240      	movs	r2, #64	@ 0x40
 80044ac:	4082      	lsls	r2, r0
 80044ae:	4313      	orrs	r3, r2
 80044b0:	3401      	adds	r4, #1
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b8:	4824      	ldr	r0, [pc, #144]	@ (800454c <_svfiprintf_r+0x1e8>)
 80044ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044be:	2206      	movs	r2, #6
 80044c0:	f7fb fe96 	bl	80001f0 <memchr>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d036      	beq.n	8004536 <_svfiprintf_r+0x1d2>
 80044c8:	4b21      	ldr	r3, [pc, #132]	@ (8004550 <_svfiprintf_r+0x1ec>)
 80044ca:	bb1b      	cbnz	r3, 8004514 <_svfiprintf_r+0x1b0>
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	3307      	adds	r3, #7
 80044d0:	f023 0307 	bic.w	r3, r3, #7
 80044d4:	3308      	adds	r3, #8
 80044d6:	9303      	str	r3, [sp, #12]
 80044d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044da:	4433      	add	r3, r6
 80044dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044de:	e76a      	b.n	80043b6 <_svfiprintf_r+0x52>
 80044e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80044e4:	460c      	mov	r4, r1
 80044e6:	2001      	movs	r0, #1
 80044e8:	e7a8      	b.n	800443c <_svfiprintf_r+0xd8>
 80044ea:	2300      	movs	r3, #0
 80044ec:	3401      	adds	r4, #1
 80044ee:	9305      	str	r3, [sp, #20]
 80044f0:	4619      	mov	r1, r3
 80044f2:	f04f 0c0a 	mov.w	ip, #10
 80044f6:	4620      	mov	r0, r4
 80044f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044fc:	3a30      	subs	r2, #48	@ 0x30
 80044fe:	2a09      	cmp	r2, #9
 8004500:	d903      	bls.n	800450a <_svfiprintf_r+0x1a6>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0c6      	beq.n	8004494 <_svfiprintf_r+0x130>
 8004506:	9105      	str	r1, [sp, #20]
 8004508:	e7c4      	b.n	8004494 <_svfiprintf_r+0x130>
 800450a:	fb0c 2101 	mla	r1, ip, r1, r2
 800450e:	4604      	mov	r4, r0
 8004510:	2301      	movs	r3, #1
 8004512:	e7f0      	b.n	80044f6 <_svfiprintf_r+0x192>
 8004514:	ab03      	add	r3, sp, #12
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	462a      	mov	r2, r5
 800451a:	4b0e      	ldr	r3, [pc, #56]	@ (8004554 <_svfiprintf_r+0x1f0>)
 800451c:	a904      	add	r1, sp, #16
 800451e:	4638      	mov	r0, r7
 8004520:	f3af 8000 	nop.w
 8004524:	1c42      	adds	r2, r0, #1
 8004526:	4606      	mov	r6, r0
 8004528:	d1d6      	bne.n	80044d8 <_svfiprintf_r+0x174>
 800452a:	89ab      	ldrh	r3, [r5, #12]
 800452c:	065b      	lsls	r3, r3, #25
 800452e:	f53f af2d 	bmi.w	800438c <_svfiprintf_r+0x28>
 8004532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004534:	e72c      	b.n	8004390 <_svfiprintf_r+0x2c>
 8004536:	ab03      	add	r3, sp, #12
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	462a      	mov	r2, r5
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <_svfiprintf_r+0x1f0>)
 800453e:	a904      	add	r1, sp, #16
 8004540:	4638      	mov	r0, r7
 8004542:	f000 f879 	bl	8004638 <_printf_i>
 8004546:	e7ed      	b.n	8004524 <_svfiprintf_r+0x1c0>
 8004548:	080049b8 	.word	0x080049b8
 800454c:	080049c2 	.word	0x080049c2
 8004550:	00000000 	.word	0x00000000
 8004554:	080042ad 	.word	0x080042ad
 8004558:	080049be 	.word	0x080049be

0800455c <_printf_common>:
 800455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	4616      	mov	r6, r2
 8004562:	4698      	mov	r8, r3
 8004564:	688a      	ldr	r2, [r1, #8]
 8004566:	690b      	ldr	r3, [r1, #16]
 8004568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800456c:	4293      	cmp	r3, r2
 800456e:	bfb8      	it	lt
 8004570:	4613      	movlt	r3, r2
 8004572:	6033      	str	r3, [r6, #0]
 8004574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004578:	4607      	mov	r7, r0
 800457a:	460c      	mov	r4, r1
 800457c:	b10a      	cbz	r2, 8004582 <_printf_common+0x26>
 800457e:	3301      	adds	r3, #1
 8004580:	6033      	str	r3, [r6, #0]
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	0699      	lsls	r1, r3, #26
 8004586:	bf42      	ittt	mi
 8004588:	6833      	ldrmi	r3, [r6, #0]
 800458a:	3302      	addmi	r3, #2
 800458c:	6033      	strmi	r3, [r6, #0]
 800458e:	6825      	ldr	r5, [r4, #0]
 8004590:	f015 0506 	ands.w	r5, r5, #6
 8004594:	d106      	bne.n	80045a4 <_printf_common+0x48>
 8004596:	f104 0a19 	add.w	sl, r4, #25
 800459a:	68e3      	ldr	r3, [r4, #12]
 800459c:	6832      	ldr	r2, [r6, #0]
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	42ab      	cmp	r3, r5
 80045a2:	dc26      	bgt.n	80045f2 <_printf_common+0x96>
 80045a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045a8:	6822      	ldr	r2, [r4, #0]
 80045aa:	3b00      	subs	r3, #0
 80045ac:	bf18      	it	ne
 80045ae:	2301      	movne	r3, #1
 80045b0:	0692      	lsls	r2, r2, #26
 80045b2:	d42b      	bmi.n	800460c <_printf_common+0xb0>
 80045b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045b8:	4641      	mov	r1, r8
 80045ba:	4638      	mov	r0, r7
 80045bc:	47c8      	blx	r9
 80045be:	3001      	adds	r0, #1
 80045c0:	d01e      	beq.n	8004600 <_printf_common+0xa4>
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	6922      	ldr	r2, [r4, #16]
 80045c6:	f003 0306 	and.w	r3, r3, #6
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	bf02      	ittt	eq
 80045ce:	68e5      	ldreq	r5, [r4, #12]
 80045d0:	6833      	ldreq	r3, [r6, #0]
 80045d2:	1aed      	subeq	r5, r5, r3
 80045d4:	68a3      	ldr	r3, [r4, #8]
 80045d6:	bf0c      	ite	eq
 80045d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045dc:	2500      	movne	r5, #0
 80045de:	4293      	cmp	r3, r2
 80045e0:	bfc4      	itt	gt
 80045e2:	1a9b      	subgt	r3, r3, r2
 80045e4:	18ed      	addgt	r5, r5, r3
 80045e6:	2600      	movs	r6, #0
 80045e8:	341a      	adds	r4, #26
 80045ea:	42b5      	cmp	r5, r6
 80045ec:	d11a      	bne.n	8004624 <_printf_common+0xc8>
 80045ee:	2000      	movs	r0, #0
 80045f0:	e008      	b.n	8004604 <_printf_common+0xa8>
 80045f2:	2301      	movs	r3, #1
 80045f4:	4652      	mov	r2, sl
 80045f6:	4641      	mov	r1, r8
 80045f8:	4638      	mov	r0, r7
 80045fa:	47c8      	blx	r9
 80045fc:	3001      	adds	r0, #1
 80045fe:	d103      	bne.n	8004608 <_printf_common+0xac>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004608:	3501      	adds	r5, #1
 800460a:	e7c6      	b.n	800459a <_printf_common+0x3e>
 800460c:	18e1      	adds	r1, r4, r3
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	2030      	movs	r0, #48	@ 0x30
 8004612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004616:	4422      	add	r2, r4
 8004618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800461c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004620:	3302      	adds	r3, #2
 8004622:	e7c7      	b.n	80045b4 <_printf_common+0x58>
 8004624:	2301      	movs	r3, #1
 8004626:	4622      	mov	r2, r4
 8004628:	4641      	mov	r1, r8
 800462a:	4638      	mov	r0, r7
 800462c:	47c8      	blx	r9
 800462e:	3001      	adds	r0, #1
 8004630:	d0e6      	beq.n	8004600 <_printf_common+0xa4>
 8004632:	3601      	adds	r6, #1
 8004634:	e7d9      	b.n	80045ea <_printf_common+0x8e>
	...

08004638 <_printf_i>:
 8004638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	7e0f      	ldrb	r7, [r1, #24]
 800463e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004640:	2f78      	cmp	r7, #120	@ 0x78
 8004642:	4691      	mov	r9, r2
 8004644:	4680      	mov	r8, r0
 8004646:	460c      	mov	r4, r1
 8004648:	469a      	mov	sl, r3
 800464a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800464e:	d807      	bhi.n	8004660 <_printf_i+0x28>
 8004650:	2f62      	cmp	r7, #98	@ 0x62
 8004652:	d80a      	bhi.n	800466a <_printf_i+0x32>
 8004654:	2f00      	cmp	r7, #0
 8004656:	f000 80d2 	beq.w	80047fe <_printf_i+0x1c6>
 800465a:	2f58      	cmp	r7, #88	@ 0x58
 800465c:	f000 80b9 	beq.w	80047d2 <_printf_i+0x19a>
 8004660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004668:	e03a      	b.n	80046e0 <_printf_i+0xa8>
 800466a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800466e:	2b15      	cmp	r3, #21
 8004670:	d8f6      	bhi.n	8004660 <_printf_i+0x28>
 8004672:	a101      	add	r1, pc, #4	@ (adr r1, 8004678 <_printf_i+0x40>)
 8004674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004678:	080046d1 	.word	0x080046d1
 800467c:	080046e5 	.word	0x080046e5
 8004680:	08004661 	.word	0x08004661
 8004684:	08004661 	.word	0x08004661
 8004688:	08004661 	.word	0x08004661
 800468c:	08004661 	.word	0x08004661
 8004690:	080046e5 	.word	0x080046e5
 8004694:	08004661 	.word	0x08004661
 8004698:	08004661 	.word	0x08004661
 800469c:	08004661 	.word	0x08004661
 80046a0:	08004661 	.word	0x08004661
 80046a4:	080047e5 	.word	0x080047e5
 80046a8:	0800470f 	.word	0x0800470f
 80046ac:	0800479f 	.word	0x0800479f
 80046b0:	08004661 	.word	0x08004661
 80046b4:	08004661 	.word	0x08004661
 80046b8:	08004807 	.word	0x08004807
 80046bc:	08004661 	.word	0x08004661
 80046c0:	0800470f 	.word	0x0800470f
 80046c4:	08004661 	.word	0x08004661
 80046c8:	08004661 	.word	0x08004661
 80046cc:	080047a7 	.word	0x080047a7
 80046d0:	6833      	ldr	r3, [r6, #0]
 80046d2:	1d1a      	adds	r2, r3, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6032      	str	r2, [r6, #0]
 80046d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046e0:	2301      	movs	r3, #1
 80046e2:	e09d      	b.n	8004820 <_printf_i+0x1e8>
 80046e4:	6833      	ldr	r3, [r6, #0]
 80046e6:	6820      	ldr	r0, [r4, #0]
 80046e8:	1d19      	adds	r1, r3, #4
 80046ea:	6031      	str	r1, [r6, #0]
 80046ec:	0606      	lsls	r6, r0, #24
 80046ee:	d501      	bpl.n	80046f4 <_printf_i+0xbc>
 80046f0:	681d      	ldr	r5, [r3, #0]
 80046f2:	e003      	b.n	80046fc <_printf_i+0xc4>
 80046f4:	0645      	lsls	r5, r0, #25
 80046f6:	d5fb      	bpl.n	80046f0 <_printf_i+0xb8>
 80046f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046fc:	2d00      	cmp	r5, #0
 80046fe:	da03      	bge.n	8004708 <_printf_i+0xd0>
 8004700:	232d      	movs	r3, #45	@ 0x2d
 8004702:	426d      	negs	r5, r5
 8004704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004708:	4859      	ldr	r0, [pc, #356]	@ (8004870 <_printf_i+0x238>)
 800470a:	230a      	movs	r3, #10
 800470c:	e011      	b.n	8004732 <_printf_i+0xfa>
 800470e:	6821      	ldr	r1, [r4, #0]
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	0608      	lsls	r0, r1, #24
 8004714:	f853 5b04 	ldr.w	r5, [r3], #4
 8004718:	d402      	bmi.n	8004720 <_printf_i+0xe8>
 800471a:	0649      	lsls	r1, r1, #25
 800471c:	bf48      	it	mi
 800471e:	b2ad      	uxthmi	r5, r5
 8004720:	2f6f      	cmp	r7, #111	@ 0x6f
 8004722:	4853      	ldr	r0, [pc, #332]	@ (8004870 <_printf_i+0x238>)
 8004724:	6033      	str	r3, [r6, #0]
 8004726:	bf14      	ite	ne
 8004728:	230a      	movne	r3, #10
 800472a:	2308      	moveq	r3, #8
 800472c:	2100      	movs	r1, #0
 800472e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004732:	6866      	ldr	r6, [r4, #4]
 8004734:	60a6      	str	r6, [r4, #8]
 8004736:	2e00      	cmp	r6, #0
 8004738:	bfa2      	ittt	ge
 800473a:	6821      	ldrge	r1, [r4, #0]
 800473c:	f021 0104 	bicge.w	r1, r1, #4
 8004740:	6021      	strge	r1, [r4, #0]
 8004742:	b90d      	cbnz	r5, 8004748 <_printf_i+0x110>
 8004744:	2e00      	cmp	r6, #0
 8004746:	d04b      	beq.n	80047e0 <_printf_i+0x1a8>
 8004748:	4616      	mov	r6, r2
 800474a:	fbb5 f1f3 	udiv	r1, r5, r3
 800474e:	fb03 5711 	mls	r7, r3, r1, r5
 8004752:	5dc7      	ldrb	r7, [r0, r7]
 8004754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004758:	462f      	mov	r7, r5
 800475a:	42bb      	cmp	r3, r7
 800475c:	460d      	mov	r5, r1
 800475e:	d9f4      	bls.n	800474a <_printf_i+0x112>
 8004760:	2b08      	cmp	r3, #8
 8004762:	d10b      	bne.n	800477c <_printf_i+0x144>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	07df      	lsls	r7, r3, #31
 8004768:	d508      	bpl.n	800477c <_printf_i+0x144>
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	6861      	ldr	r1, [r4, #4]
 800476e:	4299      	cmp	r1, r3
 8004770:	bfde      	ittt	le
 8004772:	2330      	movle	r3, #48	@ 0x30
 8004774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800477c:	1b92      	subs	r2, r2, r6
 800477e:	6122      	str	r2, [r4, #16]
 8004780:	f8cd a000 	str.w	sl, [sp]
 8004784:	464b      	mov	r3, r9
 8004786:	aa03      	add	r2, sp, #12
 8004788:	4621      	mov	r1, r4
 800478a:	4640      	mov	r0, r8
 800478c:	f7ff fee6 	bl	800455c <_printf_common>
 8004790:	3001      	adds	r0, #1
 8004792:	d14a      	bne.n	800482a <_printf_i+0x1f2>
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	b004      	add	sp, #16
 800479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	f043 0320 	orr.w	r3, r3, #32
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	4833      	ldr	r0, [pc, #204]	@ (8004874 <_printf_i+0x23c>)
 80047a8:	2778      	movs	r7, #120	@ 0x78
 80047aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	6831      	ldr	r1, [r6, #0]
 80047b2:	061f      	lsls	r7, r3, #24
 80047b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80047b8:	d402      	bmi.n	80047c0 <_printf_i+0x188>
 80047ba:	065f      	lsls	r7, r3, #25
 80047bc:	bf48      	it	mi
 80047be:	b2ad      	uxthmi	r5, r5
 80047c0:	6031      	str	r1, [r6, #0]
 80047c2:	07d9      	lsls	r1, r3, #31
 80047c4:	bf44      	itt	mi
 80047c6:	f043 0320 	orrmi.w	r3, r3, #32
 80047ca:	6023      	strmi	r3, [r4, #0]
 80047cc:	b11d      	cbz	r5, 80047d6 <_printf_i+0x19e>
 80047ce:	2310      	movs	r3, #16
 80047d0:	e7ac      	b.n	800472c <_printf_i+0xf4>
 80047d2:	4827      	ldr	r0, [pc, #156]	@ (8004870 <_printf_i+0x238>)
 80047d4:	e7e9      	b.n	80047aa <_printf_i+0x172>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	f023 0320 	bic.w	r3, r3, #32
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	e7f6      	b.n	80047ce <_printf_i+0x196>
 80047e0:	4616      	mov	r6, r2
 80047e2:	e7bd      	b.n	8004760 <_printf_i+0x128>
 80047e4:	6833      	ldr	r3, [r6, #0]
 80047e6:	6825      	ldr	r5, [r4, #0]
 80047e8:	6961      	ldr	r1, [r4, #20]
 80047ea:	1d18      	adds	r0, r3, #4
 80047ec:	6030      	str	r0, [r6, #0]
 80047ee:	062e      	lsls	r6, r5, #24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	d501      	bpl.n	80047f8 <_printf_i+0x1c0>
 80047f4:	6019      	str	r1, [r3, #0]
 80047f6:	e002      	b.n	80047fe <_printf_i+0x1c6>
 80047f8:	0668      	lsls	r0, r5, #25
 80047fa:	d5fb      	bpl.n	80047f4 <_printf_i+0x1bc>
 80047fc:	8019      	strh	r1, [r3, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	4616      	mov	r6, r2
 8004804:	e7bc      	b.n	8004780 <_printf_i+0x148>
 8004806:	6833      	ldr	r3, [r6, #0]
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	6032      	str	r2, [r6, #0]
 800480c:	681e      	ldr	r6, [r3, #0]
 800480e:	6862      	ldr	r2, [r4, #4]
 8004810:	2100      	movs	r1, #0
 8004812:	4630      	mov	r0, r6
 8004814:	f7fb fcec 	bl	80001f0 <memchr>
 8004818:	b108      	cbz	r0, 800481e <_printf_i+0x1e6>
 800481a:	1b80      	subs	r0, r0, r6
 800481c:	6060      	str	r0, [r4, #4]
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	2300      	movs	r3, #0
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004828:	e7aa      	b.n	8004780 <_printf_i+0x148>
 800482a:	6923      	ldr	r3, [r4, #16]
 800482c:	4632      	mov	r2, r6
 800482e:	4649      	mov	r1, r9
 8004830:	4640      	mov	r0, r8
 8004832:	47d0      	blx	sl
 8004834:	3001      	adds	r0, #1
 8004836:	d0ad      	beq.n	8004794 <_printf_i+0x15c>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	079b      	lsls	r3, r3, #30
 800483c:	d413      	bmi.n	8004866 <_printf_i+0x22e>
 800483e:	68e0      	ldr	r0, [r4, #12]
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	4298      	cmp	r0, r3
 8004844:	bfb8      	it	lt
 8004846:	4618      	movlt	r0, r3
 8004848:	e7a6      	b.n	8004798 <_printf_i+0x160>
 800484a:	2301      	movs	r3, #1
 800484c:	4632      	mov	r2, r6
 800484e:	4649      	mov	r1, r9
 8004850:	4640      	mov	r0, r8
 8004852:	47d0      	blx	sl
 8004854:	3001      	adds	r0, #1
 8004856:	d09d      	beq.n	8004794 <_printf_i+0x15c>
 8004858:	3501      	adds	r5, #1
 800485a:	68e3      	ldr	r3, [r4, #12]
 800485c:	9903      	ldr	r1, [sp, #12]
 800485e:	1a5b      	subs	r3, r3, r1
 8004860:	42ab      	cmp	r3, r5
 8004862:	dcf2      	bgt.n	800484a <_printf_i+0x212>
 8004864:	e7eb      	b.n	800483e <_printf_i+0x206>
 8004866:	2500      	movs	r5, #0
 8004868:	f104 0619 	add.w	r6, r4, #25
 800486c:	e7f5      	b.n	800485a <_printf_i+0x222>
 800486e:	bf00      	nop
 8004870:	080049c9 	.word	0x080049c9
 8004874:	080049da 	.word	0x080049da

08004878 <memmove>:
 8004878:	4288      	cmp	r0, r1
 800487a:	b510      	push	{r4, lr}
 800487c:	eb01 0402 	add.w	r4, r1, r2
 8004880:	d902      	bls.n	8004888 <memmove+0x10>
 8004882:	4284      	cmp	r4, r0
 8004884:	4623      	mov	r3, r4
 8004886:	d807      	bhi.n	8004898 <memmove+0x20>
 8004888:	1e43      	subs	r3, r0, #1
 800488a:	42a1      	cmp	r1, r4
 800488c:	d008      	beq.n	80048a0 <memmove+0x28>
 800488e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004896:	e7f8      	b.n	800488a <memmove+0x12>
 8004898:	4402      	add	r2, r0
 800489a:	4601      	mov	r1, r0
 800489c:	428a      	cmp	r2, r1
 800489e:	d100      	bne.n	80048a2 <memmove+0x2a>
 80048a0:	bd10      	pop	{r4, pc}
 80048a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048aa:	e7f7      	b.n	800489c <memmove+0x24>

080048ac <_sbrk_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d06      	ldr	r5, [pc, #24]	@ (80048c8 <_sbrk_r+0x1c>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	f7fc fc54 	bl	8001164 <_sbrk>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_sbrk_r+0x1a>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_sbrk_r+0x1a>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	200002a0 	.word	0x200002a0

080048cc <memcpy>:
 80048cc:	440a      	add	r2, r1
 80048ce:	4291      	cmp	r1, r2
 80048d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048d4:	d100      	bne.n	80048d8 <memcpy+0xc>
 80048d6:	4770      	bx	lr
 80048d8:	b510      	push	{r4, lr}
 80048da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048e2:	4291      	cmp	r1, r2
 80048e4:	d1f9      	bne.n	80048da <memcpy+0xe>
 80048e6:	bd10      	pop	{r4, pc}

080048e8 <_realloc_r>:
 80048e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ec:	4680      	mov	r8, r0
 80048ee:	4615      	mov	r5, r2
 80048f0:	460c      	mov	r4, r1
 80048f2:	b921      	cbnz	r1, 80048fe <_realloc_r+0x16>
 80048f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	4611      	mov	r1, r2
 80048fa:	f7ff bc4b 	b.w	8004194 <_malloc_r>
 80048fe:	b92a      	cbnz	r2, 800490c <_realloc_r+0x24>
 8004900:	f7ff fbdc 	bl	80040bc <_free_r>
 8004904:	2400      	movs	r4, #0
 8004906:	4620      	mov	r0, r4
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490c:	f000 f81a 	bl	8004944 <_malloc_usable_size_r>
 8004910:	4285      	cmp	r5, r0
 8004912:	4606      	mov	r6, r0
 8004914:	d802      	bhi.n	800491c <_realloc_r+0x34>
 8004916:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800491a:	d8f4      	bhi.n	8004906 <_realloc_r+0x1e>
 800491c:	4629      	mov	r1, r5
 800491e:	4640      	mov	r0, r8
 8004920:	f7ff fc38 	bl	8004194 <_malloc_r>
 8004924:	4607      	mov	r7, r0
 8004926:	2800      	cmp	r0, #0
 8004928:	d0ec      	beq.n	8004904 <_realloc_r+0x1c>
 800492a:	42b5      	cmp	r5, r6
 800492c:	462a      	mov	r2, r5
 800492e:	4621      	mov	r1, r4
 8004930:	bf28      	it	cs
 8004932:	4632      	movcs	r2, r6
 8004934:	f7ff ffca 	bl	80048cc <memcpy>
 8004938:	4621      	mov	r1, r4
 800493a:	4640      	mov	r0, r8
 800493c:	f7ff fbbe 	bl	80040bc <_free_r>
 8004940:	463c      	mov	r4, r7
 8004942:	e7e0      	b.n	8004906 <_realloc_r+0x1e>

08004944 <_malloc_usable_size_r>:
 8004944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004948:	1f18      	subs	r0, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfbc      	itt	lt
 800494e:	580b      	ldrlt	r3, [r1, r0]
 8004950:	18c0      	addlt	r0, r0, r3
 8004952:	4770      	bx	lr

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
